<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="stm32f10x__can_8c" kind="file" language="C++">
    <compoundname>stm32f10x_can.c</compoundname>
    <includes refid="stm32f10x__can_8h" local="yes">stm32f10x_can.h</includes>
    <includes refid="stm32f10x__rcc_8h" local="yes">stm32f10x_rcc.h</includes>
    <incdepgraph>
      <node id="866">
        <label>system_stm32f10x.h</label>
        <link refid="system__stm32f10x_8h"/>
      </node>
      <node id="860">
        <label>stm32f10x_can.h</label>
        <link refid="stm32f10x__can_8h"/>
        <childnode refid="861" relation="include">
        </childnode>
      </node>
      <node id="863">
        <label>stdint.h</label>
      </node>
      <node id="859">
        <label>C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c</label>
        <link refid="stm32f10x__can_8c"/>
        <childnode refid="860" relation="include">
        </childnode>
        <childnode refid="867" relation="include">
        </childnode>
      </node>
      <node id="862">
        <label>core_cm3.h</label>
        <link refid="core__cm3_8h"/>
        <childnode refid="863" relation="include">
        </childnode>
        <childnode refid="864" relation="include">
        </childnode>
        <childnode refid="865" relation="include">
        </childnode>
      </node>
      <node id="865">
        <label>core_cmFunc.h</label>
        <link refid="core__cm_func_8h"/>
      </node>
      <node id="867">
        <label>stm32f10x_rcc.h</label>
        <link refid="stm32f10x__rcc_8h"/>
        <childnode refid="861" relation="include">
        </childnode>
      </node>
      <node id="864">
        <label>core_cmInstr.h</label>
        <link refid="core__cm_instr_8h"/>
      </node>
      <node id="861">
        <label>stm32f10x.h</label>
        <link refid="stm32f10x_8h"/>
        <childnode refid="862" relation="include">
        </childnode>
        <childnode refid="866" relation="include">
        </childnode>
        <childnode refid="863" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___c_a_n___private___defines_1ga1ded3736beb63c49281f2983fc68c36d" prot="public" static="no">
        <name>MCR_DBF</name>
        <initializer>((uint32_t)0x00010000) /* software master reset */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="49" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_a_n___private___defines_1gabeb6db5ba5c01da5084ec1605f868e18" prot="public" static="no">
        <name>TMIDxR_TXRQ</name>
        <initializer>((uint32_t)0x00000001) /* Transmit mailbox request */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="52" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_a_n___private___defines_1ga6125d0273c466e402db1a8f5bf888857" prot="public" static="no">
        <name>FMR_FINIT</name>
        <initializer>((uint32_t)0x00000001) /* Filter init mode */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="55" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_a_n___private___defines_1ga60a32132df242146efd3e9f7a079f0f0" prot="public" static="no">
        <name>INAK_TIMEOUT</name>
        <initializer>((uint32_t)0x0000FFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="58" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_a_n___private___defines_1ga1bb8107706c8b4039ac55a122f3c65bb" prot="public" static="no">
        <name>SLAK_TIMEOUT</name>
        <initializer>((uint32_t)0x0000FFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="60" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_a_n___private___defines_1gac67e7d905ba11441bf9e14180805cf3a" prot="public" static="no">
        <name>CAN_FLAGS_TSR</name>
        <initializer>((uint32_t)0x08000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="65" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_a_n___private___defines_1ga2a03d73273ab353c8deb3a4730431977" prot="public" static="no">
        <name>CAN_FLAGS_RF1R</name>
        <initializer>((uint32_t)0x04000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="67" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_a_n___private___defines_1ga4b22b2552759778ac07825240823a45f" prot="public" static="no">
        <name>CAN_FLAGS_RF0R</name>
        <initializer>((uint32_t)0x02000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="69" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_a_n___private___defines_1ga3aaa7df395ce1a90cb6e2ff3d2c4b24e" prot="public" static="no">
        <name>CAN_FLAGS_MSR</name>
        <initializer>((uint32_t)0x01000000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="71" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_a_n___private___defines_1ga14f7bb0b320da21443c9bd60b1f86b5d" prot="public" static="no">
        <name>CAN_FLAGS_ESR</name>
        <initializer>((uint32_t)0x00F00000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="73" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_a_n___private___defines_1gaa62f09d0693681cb7576f61c93b7cf0f" prot="public" static="no">
        <name>CAN_TXMAILBOX_0</name>
        <initializer>((uint8_t)0x00)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="76" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_a_n___private___defines_1ga4e20f0aac1ac940014a6c66971890943" prot="public" static="no">
        <name>CAN_TXMAILBOX_1</name>
        <initializer>((uint8_t)0x01)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="77" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_a_n___private___defines_1ga8a842aa352d72321930cc963b26bf6d7" prot="public" static="no">
        <name>CAN_TXMAILBOX_2</name>
        <initializer>((uint8_t)0x02)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="78" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_a_n___private___defines_1ga79094ce5a3a2f717140e8cc9b7c161b6" prot="public" static="no">
        <name>CAN_MODE_MASK</name>
        <initializer>((uint32_t) 0x00000003)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="82" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___c_a_n___private___functions_1gaed56e0c694fbf4dc2fd3244d4e4e269a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref></type>
        <definition>static ITStatus CheckITStatus</definition>
        <argsstring>(uint32_t CAN_Reg, uint32_t It_Bit)</argsstring>
        <name>CheckITStatus</name>
        <param>
          <type>uint32_t</type>
          <declname>CAN_Reg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>It_Bit</declname>
        </param>
        <briefdescription>
<para>Checks whether the CAN interrupt has occurred or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CAN_Reg</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the CAN interrupt register to check. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>It_Bit</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the interrupt source bit to check. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the CAN Interrupt (SET or RESET). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="107" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="1395" bodyend="1410"/>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1ga002b74cd69574a14b17ad445090245cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN_DeInit</definition>
        <argsstring>(CAN_TypeDef *CANx)</argsstring>
        <name>CAN_DeInit</name>
        <param>
          <type><ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref> *</type>
          <declname>CANx</declname>
        </param>
        <briefdescription>
<para>Deinitializes the CAN peripheral registers to their default reset values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CANx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the CAN peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="122" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="122" bodyend="141"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" compoundref="stm32f10x__can_8h" startline="52">IS_CAN_ALL_PERIPH</references>
        <references refid="group___peripheral__declaration_1ga4964ecb6a5c689aaf8ee2832b8093aac" compoundref="stm32f10x_8h" startline="1400">CAN1</references>
        <references refid="group___r_c_c___exported___functions_1gab197ae4369c10b92640a733b40ed2801" compoundref="stm32f10x__rcc_8c" startline="1216" endline="1229">RCC_APB1PeriphResetCmd</references>
        <references refid="group___a_p_b1__peripheral_1ga7f1d940739de0134ae89e9e04214989d" compoundref="stm32f10x__rcc_8h" startline="547">RCC_APB1Periph_CAN1</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" compoundref="stm32f10x_8h" startline="521">ENABLE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="group___a_p_b1__peripheral_1ga62801597b97816751c038acb1466179c" compoundref="stm32f10x__rcc_8h" startline="548">RCC_APB1Periph_CAN2</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1ga9023c35a9ab931ad4513fc5d19b4bd6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t CAN_Init</definition>
        <argsstring>(CAN_TypeDef *CANx, CAN_InitTypeDef *CAN_InitStruct)</argsstring>
        <name>CAN_Init</name>
        <param>
          <type><ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref> *</type>
          <declname>CANx</declname>
        </param>
        <param>
          <type><ref refid="struct_c_a_n___init_type_def" kindref="compound">CAN_InitTypeDef</ref> *</type>
          <declname>CAN_InitStruct</declname>
        </param>
        <briefdescription>
<para>Initializes the CAN peripheral according to the specified parameters in the CAN_InitStruct. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CANx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to to select the CAN peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CAN_InitStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <ref refid="struct_c_a_n___init_type_def" kindref="compound">CAN_InitTypeDef</ref> structure that contains the configuration information for the CAN peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>Constant</parametername>
</parameternamelist>
<parameterdescription>
<para>indicates initialization succeed which will be CAN_InitStatus_Failed or CAN_InitStatus_Success. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="154" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="154" bodyend="282"/>
        <references refid="group___c_a_n__sleep__constants_1ga095c319e8c54c974eb2b6eeadf180d96" compoundref="stm32f10x__can_8h" startline="218">CAN_InitStatus_Failed</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" compoundref="stm32f10x__can_8h" startline="52">IS_CAN_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="struct_c_a_n___init_type_def_1aa53ceafdcf1a9a5c9a6566006c9a4b60" compoundref="stm32f10x__can_8h" startline="83">CAN_InitTypeDef::CAN_TTCM</references>
        <references refid="struct_c_a_n___init_type_def_1a70560646c27d96ca8adc4a62d24dafd9" compoundref="stm32f10x__can_8h" startline="87">CAN_InitTypeDef::CAN_ABOM</references>
        <references refid="struct_c_a_n___init_type_def_1a10f873c858a7b0efc2d0ab41524320d3" compoundref="stm32f10x__can_8h" startline="91">CAN_InitTypeDef::CAN_AWUM</references>
        <references refid="struct_c_a_n___init_type_def_1a5adeac1b7b47f2b91e667eddc181ac09" compoundref="stm32f10x__can_8h" startline="95">CAN_InitTypeDef::CAN_NART</references>
        <references refid="struct_c_a_n___init_type_def_1aa63787683c0ad533b513fb60355d76f1" compoundref="stm32f10x__can_8h" startline="99">CAN_InitTypeDef::CAN_RFLM</references>
        <references refid="struct_c_a_n___init_type_def_1a003de4b70fc93b4f820f320c6ea75a16" compoundref="stm32f10x__can_8h" startline="103">CAN_InitTypeDef::CAN_TXFP</references>
        <references refid="group___c_a_n___mode_1ga5d6480c240edeba383b4e07d65814d98" compoundref="stm32f10x__can_8h" startline="234">IS_CAN_MODE</references>
        <references refid="struct_c_a_n___init_type_def_1a24816ff18ae048a5ec4bbb22aa2c04f9" compoundref="stm32f10x__can_8h" startline="64">CAN_InitTypeDef::CAN_Mode</references>
        <references refid="group___c_a_n__synchronisation__jump__width_1ga4e4f344712d3bcac1975318d4ab9a383" compoundref="stm32f10x__can_8h" startline="281">IS_CAN_SJW</references>
        <references refid="struct_c_a_n___init_type_def_1addac271c43490cb37ac7293f7bf201c2" compoundref="stm32f10x__can_8h" startline="68">CAN_InitTypeDef::CAN_SJW</references>
        <references refid="group___c_a_n__time__quantum__in__bit__segment__1_1ga225f1457e1c6b8fc3b5af0f463933152" compoundref="stm32f10x__can_8h" startline="308">IS_CAN_BS1</references>
        <references refid="struct_c_a_n___init_type_def_1aecbd21b55dc88c3a18db93af2836cd58" compoundref="stm32f10x__can_8h" startline="74">CAN_InitTypeDef::CAN_BS1</references>
        <references refid="group___c_a_n__time__quantum__in__bit__segment__2_1ga3f5620b1d094dbd7d2fb8d16f4b187a9" compoundref="stm32f10x__can_8h" startline="326">IS_CAN_BS2</references>
        <references refid="struct_c_a_n___init_type_def_1a693eb00830d6e2aeb4d9fabdba85b9cf" compoundref="stm32f10x__can_8h" startline="78">CAN_InitTypeDef::CAN_BS2</references>
        <references refid="group___c_a_n__clock__prescaler_1gacde6b8be6fe083a6302fc183b5ac1055" compoundref="stm32f10x__can_8h" startline="336">IS_CAN_PRESCALER</references>
        <references refid="struct_c_a_n___init_type_def_1a3e91dbcbf30b893a9bd6a65606cb8fe9" compoundref="stm32f10x__can_8h" startline="61">CAN_InitTypeDef::CAN_Prescaler</references>
        <references refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" compoundref="stm32f10x_8h" startline="705">CAN_TypeDef::MCR</references>
        <references refid="group___peripheral___registers___bits___definition_1gadf9602dfb2f95b481b6e642b95991176" compoundref="stm32f10x_8h" startline="6220">CAN_MCR_SLEEP</references>
        <references refid="group___peripheral___registers___bits___definition_1ga0cf12be5661908dbe38aa14cd4c3a356" compoundref="stm32f10x_8h" startline="6219">CAN_MCR_INRQ</references>
        <references refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" compoundref="stm32f10x_8h" startline="706">CAN_TypeDef::MSR</references>
        <references refid="group___peripheral___registers___bits___definition_1ga2871cee90ebecb760bab16e9c039b682" compoundref="stm32f10x_8h" startline="6230">CAN_MSR_INAK</references>
        <references refid="group___c_a_n___private___defines_1ga60a32132df242146efd3e9f7a079f0f0" compoundref="stm32f10x__can_8c" startline="58">INAK_TIMEOUT</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" compoundref="stm32f10x_8h" startline="521">ENABLE</references>
        <references refid="group___peripheral___registers___bits___definition_1ga32b2eda9cad8a969c5d2349bd1d853bb" compoundref="stm32f10x_8h" startline="6226">CAN_MCR_TTCM</references>
        <references refid="group___peripheral___registers___bits___definition_1gad7aff5c0a3ead7f937849ab66eba7490" compoundref="stm32f10x_8h" startline="6225">CAN_MCR_ABOM</references>
        <references refid="group___peripheral___registers___bits___definition_1gaa2745f1a565c3f2ec5b16612d1fd66e0" compoundref="stm32f10x_8h" startline="6224">CAN_MCR_AWUM</references>
        <references refid="group___peripheral___registers___bits___definition_1ga2774f04e286942d36a5b6135c8028049" compoundref="stm32f10x_8h" startline="6223">CAN_MCR_NART</references>
        <references refid="group___peripheral___registers___bits___definition_1ga501125ff257a7d02c35a0d6dcbaa2ba8" compoundref="stm32f10x_8h" startline="6222">CAN_MCR_RFLM</references>
        <references refid="group___peripheral___registers___bits___definition_1ga35e7e66f9cd8cb6efa6a80367d2294a9" compoundref="stm32f10x_8h" startline="6221">CAN_MCR_TXFP</references>
        <references refid="struct_c_a_n___type_def_1accad1e4155459a13369f5ad0e7c6da29" compoundref="stm32f10x_8h" startline="712">CAN_TypeDef::BTR</references>
        <references refid="group___c_a_n__sleep__constants_1ga6bed5957af8f2f6b00568e15ccac5772" compoundref="stm32f10x__can_8h" startline="219">CAN_InitStatus_Success</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1ga39476830280340363c51041be6b12647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN_FilterInit</definition>
        <argsstring>(CAN_FilterInitTypeDef *CAN_FilterInitStruct)</argsstring>
        <name>CAN_FilterInit</name>
        <param>
          <type><ref refid="struct_c_a_n___filter_init_type_def" kindref="compound">CAN_FilterInitTypeDef</ref> *</type>
          <declname>CAN_FilterInitStruct</declname>
        </param>
        <briefdescription>
<para>Initializes the CAN peripheral according to the specified parameters in the CAN_FilterInitStruct. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CAN_FilterInitStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <ref refid="struct_c_a_n___filter_init_type_def" kindref="compound">CAN_FilterInitTypeDef</ref> structure that contains the configuration information. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="292" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="292" bodyend="376"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___c_a_n__filter__number_1ga28d6c98a160d71059ed9a5973de2a4ef" compoundref="stm32f10x__can_8h" startline="346">IS_CAN_FILTER_NUMBER</references>
        <references refid="struct_c_a_n___filter_init_type_def_1af94466e1138c2b4fe6a67cf556981193" compoundref="stm32f10x__can_8h" startline="135">CAN_FilterInitTypeDef::CAN_FilterNumber</references>
        <references refid="group___c_a_n__filter__mode_1gae684565d5392c12fd333379e5ec840f8" compoundref="stm32f10x__can_8h" startline="361">IS_CAN_FILTER_MODE</references>
        <references refid="struct_c_a_n___filter_init_type_def_1a7cfb23c48aad13a058c2619dbc062d8a" compoundref="stm32f10x__can_8h" startline="137">CAN_FilterInitTypeDef::CAN_FilterMode</references>
        <references refid="group___c_a_n__filter__scale_1gaf64c93166af0eb5ec7e804116f10783a" compoundref="stm32f10x__can_8h" startline="374">IS_CAN_FILTER_SCALE</references>
        <references refid="struct_c_a_n___filter_init_type_def_1a9d52661aca538dbfcafdda6f16dddc82" compoundref="stm32f10x__can_8h" startline="140">CAN_FilterInitTypeDef::CAN_FilterScale</references>
        <references refid="group___c_a_n__filter___f_i_f_o_1ga2df5ae0de841fc80c969e9147991ec9d" compoundref="stm32f10x__can_8h" startline="387">IS_CAN_FILTER_FIFO</references>
        <references refid="struct_c_a_n___filter_init_type_def_1a01ba491f12097adcc9f0a3d627628d55" compoundref="stm32f10x__can_8h" startline="132">CAN_FilterInitTypeDef::CAN_FilterFIFOAssignment</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="struct_c_a_n___filter_init_type_def_1a0225afda33b565f358ca75bdaa780074" compoundref="stm32f10x__can_8h" startline="143">CAN_FilterInitTypeDef::CAN_FilterActivation</references>
        <references refid="group___peripheral__declaration_1ga4964ecb6a5c689aaf8ee2832b8093aac" compoundref="stm32f10x_8h" startline="1400">CAN1</references>
        <references refid="group___c_a_n___private___defines_1ga6125d0273c466e402db1a8f5bf888857" compoundref="stm32f10x__can_8c" startline="55">FMR_FINIT</references>
        <references refid="group___c_a_n__filter__scale_1ga9e0493937e73bcf9a4127eef2f255a95" compoundref="stm32f10x__can_8h" startline="371">CAN_FilterScale_16bit</references>
        <references refid="struct_c_a_n___filter_init_type_def_1a0f052daf04b0a481ecfa5c2cc8058089" compoundref="stm32f10x__can_8h" startline="127">CAN_FilterInitTypeDef::CAN_FilterMaskIdLow</references>
        <references refid="struct_c_a_n___filter_init_type_def_1ab8c56b48ac323e8c7a1b535c79a51f87" compoundref="stm32f10x__can_8h" startline="118">CAN_FilterInitTypeDef::CAN_FilterIdLow</references>
        <references refid="struct_c_a_n___filter_init_type_def_1a6f34539615e6484f266b46aa8f362a91" compoundref="stm32f10x__can_8h" startline="122">CAN_FilterInitTypeDef::CAN_FilterMaskIdHigh</references>
        <references refid="struct_c_a_n___filter_init_type_def_1afc109aa8eedced09d296605f2eb871f7" compoundref="stm32f10x__can_8h" startline="114">CAN_FilterInitTypeDef::CAN_FilterIdHigh</references>
        <references refid="group___c_a_n__filter__scale_1gac63dfb0e11713c59268ee9f4aebab60e" compoundref="stm32f10x__can_8h" startline="372">CAN_FilterScale_32bit</references>
        <references refid="group___c_a_n__filter__mode_1ga8136e518fb31fd91079e4c7c4c19c94b" compoundref="stm32f10x__can_8h" startline="358">CAN_FilterMode_IdMask</references>
        <references refid="group___c_a_n__filter___f_i_f_o_1ga8249c27978ca94676530540b88a6be8f" compoundref="stm32f10x__can_8h" startline="385">CAN_Filter_FIFO0</references>
        <references refid="group___c_a_n__filter___f_i_f_o_1gaab8478c89a607c4b8baf68efc730e316" compoundref="stm32f10x__can_8h" startline="386">CAN_Filter_FIFO1</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" compoundref="stm32f10x_8h" startline="521">ENABLE</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1gad77ad810868ed111755fc9e8ae0c7646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN_StructInit</definition>
        <argsstring>(CAN_InitTypeDef *CAN_InitStruct)</argsstring>
        <name>CAN_StructInit</name>
        <param>
          <type><ref refid="struct_c_a_n___init_type_def" kindref="compound">CAN_InitTypeDef</ref> *</type>
          <declname>CAN_InitStruct</declname>
        </param>
        <briefdescription>
<para>Fills each CAN_InitStruct member with its default value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CAN_InitStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <ref refid="struct_c_a_n___init_type_def" kindref="compound">CAN_InitTypeDef</ref> structure which will be initialized. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="384" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="384" bodyend="420"/>
        <references refid="struct_c_a_n___init_type_def_1aa53ceafdcf1a9a5c9a6566006c9a4b60" compoundref="stm32f10x__can_8h" startline="83">CAN_InitTypeDef::CAN_TTCM</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_c_a_n___init_type_def_1a70560646c27d96ca8adc4a62d24dafd9" compoundref="stm32f10x__can_8h" startline="87">CAN_InitTypeDef::CAN_ABOM</references>
        <references refid="struct_c_a_n___init_type_def_1a10f873c858a7b0efc2d0ab41524320d3" compoundref="stm32f10x__can_8h" startline="91">CAN_InitTypeDef::CAN_AWUM</references>
        <references refid="struct_c_a_n___init_type_def_1a5adeac1b7b47f2b91e667eddc181ac09" compoundref="stm32f10x__can_8h" startline="95">CAN_InitTypeDef::CAN_NART</references>
        <references refid="struct_c_a_n___init_type_def_1aa63787683c0ad533b513fb60355d76f1" compoundref="stm32f10x__can_8h" startline="99">CAN_InitTypeDef::CAN_RFLM</references>
        <references refid="struct_c_a_n___init_type_def_1a003de4b70fc93b4f820f320c6ea75a16" compoundref="stm32f10x__can_8h" startline="103">CAN_InitTypeDef::CAN_TXFP</references>
        <references refid="struct_c_a_n___init_type_def_1a24816ff18ae048a5ec4bbb22aa2c04f9" compoundref="stm32f10x__can_8h" startline="64">CAN_InitTypeDef::CAN_Mode</references>
        <references refid="group___c_a_n___mode_1gaaf1f48ab4917ccfd5fd31dd781d59e29" compoundref="stm32f10x__can_8h" startline="229">CAN_Mode_Normal</references>
        <references refid="struct_c_a_n___init_type_def_1addac271c43490cb37ac7293f7bf201c2" compoundref="stm32f10x__can_8h" startline="68">CAN_InitTypeDef::CAN_SJW</references>
        <references refid="group___c_a_n__synchronisation__jump__width_1ga4e03d22ae683b63cb4df238449ec967c" compoundref="stm32f10x__can_8h" startline="276">CAN_SJW_1tq</references>
        <references refid="struct_c_a_n___init_type_def_1aecbd21b55dc88c3a18db93af2836cd58" compoundref="stm32f10x__can_8h" startline="74">CAN_InitTypeDef::CAN_BS1</references>
        <references refid="group___c_a_n__time__quantum__in__bit__segment__1_1ga7c5c668200f41991e14b31ca20235000" compoundref="stm32f10x__can_8h" startline="294">CAN_BS1_4tq</references>
        <references refid="struct_c_a_n___init_type_def_1a693eb00830d6e2aeb4d9fabdba85b9cf" compoundref="stm32f10x__can_8h" startline="78">CAN_InitTypeDef::CAN_BS2</references>
        <references refid="group___c_a_n__time__quantum__in__bit__segment__2_1gab3d325ce4a5d0eb1ee8ee50ad4ec7e49" compoundref="stm32f10x__can_8h" startline="319">CAN_BS2_3tq</references>
        <references refid="struct_c_a_n___init_type_def_1a3e91dbcbf30b893a9bd6a65606cb8fe9" compoundref="stm32f10x__can_8h" startline="61">CAN_InitTypeDef::CAN_Prescaler</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1ga109ff8960bc59f44b984c9646f17b3c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN_SlaveStartBank</definition>
        <argsstring>(uint8_t CAN_BankNumber)</argsstring>
        <name>CAN_SlaveStartBank</name>
        <param>
          <type>uint8_t</type>
          <declname>CAN_BankNumber</declname>
        </param>
        <briefdescription>
<para>Select the start bank filter for slave CAN. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function applies only to STM32 Connectivity line devices. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CAN_BankNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the start slave bank filter from 1..27. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="428" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="428" bodyend="442"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___start__bank__filter__for__slave___c_a_n_1ga7fb463088ff4cd584bba47e3d0a4f469" compoundref="stm32f10x__can_8h" startline="396">IS_CAN_BANKNUMBER</references>
        <references refid="group___peripheral__declaration_1ga4964ecb6a5c689aaf8ee2832b8093aac" compoundref="stm32f10x_8h" startline="1400">CAN1</references>
        <references refid="group___c_a_n___private___defines_1ga6125d0273c466e402db1a8f5bf888857" compoundref="stm32f10x__can_8c" startline="55">FMR_FINIT</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1gac0e2d33e08caf49d1f1251f0dcc20213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN_DBGFreeze</definition>
        <argsstring>(CAN_TypeDef *CANx, FunctionalState NewState)</argsstring>
        <name>CAN_DBGFreeze</name>
        <param>
          <type><ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref> *</type>
          <declname>CANx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the DBG Freeze for CAN. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CANx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to to select the CAN peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the CAN peripheral. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="451" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="451" bodyend="467"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" compoundref="stm32f10x__can_8h" startline="52">IS_CAN_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" compoundref="stm32f10x_8h" startline="705">CAN_TypeDef::MCR</references>
        <references refid="group___c_a_n___private___defines_1ga1ded3736beb63c49281f2983fc68c36d" compoundref="stm32f10x__can_8c" startline="49">MCR_DBF</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1ga94740177bab153ca5b102d122f9a8cca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN_TTComModeCmd</definition>
        <argsstring>(CAN_TypeDef *CANx, FunctionalState NewState)</argsstring>
        <name>CAN_TTComModeCmd</name>
        <param>
          <type><ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref> *</type>
          <declname>CANx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disabes the CAN Time TriggerOperation communication mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CANx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to to select the CAN peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>: Mode new state , can be one of <ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>when enabled, Time stamp (TIME[15:0]) value is sent in the last two data bytes of the 8-byte message: TIME[7:0] in data byte 6 and TIME[15:8] in data byte 7 </para></simplesect>
<simplesect kind="note"><para>DLC must be programmed as 8 in order Time Stamp (2 bytes) to be sent over the CAN bus. </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="481" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="481" bodyend="506"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" compoundref="stm32f10x__can_8h" startline="52">IS_CAN_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" compoundref="stm32f10x_8h" startline="705">CAN_TypeDef::MCR</references>
        <references refid="group___peripheral___registers___bits___definition_1ga32b2eda9cad8a969c5d2349bd1d853bb" compoundref="stm32f10x_8h" startline="6226">CAN_MCR_TTCM</references>
        <references refid="struct_c_a_n___type_def_1a328925e230f68a775f6f4ad1076c27ce" compoundref="stm32f10x_8h" startline="714">CAN_TypeDef::sTxMailBox</references>
        <references refid="struct_c_a_n___tx_mail_box___type_def_1a2351cb865d064cf75f61642aaa887f76" compoundref="stm32f10x_8h" startline="672">CAN_TxMailBox_TypeDef::TDTR</references>
        <references refid="group___peripheral___registers___bits___definition_1gad2d329960b527a62fab099a084bfa906" compoundref="stm32f10x_8h" startline="6327">CAN_TDT0R_TGT</references>
        <references refid="group___peripheral___registers___bits___definition_1ga35757787e6481553885fdf4fd2738c4b" compoundref="stm32f10x_8h" startline="6351">CAN_TDT1R_TGT</references>
        <references refid="group___peripheral___registers___bits___definition_1ga4c51b43d309b56e8a64724ef1517033e" compoundref="stm32f10x_8h" startline="6375">CAN_TDT2R_TGT</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1gaccfcb81f76f58400077c7b2d8641dd83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t CAN_Transmit</definition>
        <argsstring>(CAN_TypeDef *CANx, CanTxMsg *TxMessage)</argsstring>
        <name>CAN_Transmit</name>
        <param>
          <type><ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref> *</type>
          <declname>CANx</declname>
        </param>
        <param>
          <type><ref refid="struct_can_tx_msg" kindref="compound">CanTxMsg</ref> *</type>
          <declname>TxMessage</declname>
        </param>
        <briefdescription>
<para>Initiates the transmission of a message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CANx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to to select the CAN peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TxMessage</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a structure which contains CAN Id, CAN DLC and CAN data. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>number of the mailbox that is used for transmission or CAN_TxStatus_NoMailBox if there is no empty mailbox. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="515" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="515" bodyend="578"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" compoundref="stm32f10x__can_8h" startline="52">IS_CAN_ALL_PERIPH</references>
        <references refid="group___c_a_n__identifier__type_1gab845f7fbcf6ff8cf3d025210eb8900e4" compoundref="stm32f10x__can_8h" startline="420">IS_CAN_IDTYPE</references>
        <references refid="struct_can_tx_msg_1aa4c8568a0e3250a17bd7e116b3e09670" compoundref="stm32f10x__can_8h" startline="159">CanTxMsg::IDE</references>
        <references refid="group___c_a_n__remote__transmission__request_1ga3379997ad4da6fc4d7975c52b891bdc0" compoundref="stm32f10x__can_8h" startline="432">IS_CAN_RTR</references>
        <references refid="struct_can_tx_msg_1a69f84255db38c6910058f290efdb7302" compoundref="stm32f10x__can_8h" startline="163">CanTxMsg::RTR</references>
        <references refid="group___c_a_n___tx_1ga6109469a6a2792b3e7c6be520ea50d36" compoundref="stm32f10x__can_8h" startline="408">IS_CAN_DLC</references>
        <references refid="struct_can_tx_msg_1ab49d0fa602aad2fd9cd007adafc11fc2" compoundref="stm32f10x__can_8h" startline="167">CanTxMsg::DLC</references>
        <references refid="struct_c_a_n___type_def_1acbc82ac4e87e75350fc586be5e56d95b" compoundref="stm32f10x_8h" startline="707">CAN_TypeDef::TSR</references>
        <references refid="group___peripheral___registers___bits___definition_1gad7500e491fe82e67ed5d40759e8a50f0" compoundref="stm32f10x_8h" startline="6259">CAN_TSR_TME0</references>
        <references refid="group___peripheral___registers___bits___definition_1ga5ba2b51def4b1683fd050e43045306ea" compoundref="stm32f10x_8h" startline="6260">CAN_TSR_TME1</references>
        <references refid="group___peripheral___registers___bits___definition_1gaf6523fac51d3aed2e36de4c2f07c2a21" compoundref="stm32f10x_8h" startline="6261">CAN_TSR_TME2</references>
        <references refid="group___c_a_n__transmit__constants_1ga2620e99debd51011d3569121f2e44690" compoundref="stm32f10x__can_8h" startline="445">CAN_TxStatus_NoMailBox</references>
        <references refid="struct_c_a_n___type_def_1a328925e230f68a775f6f4ad1076c27ce" compoundref="stm32f10x_8h" startline="714">CAN_TypeDef::sTxMailBox</references>
        <references refid="struct_c_a_n___tx_mail_box___type_def_1a22f525c909de2dcec1d4093fe1d562b8" compoundref="stm32f10x_8h" startline="671">CAN_TxMailBox_TypeDef::TIR</references>
        <references refid="group___c_a_n___private___defines_1gabeb6db5ba5c01da5084ec1605f868e18" compoundref="stm32f10x__can_8c" startline="52">TMIDxR_TXRQ</references>
        <references refid="group___c_a_n__identifier__type_1ga151d9df8a6f361d0a3231593726b5a13" compoundref="stm32f10x__can_8h" startline="418">CAN_Id_Standard</references>
        <references refid="group___c_a_n___tx_1gaf059e4383fa69dec6e18216b22a87f51" compoundref="stm32f10x__can_8h" startline="406">IS_CAN_STDID</references>
        <references refid="struct_can_tx_msg_1abfb50c8208227f8cf378f29cf9a3a6f3" compoundref="stm32f10x__can_8h" startline="153">CanTxMsg::StdId</references>
        <references refid="group___c_a_n___tx_1ga62dbc2163ad6751b3f921e717b00e9f2" compoundref="stm32f10x__can_8h" startline="407">IS_CAN_EXTID</references>
        <references refid="struct_can_tx_msg_1a33050a95a4cc463b589ff16bdd416f22" compoundref="stm32f10x__can_8h" startline="156">CanTxMsg::ExtId</references>
        <references refid="struct_c_a_n___tx_mail_box___type_def_1a2351cb865d064cf75f61642aaa887f76" compoundref="stm32f10x_8h" startline="672">CAN_TxMailBox_TypeDef::TDTR</references>
        <references refid="struct_c_a_n___tx_mail_box___type_def_1a408c96501b1cc8bd527432736d132a39" compoundref="stm32f10x_8h" startline="673">CAN_TxMailBox_TypeDef::TDLR</references>
        <references refid="struct_can_tx_msg_1aabfbf718f627da26d9e3cf903dc0ad02" compoundref="stm32f10x__can_8h" startline="171">CanTxMsg::Data</references>
        <references refid="struct_c_a_n___tx_mail_box___type_def_1a98c6bcd7c9bae378ebf83fd9f5b59020" compoundref="stm32f10x_8h" startline="674">CAN_TxMailBox_TypeDef::TDHR</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1ga68ab05a0a6cdfcc2b6f6b6b2c10848e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t CAN_TransmitStatus</definition>
        <argsstring>(CAN_TypeDef *CANx, uint8_t TransmitMailbox)</argsstring>
        <name>CAN_TransmitStatus</name>
        <param>
          <type><ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref> *</type>
          <declname>CANx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>TransmitMailbox</declname>
        </param>
        <briefdescription>
<para>Checks the transmission of a message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CANx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to to select the CAN peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>TransmitMailbox</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of the mailbox that is used for transmission. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>CAN_TxStatus_Ok</parametername>
</parameternamelist>
<parameterdescription>
<para>if the CAN driver transmits the message, CAN_TxStatus_Failed in an other case. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="589" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="589" bodyend="635"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" compoundref="stm32f10x__can_8h" startline="52">IS_CAN_ALL_PERIPH</references>
        <references refid="group___c_a_n___tx_1ga218b3e1380c4d49163c91a1af904e44c" compoundref="stm32f10x__can_8h" startline="405">IS_CAN_TRANSMITMAILBOX</references>
        <references refid="group___c_a_n___private___defines_1gaa62f09d0693681cb7576f61c93b7cf0f" compoundref="stm32f10x__can_8c" startline="76">CAN_TXMAILBOX_0</references>
        <references refid="struct_c_a_n___type_def_1acbc82ac4e87e75350fc586be5e56d95b" compoundref="stm32f10x_8h" startline="707">CAN_TypeDef::TSR</references>
        <references refid="group___peripheral___registers___bits___definition_1ga4a4809b8908618df57e6393cc7fe0f52" compoundref="stm32f10x_8h" startline="6241">CAN_TSR_RQCP0</references>
        <references refid="group___peripheral___registers___bits___definition_1gaacedb237b31d29aef7f38475e9a6b297" compoundref="stm32f10x_8h" startline="6242">CAN_TSR_TXOK0</references>
        <references refid="group___peripheral___registers___bits___definition_1gad7500e491fe82e67ed5d40759e8a50f0" compoundref="stm32f10x_8h" startline="6259">CAN_TSR_TME0</references>
        <references refid="group___c_a_n___private___defines_1ga4e20f0aac1ac940014a6c66971890943" compoundref="stm32f10x__can_8c" startline="77">CAN_TXMAILBOX_1</references>
        <references refid="group___peripheral___registers___bits___definition_1gabd3118dec59c3a45d2f262b090699538" compoundref="stm32f10x_8h" startline="6246">CAN_TSR_RQCP1</references>
        <references refid="group___peripheral___registers___bits___definition_1gaea918e510c5471b1ac797350b7950151" compoundref="stm32f10x_8h" startline="6247">CAN_TSR_TXOK1</references>
        <references refid="group___peripheral___registers___bits___definition_1ga5ba2b51def4b1683fd050e43045306ea" compoundref="stm32f10x_8h" startline="6260">CAN_TSR_TME1</references>
        <references refid="group___c_a_n___private___defines_1ga8a842aa352d72321930cc963b26bf6d7" compoundref="stm32f10x__can_8c" startline="78">CAN_TXMAILBOX_2</references>
        <references refid="group___peripheral___registers___bits___definition_1ga3cf9e83cec96164f1dadf4e43411ebf0" compoundref="stm32f10x_8h" startline="6251">CAN_TSR_RQCP2</references>
        <references refid="group___peripheral___registers___bits___definition_1ga782c591bb204d751b470dd53a37d240e" compoundref="stm32f10x_8h" startline="6252">CAN_TSR_TXOK2</references>
        <references refid="group___peripheral___registers___bits___definition_1gaf6523fac51d3aed2e36de4c2f07c2a21" compoundref="stm32f10x_8h" startline="6261">CAN_TSR_TME2</references>
        <references refid="group___c_a_n__transmit__constants_1ga8d193002e76c04ec8caff6b110cd5983" compoundref="stm32f10x__can_8h" startline="442">CAN_TxStatus_Failed</references>
        <references refid="group___c_a_n__transmit__constants_1ga9678a3a51379422868083608c7394409" compoundref="stm32f10x__can_8h" startline="444">CAN_TxStatus_Pending</references>
        <references refid="group___c_a_n__transmit__constants_1ga0b401c61922b1449de9b486dcf475c97" compoundref="stm32f10x__can_8h" startline="443">CAN_TxStatus_Ok</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1ga81106cdf5395a1947bfc87ec1685829e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN_CancelTransmit</definition>
        <argsstring>(CAN_TypeDef *CANx, uint8_t Mailbox)</argsstring>
        <name>CAN_CancelTransmit</name>
        <param>
          <type><ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref> *</type>
          <declname>CANx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>Mailbox</declname>
        </param>
        <briefdescription>
<para>Cancels a transmit request. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CANx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to to select the CAN peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Mailbox</parametername>
</parameternamelist>
<parameterdescription>
<para>Mailbox number. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="643" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="643" bodyend="660"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" compoundref="stm32f10x__can_8h" startline="52">IS_CAN_ALL_PERIPH</references>
        <references refid="group___c_a_n___tx_1ga218b3e1380c4d49163c91a1af904e44c" compoundref="stm32f10x__can_8h" startline="405">IS_CAN_TRANSMITMAILBOX</references>
        <references refid="group___c_a_n___private___defines_1gaa62f09d0693681cb7576f61c93b7cf0f" compoundref="stm32f10x__can_8c" startline="76">CAN_TXMAILBOX_0</references>
        <references refid="struct_c_a_n___type_def_1acbc82ac4e87e75350fc586be5e56d95b" compoundref="stm32f10x_8h" startline="707">CAN_TypeDef::TSR</references>
        <references refid="group___peripheral___registers___bits___definition_1gafdac6b87a303b0d0ec9b0d94a54ae31f" compoundref="stm32f10x_8h" startline="6245">CAN_TSR_ABRQ0</references>
        <references refid="group___c_a_n___private___defines_1ga4e20f0aac1ac940014a6c66971890943" compoundref="stm32f10x__can_8c" startline="77">CAN_TXMAILBOX_1</references>
        <references refid="group___peripheral___registers___bits___definition_1ga4c44a4e585b3ab1c37a6c2c28c90d6cd" compoundref="stm32f10x_8h" startline="6250">CAN_TSR_ABRQ1</references>
        <references refid="group___c_a_n___private___defines_1ga8a842aa352d72321930cc963b26bf6d7" compoundref="stm32f10x__can_8c" startline="78">CAN_TXMAILBOX_2</references>
        <references refid="group___peripheral___registers___bits___definition_1ga2a3b7e4be7cebb35ad66cb85b82901bb" compoundref="stm32f10x_8h" startline="6255">CAN_TSR_ABRQ2</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1ga351b90bb8a3bb0c846f85bbd56ef4dc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN_Receive</definition>
        <argsstring>(CAN_TypeDef *CANx, uint8_t FIFONumber, CanRxMsg *RxMessage)</argsstring>
        <name>CAN_Receive</name>
        <param>
          <type><ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref> *</type>
          <declname>CANx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>FIFONumber</declname>
        </param>
        <param>
          <type><ref refid="struct_can_rx_msg" kindref="compound">CanRxMsg</ref> *</type>
          <declname>RxMessage</declname>
        </param>
        <briefdescription>
<para>Receives a message. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CANx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to to select the CAN peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FIFONumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Receive FIFO number, CAN_FIFO0 or CAN_FIFO1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>RxMessage</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a structure receive message which contains CAN Id, CAN DLC, CAN datas and FMI number. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="676" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="676" bodyend="717"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" compoundref="stm32f10x__can_8h" startline="52">IS_CAN_ALL_PERIPH</references>
        <references refid="group___c_a_n__receive___f_i_f_o__number__constants_1gaeeb94bf58bd48b8928f964eaaa20a24a" compoundref="stm32f10x__can_8h" startline="458">IS_CAN_FIFO</references>
        <references refid="struct_can_rx_msg_1a83a67d1a709cc01570ce956e5adc811f" compoundref="stm32f10x__can_8h" startline="187">CanRxMsg::IDE</references>
        <references refid="struct_c_a_n___type_def_1aa6053bc607535d9ecf7a3d887c0cc053" compoundref="stm32f10x_8h" startline="715">CAN_TypeDef::sFIFOMailBox</references>
        <references refid="struct_c_a_n___f_i_f_o_mail_box___type_def_1a034504d43f7b16b320745a25b3a8f12d" compoundref="stm32f10x_8h" startline="683">CAN_FIFOMailBox_TypeDef::RIR</references>
        <references refid="group___c_a_n__identifier__type_1ga151d9df8a6f361d0a3231593726b5a13" compoundref="stm32f10x__can_8h" startline="418">CAN_Id_Standard</references>
        <references refid="struct_can_rx_msg_1a62769e18836146f71238bee6b43b531e" compoundref="stm32f10x__can_8h" startline="181">CanRxMsg::StdId</references>
        <references refid="struct_can_rx_msg_1a1fdca10d31c81eea2ccef41d2aced562" compoundref="stm32f10x__can_8h" startline="184">CanRxMsg::ExtId</references>
        <references refid="struct_can_rx_msg_1a9a183149a391a24f86da2ce895f0f1c9" compoundref="stm32f10x__can_8h" startline="191">CanRxMsg::RTR</references>
        <references refid="struct_can_rx_msg_1abf77d3abf9ad290c08cdfd5d99ebc745" compoundref="stm32f10x__can_8h" startline="195">CanRxMsg::DLC</references>
        <references refid="struct_c_a_n___f_i_f_o_mail_box___type_def_1a49d74ca8b402c2b9596bfcbe4cd051a9" compoundref="stm32f10x_8h" startline="684">CAN_FIFOMailBox_TypeDef::RDTR</references>
        <references refid="struct_can_rx_msg_1a5afe39d8e295659eeb3030593828b96a" compoundref="stm32f10x__can_8h" startline="201">CanRxMsg::FMI</references>
        <references refid="struct_can_rx_msg_1ae8ecbad16622db30d63fda08bc478649" compoundref="stm32f10x__can_8h" startline="198">CanRxMsg::Data</references>
        <references refid="struct_c_a_n___f_i_f_o_mail_box___type_def_1ac7d62861de29d0b4fcf11fabbdbd76e7" compoundref="stm32f10x_8h" startline="685">CAN_FIFOMailBox_TypeDef::RDLR</references>
        <references refid="struct_c_a_n___f_i_f_o_mail_box___type_def_1a95890984bd67845015d40e82fb091c93" compoundref="stm32f10x_8h" startline="686">CAN_FIFOMailBox_TypeDef::RDHR</references>
        <references refid="group___c_a_n__receive___f_i_f_o__number__constants_1ga8f52eeefb86b2af5b7c3b4b75fa4d114" compoundref="stm32f10x__can_8h" startline="455">CAN_FIFO0</references>
        <references refid="struct_c_a_n___type_def_1ad8e858479e26ab075ee2ddb630e8769d" compoundref="stm32f10x_8h" startline="708">CAN_TypeDef::RF0R</references>
        <references refid="group___peripheral___registers___bits___definition_1ga74d2db4b9b7d52712e47557dcc61964d" compoundref="stm32f10x_8h" startline="6272">CAN_RF0R_RFOM0</references>
        <references refid="struct_c_a_n___type_def_1a69a528d1288c1de666df68655af1d20e" compoundref="stm32f10x_8h" startline="709">CAN_TypeDef::RF1R</references>
        <references refid="group___peripheral___registers___bits___definition_1ga6930f860de4a90e3344e63fbc209b9ab" compoundref="stm32f10x_8h" startline="6278">CAN_RF1R_RFOM1</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1ga1bc3b39471e579b4101624c33d27918b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN_FIFORelease</definition>
        <argsstring>(CAN_TypeDef *CANx, uint8_t FIFONumber)</argsstring>
        <name>CAN_FIFORelease</name>
        <param>
          <type><ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref> *</type>
          <declname>CANx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>FIFONumber</declname>
        </param>
        <briefdescription>
<para>Releases the specified FIFO. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CANx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to to select the CAN peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FIFONumber</parametername>
</parameternamelist>
<parameterdescription>
<para>FIFO to release, CAN_FIFO0 or CAN_FIFO1. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="730" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="730" bodyend="745"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" compoundref="stm32f10x__can_8h" startline="52">IS_CAN_ALL_PERIPH</references>
        <references refid="group___c_a_n__receive___f_i_f_o__number__constants_1gaeeb94bf58bd48b8928f964eaaa20a24a" compoundref="stm32f10x__can_8h" startline="458">IS_CAN_FIFO</references>
        <references refid="group___c_a_n__receive___f_i_f_o__number__constants_1ga8f52eeefb86b2af5b7c3b4b75fa4d114" compoundref="stm32f10x__can_8h" startline="455">CAN_FIFO0</references>
        <references refid="struct_c_a_n___type_def_1ad8e858479e26ab075ee2ddb630e8769d" compoundref="stm32f10x_8h" startline="708">CAN_TypeDef::RF0R</references>
        <references refid="group___peripheral___registers___bits___definition_1ga74d2db4b9b7d52712e47557dcc61964d" compoundref="stm32f10x_8h" startline="6272">CAN_RF0R_RFOM0</references>
        <references refid="struct_c_a_n___type_def_1a69a528d1288c1de666df68655af1d20e" compoundref="stm32f10x_8h" startline="709">CAN_TypeDef::RF1R</references>
        <references refid="group___peripheral___registers___bits___definition_1ga6930f860de4a90e3344e63fbc209b9ab" compoundref="stm32f10x_8h" startline="6278">CAN_RF1R_RFOM1</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1ga7100459a95ce1b3cfe8ab15e112029fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t CAN_MessagePending</definition>
        <argsstring>(CAN_TypeDef *CANx, uint8_t FIFONumber)</argsstring>
        <name>CAN_MessagePending</name>
        <param>
          <type><ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref> *</type>
          <declname>CANx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>FIFONumber</declname>
        </param>
        <briefdescription>
<para>Returns the number of pending messages. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CANx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to to select the CAN peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FIFONumber</parametername>
</parameternamelist>
<parameterdescription>
<para>Receive FIFO number, CAN_FIFO0 or CAN_FIFO1. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NbMessage</parametername>
</parameternamelist>
<parameterdescription>
<para>: which is the number of pending message. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="753" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="753" bodyend="772"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" compoundref="stm32f10x__can_8h" startline="52">IS_CAN_ALL_PERIPH</references>
        <references refid="group___c_a_n__receive___f_i_f_o__number__constants_1gaeeb94bf58bd48b8928f964eaaa20a24a" compoundref="stm32f10x__can_8h" startline="458">IS_CAN_FIFO</references>
        <references refid="group___c_a_n__receive___f_i_f_o__number__constants_1ga8f52eeefb86b2af5b7c3b4b75fa4d114" compoundref="stm32f10x__can_8h" startline="455">CAN_FIFO0</references>
        <references refid="struct_c_a_n___type_def_1ad8e858479e26ab075ee2ddb630e8769d" compoundref="stm32f10x_8h" startline="708">CAN_TypeDef::RF0R</references>
        <references refid="group___c_a_n__receive___f_i_f_o__number__constants_1gafbcf3f13dbf61030ab7a812595ba9850" compoundref="stm32f10x__can_8h" startline="456">CAN_FIFO1</references>
        <references refid="struct_c_a_n___type_def_1a69a528d1288c1de666df68655af1d20e" compoundref="stm32f10x_8h" startline="709">CAN_TypeDef::RF1R</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1gab2a3630e9e3024114eb117d14e514208" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t CAN_OperatingModeRequest</definition>
        <argsstring>(CAN_TypeDef *CANx, uint8_t CAN_OperatingMode)</argsstring>
        <name>CAN_OperatingModeRequest</name>
        <param>
          <type><ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref> *</type>
          <declname>CANx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>CAN_OperatingMode</declname>
        </param>
        <briefdescription>
<para>Select the CAN Operation mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CAN_OperatingMode</parametername>
</parameternamelist>
<parameterdescription>
<para>: CAN Operating Mode. This parameter can be one of CAN_OperatingMode_TypeDef enumeration. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>of the requested mode which can be<itemizedlist>
<listitem><para>CAN_ModeStatus_Failed CAN failed entering the specific mode</para></listitem><listitem><para>CAN_ModeStatus_Success CAN Succeed entering the specific mode </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="784" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="784" bodyend="858"/>
        <references refid="group___c_a_n___mode___status_1ga9882944537945325ef08e1986838ea45" compoundref="stm32f10x__can_8h" startline="264">CAN_ModeStatus_Failed</references>
        <references refid="group___c_a_n___private___defines_1ga60a32132df242146efd3e9f7a079f0f0" compoundref="stm32f10x__can_8c" startline="58">INAK_TIMEOUT</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" compoundref="stm32f10x__can_8h" startline="52">IS_CAN_ALL_PERIPH</references>
        <references refid="group___c_a_n___operating___mode_1ga377f1598db9b0248ba83fa6e5a75db75" compoundref="stm32f10x__can_8h" startline="252">IS_CAN_OPERATING_MODE</references>
        <references refid="group___c_a_n___operating___mode_1gace8a4b5c164aba6f473d6254ad1e8a36" compoundref="stm32f10x__can_8h" startline="247">CAN_OperatingMode_Initialization</references>
        <references refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" compoundref="stm32f10x_8h" startline="705">CAN_TypeDef::MCR</references>
        <references refid="group___peripheral___registers___bits___definition_1gadf9602dfb2f95b481b6e642b95991176" compoundref="stm32f10x_8h" startline="6220">CAN_MCR_SLEEP</references>
        <references refid="group___peripheral___registers___bits___definition_1ga0cf12be5661908dbe38aa14cd4c3a356" compoundref="stm32f10x_8h" startline="6219">CAN_MCR_INRQ</references>
        <references refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" compoundref="stm32f10x_8h" startline="706">CAN_TypeDef::MSR</references>
        <references refid="group___c_a_n___private___defines_1ga79094ce5a3a2f717140e8cc9b7c161b6" compoundref="stm32f10x__can_8c" startline="82">CAN_MODE_MASK</references>
        <references refid="group___peripheral___registers___bits___definition_1ga2871cee90ebecb760bab16e9c039b682" compoundref="stm32f10x_8h" startline="6230">CAN_MSR_INAK</references>
        <references refid="group___c_a_n___mode___status_1ga7ca0ea503eb3b3a7c0abdfad27cb6579" compoundref="stm32f10x__can_8h" startline="265">CAN_ModeStatus_Success</references>
        <references refid="group___c_a_n___operating___mode_1ga663ecffaa60d1a201a035dfa45325848" compoundref="stm32f10x__can_8h" startline="248">CAN_OperatingMode_Normal</references>
        <references refid="group___c_a_n___operating___mode_1ga173b85d2baaa6249d966b8073e3ad8ca" compoundref="stm32f10x__can_8h" startline="249">CAN_OperatingMode_Sleep</references>
        <references refid="group___peripheral___registers___bits___definition_1gaf1611badb362f0fd9047af965509f074" compoundref="stm32f10x_8h" startline="6231">CAN_MSR_SLAK</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1ga640215e38765759d7eceb8a039046667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t CAN_Sleep</definition>
        <argsstring>(CAN_TypeDef *CANx)</argsstring>
        <name>CAN_Sleep</name>
        <param>
          <type><ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref> *</type>
          <declname>CANx</declname>
        </param>
        <briefdescription>
<para>Enters the low power mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CANx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to to select the CAN peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN_Sleep_Ok if sleep entered, CAN_Sleep_Failed in an other case. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="866" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="866" bodyend="884"/>
        <references refid="group___c_a_n__sleep__constants_1ga169500ab7169c4e9c7e9e4ea34b3e070" compoundref="stm32f10x__can_8h" startline="468">CAN_Sleep_Failed</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" compoundref="stm32f10x__can_8h" startline="52">IS_CAN_ALL_PERIPH</references>
        <references refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" compoundref="stm32f10x_8h" startline="705">CAN_TypeDef::MCR</references>
        <references refid="group___peripheral___registers___bits___definition_1ga0cf12be5661908dbe38aa14cd4c3a356" compoundref="stm32f10x_8h" startline="6219">CAN_MCR_INRQ</references>
        <references refid="group___peripheral___registers___bits___definition_1gadf9602dfb2f95b481b6e642b95991176" compoundref="stm32f10x_8h" startline="6220">CAN_MCR_SLEEP</references>
        <references refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" compoundref="stm32f10x_8h" startline="706">CAN_TypeDef::MSR</references>
        <references refid="group___peripheral___registers___bits___definition_1gaf1611badb362f0fd9047af965509f074" compoundref="stm32f10x_8h" startline="6231">CAN_MSR_SLAK</references>
        <references refid="group___peripheral___registers___bits___definition_1ga2871cee90ebecb760bab16e9c039b682" compoundref="stm32f10x_8h" startline="6230">CAN_MSR_INAK</references>
        <references refid="group___c_a_n__sleep__constants_1gaf5c4e9d32d4faff9d0bf61e153ed7998" compoundref="stm32f10x__can_8h" startline="469">CAN_Sleep_Ok</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1ga78cdfbf1884b9e33c552bcbca15bed10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t CAN_WakeUp</definition>
        <argsstring>(CAN_TypeDef *CANx)</argsstring>
        <name>CAN_WakeUp</name>
        <param>
          <type><ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref> *</type>
          <declname>CANx</declname>
        </param>
        <briefdescription>
<para>Wakes the CAN up. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CANx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to to select the CAN peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>CAN_WakeUp_Ok if sleep mode left, CAN_WakeUp_Failed in an other case. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="892" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="892" bodyend="915"/>
        <references refid="group___c_a_n___private___defines_1ga1bb8107706c8b4039ac55a122f3c65bb" compoundref="stm32f10x__can_8c" startline="60">SLAK_TIMEOUT</references>
        <references refid="group___c_a_n__wake__up__constants_1ga837fd7ad47fee78e43a186544e2b390b" compoundref="stm32f10x__can_8h" startline="479">CAN_WakeUp_Failed</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" compoundref="stm32f10x__can_8h" startline="52">IS_CAN_ALL_PERIPH</references>
        <references refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" compoundref="stm32f10x_8h" startline="705">CAN_TypeDef::MCR</references>
        <references refid="group___peripheral___registers___bits___definition_1gadf9602dfb2f95b481b6e642b95991176" compoundref="stm32f10x_8h" startline="6220">CAN_MCR_SLEEP</references>
        <references refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" compoundref="stm32f10x_8h" startline="706">CAN_TypeDef::MSR</references>
        <references refid="group___peripheral___registers___bits___definition_1gaf1611badb362f0fd9047af965509f074" compoundref="stm32f10x_8h" startline="6231">CAN_MSR_SLAK</references>
        <references refid="group___c_a_n__wake__up__constants_1ga152e4935cf85bdfb803eb36b656cd690" compoundref="stm32f10x__can_8h" startline="480">CAN_WakeUp_Ok</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1gaaee721a392b6b21bfd15dc160aeb6924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t CAN_GetLastErrorCode</definition>
        <argsstring>(CAN_TypeDef *CANx)</argsstring>
        <name>CAN_GetLastErrorCode</name>
        <param>
          <type><ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref> *</type>
          <declname>CANx</declname>
        </param>
        <briefdescription>
<para>Returns the CANx&apos;s last error code (LEC). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CANx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to to select the CAN peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>CAN_ErrorCode</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the Error code :<itemizedlist>
<listitem><para>CAN_ERRORCODE_NoErr No Error</para></listitem><listitem><para>CAN_ERRORCODE_StuffErr Stuff Error</para></listitem><listitem><para>CAN_ERRORCODE_FormErr Form Error</para></listitem><listitem><para>CAN_ERRORCODE_ACKErr Acknowledgment Error</para></listitem><listitem><para>CAN_ERRORCODE_BitRecessiveErr Bit Recessive Error</para></listitem><listitem><para>CAN_ERRORCODE_BitDominantErr Bit Dominant Error</para></listitem><listitem><para>CAN_ERRORCODE_CRCErr CRC Error</para></listitem><listitem><para>CAN_ERRORCODE_SoftwareSetErr Software Set Error </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="932" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="932" bodyend="944"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" compoundref="stm32f10x__can_8h" startline="52">IS_CAN_ALL_PERIPH</references>
        <references refid="struct_c_a_n___type_def_1ab1a1b6a7c587443a03d654d3b9a94423" compoundref="stm32f10x_8h" startline="711">CAN_TypeDef::ESR</references>
        <references refid="group___peripheral___registers___bits___definition_1gab9f86741dd89034900e300499ae2272e" compoundref="stm32f10x_8h" startline="6301">CAN_ESR_LEC</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1ga6903eecbec40eb1361d915ddde9a3274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t CAN_GetReceiveErrorCounter</definition>
        <argsstring>(CAN_TypeDef *CANx)</argsstring>
        <name>CAN_GetReceiveErrorCounter</name>
        <param>
          <type><ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref> *</type>
          <declname>CANx</declname>
        </param>
        <briefdescription>
<para>Returns the CANx Receive Error Counter (REC). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>In case of an error during reception, this counter is incremented by 1 or by 8 depending on the error condition as defined by the CAN standard. After every successful reception, the counter is decremented by 1 or reset to 120 if its value was higher than 128. When the counter value exceeds 127, the CAN controller enters the error passive state. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CANx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to to select the CAN peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>CAN</parametername>
</parameternamelist>
<parameterdescription>
<para>Receive Error Counter. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="956" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="956" bodyend="968"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" compoundref="stm32f10x__can_8h" startline="52">IS_CAN_ALL_PERIPH</references>
        <references refid="struct_c_a_n___type_def_1ab1a1b6a7c587443a03d654d3b9a94423" compoundref="stm32f10x_8h" startline="711">CAN_TypeDef::ESR</references>
        <references refid="group___peripheral___registers___bits___definition_1ga0df5b2ea3f419182e9bd885f55ee5dc9" compoundref="stm32f10x_8h" startline="6307">CAN_ESR_REC</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1ga85ee0c35bf7ca15d4e4c862eef534843" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t CAN_GetLSBTransmitErrorCounter</definition>
        <argsstring>(CAN_TypeDef *CANx)</argsstring>
        <name>CAN_GetLSBTransmitErrorCounter</name>
        <param>
          <type><ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref> *</type>
          <declname>CANx</declname>
        </param>
        <briefdescription>
<para>Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CANx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to to select the CAN peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>LSB</parametername>
</parameternamelist>
<parameterdescription>
<para>of the 9-bit CAN Transmit Error Counter. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="976" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="976" bodyend="988"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" compoundref="stm32f10x__can_8h" startline="52">IS_CAN_ALL_PERIPH</references>
        <references refid="struct_c_a_n___type_def_1ab1a1b6a7c587443a03d654d3b9a94423" compoundref="stm32f10x_8h" startline="711">CAN_TypeDef::ESR</references>
        <references refid="group___peripheral___registers___bits___definition_1gae3de2080f48cc851c20d920acfd1737d" compoundref="stm32f10x_8h" startline="6306">CAN_ESR_TEC</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1gad1a8b2499a780b5bfa4accb3597b02f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN_ITConfig</definition>
        <argsstring>(CAN_TypeDef *CANx, uint32_t CAN_IT, FunctionalState NewState)</argsstring>
        <name>CAN_ITConfig</name>
        <param>
          <type><ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref> *</type>
          <declname>CANx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>CAN_IT</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified CANx interrupts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CANx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to to select the CAN peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CAN_IT</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the CAN interrupt sources to be enabled or disabled. This parameter can be:<itemizedlist>
<listitem><para>CAN_IT_TME,</para></listitem><listitem><para>CAN_IT_FMP0,</para></listitem><listitem><para>CAN_IT_FF0,</para></listitem><listitem><para>CAN_IT_FOV0,</para></listitem><listitem><para>CAN_IT_FMP1,</para></listitem><listitem><para>CAN_IT_FF1,</para></listitem><listitem><para>CAN_IT_FOV1,</para></listitem><listitem><para>CAN_IT_EWG,</para></listitem><listitem><para>CAN_IT_EPV,</para></listitem><listitem><para>CAN_IT_LEC,</para></listitem><listitem><para>CAN_IT_ERR,</para></listitem><listitem><para>CAN_IT_WKU or</para></listitem><listitem><para>CAN_IT_SLK. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the CAN interrupts. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="1013" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="1013" bodyend="1030"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" compoundref="stm32f10x__can_8h" startline="52">IS_CAN_ALL_PERIPH</references>
        <references refid="group___c_a_n__interrupts_1gac0a9467bb0028c5fcd15a8a0ec6aaecb" compoundref="stm32f10x__can_8h" startline="589">IS_CAN_IT</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_c_a_n___type_def_1a530babbc4b9584c93a1bf87d6ce8b8dc" compoundref="stm32f10x_8h" startline="710">CAN_TypeDef::IER</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1ga2faad96caf823ef463cc5b5b25c480bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref></type>
        <definition>FlagStatus CAN_GetFlagStatus</definition>
        <argsstring>(CAN_TypeDef *CANx, uint32_t CAN_FLAG)</argsstring>
        <name>CAN_GetFlagStatus</name>
        <param>
          <type><ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref> *</type>
          <declname>CANx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>CAN_FLAG</declname>
        </param>
        <briefdescription>
<para>Checks whether the specified CAN flag is set or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CANx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to to select the CAN peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CAN_FLAG</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the flag to check. This parameter can be one of the following flags:<itemizedlist>
<listitem><para>CAN_FLAG_EWG</para></listitem><listitem><para>CAN_FLAG_EPV</para></listitem><listitem><para>CAN_FLAG_BOF</para></listitem><listitem><para>CAN_FLAG_RQCP0</para></listitem><listitem><para>CAN_FLAG_RQCP1</para></listitem><listitem><para>CAN_FLAG_RQCP2</para></listitem><listitem><para>CAN_FLAG_FMP1</para></listitem><listitem><para>CAN_FLAG_FF1</para></listitem><listitem><para>CAN_FLAG_FOV1</para></listitem><listitem><para>CAN_FLAG_FMP0</para></listitem><listitem><para>CAN_FLAG_FF0</para></listitem><listitem><para>CAN_FLAG_FOV0</para></listitem><listitem><para>CAN_FLAG_WKU</para></listitem><listitem><para>CAN_FLAG_SLAK</para></listitem><listitem><para>CAN_FLAG_LEC </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of CAN_FLAG (SET or RESET). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="1053" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="1053" bodyend="1134"/>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" compoundref="stm32f10x__can_8h" startline="52">IS_CAN_ALL_PERIPH</references>
        <references refid="group___c_a_n__flags_1ga38d33d1762ed3a331d214cdb3249866e" compoundref="stm32f10x__can_8h" startline="537">IS_CAN_GET_FLAG</references>
        <references refid="group___c_a_n___private___defines_1ga14f7bb0b320da21443c9bd60b1f86b5d" compoundref="stm32f10x__can_8c" startline="73">CAN_FLAGS_ESR</references>
        <references refid="struct_c_a_n___type_def_1ab1a1b6a7c587443a03d654d3b9a94423" compoundref="stm32f10x_8h" startline="711">CAN_TypeDef::ESR</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" compoundref="stm32f10x_8h" startline="519">SET</references>
        <references refid="group___c_a_n___private___defines_1ga3aaa7df395ce1a90cb6e2ff3d2c4b24e" compoundref="stm32f10x__can_8c" startline="71">CAN_FLAGS_MSR</references>
        <references refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" compoundref="stm32f10x_8h" startline="706">CAN_TypeDef::MSR</references>
        <references refid="group___c_a_n___private___defines_1gac67e7d905ba11441bf9e14180805cf3a" compoundref="stm32f10x__can_8c" startline="65">CAN_FLAGS_TSR</references>
        <references refid="struct_c_a_n___type_def_1acbc82ac4e87e75350fc586be5e56d95b" compoundref="stm32f10x_8h" startline="707">CAN_TypeDef::TSR</references>
        <references refid="group___c_a_n___private___defines_1ga4b22b2552759778ac07825240823a45f" compoundref="stm32f10x__can_8c" startline="69">CAN_FLAGS_RF0R</references>
        <references refid="struct_c_a_n___type_def_1ad8e858479e26ab075ee2ddb630e8769d" compoundref="stm32f10x_8h" startline="708">CAN_TypeDef::RF0R</references>
        <references refid="struct_c_a_n___type_def_1a69a528d1288c1de666df68655af1d20e" compoundref="stm32f10x_8h" startline="709">CAN_TypeDef::RF1R</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1ga2c01646d5d3a2d7045e8dd71f58f8742" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN_ClearFlag</definition>
        <argsstring>(CAN_TypeDef *CANx, uint32_t CAN_FLAG)</argsstring>
        <name>CAN_ClearFlag</name>
        <param>
          <type><ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref> *</type>
          <declname>CANx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>CAN_FLAG</declname>
        </param>
        <briefdescription>
<para>Clears the CAN&apos;s pending flags. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CANx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to to select the CAN peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CAN_FLAG</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the flag to clear. This parameter can be one of the following flags:<itemizedlist>
<listitem><para>CAN_FLAG_RQCP0</para></listitem><listitem><para>CAN_FLAG_RQCP1</para></listitem><listitem><para>CAN_FLAG_RQCP2</para></listitem><listitem><para>CAN_FLAG_FF1</para></listitem><listitem><para>CAN_FLAG_FOV1</para></listitem><listitem><para>CAN_FLAG_FF0</para></listitem><listitem><para>CAN_FLAG_FOV0</para></listitem><listitem><para>CAN_FLAG_WKU</para></listitem><listitem><para>CAN_FLAG_SLAK</para></listitem><listitem><para>CAN_FLAG_LEC </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="1153" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="1153" bodyend="1190"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" compoundref="stm32f10x__can_8h" startline="52">IS_CAN_ALL_PERIPH</references>
        <references refid="group___c_a_n__flags_1gac46f5fb953efb6163cf3b2e33a514d0c" compoundref="stm32f10x__can_8h" startline="546">IS_CAN_CLEAR_FLAG</references>
        <references refid="group___c_a_n__flags_1ga73a774fa4d391aec0ea6552bf9372917" compoundref="stm32f10x__can_8h" startline="535">CAN_FLAG_LEC</references>
        <references refid="struct_c_a_n___type_def_1ab1a1b6a7c587443a03d654d3b9a94423" compoundref="stm32f10x_8h" startline="711">CAN_TypeDef::ESR</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
        <references refid="group___c_a_n___private___defines_1ga4b22b2552759778ac07825240823a45f" compoundref="stm32f10x__can_8c" startline="69">CAN_FLAGS_RF0R</references>
        <references refid="struct_c_a_n___type_def_1ad8e858479e26ab075ee2ddb630e8769d" compoundref="stm32f10x_8h" startline="708">CAN_TypeDef::RF0R</references>
        <references refid="group___c_a_n___private___defines_1ga2a03d73273ab353c8deb3a4730431977" compoundref="stm32f10x__can_8c" startline="67">CAN_FLAGS_RF1R</references>
        <references refid="struct_c_a_n___type_def_1a69a528d1288c1de666df68655af1d20e" compoundref="stm32f10x_8h" startline="709">CAN_TypeDef::RF1R</references>
        <references refid="group___c_a_n___private___defines_1gac67e7d905ba11441bf9e14180805cf3a" compoundref="stm32f10x__can_8c" startline="65">CAN_FLAGS_TSR</references>
        <references refid="struct_c_a_n___type_def_1acbc82ac4e87e75350fc586be5e56d95b" compoundref="stm32f10x_8h" startline="707">CAN_TypeDef::TSR</references>
        <references refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" compoundref="stm32f10x_8h" startline="706">CAN_TypeDef::MSR</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1ga9aca05b3013e1b3438f3559f80b33c82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref></type>
        <definition>ITStatus CAN_GetITStatus</definition>
        <argsstring>(CAN_TypeDef *CANx, uint32_t CAN_IT)</argsstring>
        <name>CAN_GetITStatus</name>
        <param>
          <type><ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref> *</type>
          <declname>CANx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>CAN_IT</declname>
        </param>
        <briefdescription>
<para>Checks whether the specified CANx interrupt has occurred or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CANx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to to select the CAN peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CAN_IT</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the CAN interrupt source to check. This parameter can be one of the following flags:<itemizedlist>
<listitem><para>CAN_IT_TME</para></listitem><listitem><para>CAN_IT_FMP0</para></listitem><listitem><para>CAN_IT_FF0</para></listitem><listitem><para>CAN_IT_FOV0</para></listitem><listitem><para>CAN_IT_FMP1</para></listitem><listitem><para>CAN_IT_FF1</para></listitem><listitem><para>CAN_IT_FOV1</para></listitem><listitem><para>CAN_IT_WKU</para></listitem><listitem><para>CAN_IT_SLK</para></listitem><listitem><para>CAN_IT_EWG</para></listitem><listitem><para>CAN_IT_EPV</para></listitem><listitem><para>CAN_IT_BOF</para></listitem><listitem><para>CAN_IT_LEC</para></listitem><listitem><para>CAN_IT_ERR </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>current state of CAN_IT (SET or RESET). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="1213" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="1213" bodyend="1296"/>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" compoundref="stm32f10x__can_8h" startline="52">IS_CAN_ALL_PERIPH</references>
        <references refid="group___c_a_n__interrupts_1gac0a9467bb0028c5fcd15a8a0ec6aaecb" compoundref="stm32f10x__can_8h" startline="589">IS_CAN_IT</references>
        <references refid="struct_c_a_n___type_def_1a530babbc4b9584c93a1bf87d6ce8b8dc" compoundref="stm32f10x_8h" startline="710">CAN_TypeDef::IER</references>
        <references refid="group___c_a_n__interrupts_1ga619e36230fa2eb089a7c1936b5004eb9" compoundref="stm32f10x__can_8h" startline="562">CAN_IT_TME</references>
      </memberdef>
      <memberdef kind="function" id="group___c_a_n___private___functions_1ga30bf7ac0c1793f6622a4a1adbb7dbc8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CAN_ClearITPendingBit</definition>
        <argsstring>(CAN_TypeDef *CANx, uint32_t CAN_IT)</argsstring>
        <name>CAN_ClearITPendingBit</name>
        <param>
          <type><ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref> *</type>
          <declname>CANx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>CAN_IT</declname>
        </param>
        <briefdescription>
<para>Clears the CANx&apos;s interrupt pending bits. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CANx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to to select the CAN peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>CAN_IT</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the interrupt pending bit to clear.<itemizedlist>
<listitem><para>CAN_IT_TME</para></listitem><listitem><para>CAN_IT_FF0</para></listitem><listitem><para>CAN_IT_FOV0</para></listitem><listitem><para>CAN_IT_FF1</para></listitem><listitem><para>CAN_IT_FOV1</para></listitem><listitem><para>CAN_IT_WKU</para></listitem><listitem><para>CAN_IT_SLK</para></listitem><listitem><para>CAN_IT_EWG</para></listitem><listitem><para>CAN_IT_EPV</para></listitem><listitem><para>CAN_IT_BOF</para></listitem><listitem><para>CAN_IT_LEC</para></listitem><listitem><para>CAN_IT_ERR </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" line="1316" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c" bodystart="1316" bodyend="1387"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" compoundref="stm32f10x__can_8h" startline="52">IS_CAN_ALL_PERIPH</references>
        <references refid="group___c_a_n__interrupts_1ga8b6e5fd6ddfe0141925f1e22cfbe7b85" compoundref="stm32f10x__can_8h" startline="597">IS_CAN_CLEAR_IT</references>
        <references refid="group___c_a_n__interrupts_1ga619e36230fa2eb089a7c1936b5004eb9" compoundref="stm32f10x__can_8h" startline="562">CAN_IT_TME</references>
        <references refid="struct_c_a_n___type_def_1acbc82ac4e87e75350fc586be5e56d95b" compoundref="stm32f10x_8h" startline="707">CAN_TypeDef::TSR</references>
        <references refid="group___peripheral___registers___bits___definition_1ga4a4809b8908618df57e6393cc7fe0f52" compoundref="stm32f10x_8h" startline="6241">CAN_TSR_RQCP0</references>
        <references refid="group___peripheral___registers___bits___definition_1gabd3118dec59c3a45d2f262b090699538" compoundref="stm32f10x_8h" startline="6246">CAN_TSR_RQCP1</references>
        <references refid="group___peripheral___registers___bits___definition_1ga3cf9e83cec96164f1dadf4e43411ebf0" compoundref="stm32f10x_8h" startline="6251">CAN_TSR_RQCP2</references>
        <references refid="group___c_a_n__interrupts_1gabf63043d9216de80ddc7ffe57b23ef67" compoundref="stm32f10x__can_8h" startline="566">CAN_IT_FF0</references>
        <references refid="struct_c_a_n___type_def_1ad8e858479e26ab075ee2ddb630e8769d" compoundref="stm32f10x_8h" startline="708">CAN_TypeDef::RF0R</references>
        <references refid="group___peripheral___registers___bits___definition_1gae934674f6e22a758e430f32cfc386d70" compoundref="stm32f10x_8h" startline="6270">CAN_RF0R_FULL0</references>
        <references refid="group___c_a_n__interrupts_1ga066a4317f95669e5b5931c9a759cf248" compoundref="stm32f10x__can_8h" startline="567">CAN_IT_FOV0</references>
        <references refid="group___peripheral___registers___bits___definition_1ga2a3d15b3abab8199c16e26a3dffdc8b8" compoundref="stm32f10x_8h" startline="6271">CAN_RF0R_FOVR0</references>
        <references refid="group___c_a_n__interrupts_1ga93b86d884ce0624b4b36c991fd75fc1c" compoundref="stm32f10x__can_8h" startline="569">CAN_IT_FF1</references>
        <references refid="struct_c_a_n___type_def_1a69a528d1288c1de666df68655af1d20e" compoundref="stm32f10x_8h" startline="709">CAN_TypeDef::RF1R</references>
        <references refid="group___peripheral___registers___bits___definition_1gabdaa12fe4d14254cc4a6a4de749a7d0a" compoundref="stm32f10x_8h" startline="6276">CAN_RF1R_FULL1</references>
        <references refid="group___c_a_n__interrupts_1ga963301fdbede5f9a9665dc5b6210eaec" compoundref="stm32f10x__can_8h" startline="570">CAN_IT_FOV1</references>
        <references refid="group___peripheral___registers___bits___definition_1gab5eeaabd4db3825bc53d860aca8d7590" compoundref="stm32f10x_8h" startline="6277">CAN_RF1R_FOVR1</references>
        <references refid="group___c_a_n__interrupts_1gac9c8767770d94de753dda9ad31f9af15" compoundref="stm32f10x__can_8h" startline="573">CAN_IT_WKU</references>
        <references refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" compoundref="stm32f10x_8h" startline="706">CAN_TypeDef::MSR</references>
        <references refid="group___peripheral___registers___bits___definition_1ga0f4c753b96d21c5001b39ad5b08519fc" compoundref="stm32f10x_8h" startline="6233">CAN_MSR_WKUI</references>
        <references refid="group___c_a_n__interrupts_1ga639d4ab2777d9a2f8b7e67071b091059" compoundref="stm32f10x__can_8h" startline="574">CAN_IT_SLK</references>
        <references refid="group___peripheral___registers___bits___definition_1ga47ab62ae123c791de27ad05dde5bee91" compoundref="stm32f10x_8h" startline="6234">CAN_MSR_SLAKI</references>
        <references refid="group___c_a_n__interrupts_1ga8a9f04ddf6ebe169d32b951a8ea135b3" compoundref="stm32f10x__can_8h" startline="577">CAN_IT_EWG</references>
        <references refid="group___peripheral___registers___bits___definition_1ga9c424768e9e963402f37cb95ae87a1ae" compoundref="stm32f10x_8h" startline="6232">CAN_MSR_ERRI</references>
        <references refid="group___c_a_n__interrupts_1ga006b7b641d337a599ceac64b483e75dd" compoundref="stm32f10x__can_8h" startline="578">CAN_IT_EPV</references>
        <references refid="group___c_a_n__interrupts_1gad63c39e6237aa07681a1f8ce2ff9e167" compoundref="stm32f10x__can_8h" startline="579">CAN_IT_BOF</references>
        <references refid="group___c_a_n__interrupts_1gad670b6f001bf67f24e17d91ada50a61c" compoundref="stm32f10x__can_8h" startline="580">CAN_IT_LEC</references>
        <references refid="struct_c_a_n___type_def_1ab1a1b6a7c587443a03d654d3b9a94423" compoundref="stm32f10x_8h" startline="711">CAN_TypeDef::ESR</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
        <references refid="group___c_a_n__interrupts_1ga65f1781c9165a2e9b5f77f1ed3990741" compoundref="stm32f10x__can_8h" startline="581">CAN_IT_ERR</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file provides all the CAN firmware functions. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>MCD Application Team </para></simplesect>
<simplesect kind="version"><para>V3.5.0 </para></simplesect>
<simplesect kind="date"><para>11-March-2011 </para></simplesect>
<simplesect kind="attention"><para></para></simplesect>
THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.</para><para><heading level="2"><center><copy/> COPYRIGHT 2011 STMicroelectronics</center></heading>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="22"><highlight class="comment">/*<sp/>Includes<sp/>------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stm32f10x__can_8h" kindref="compound">stm32f10x_can.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stm32f10x__rcc_8h" kindref="compound">stm32f10x_rcc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="comment">/*<sp/>CAN<sp/>Master<sp/>Control<sp/>Register<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="group___c_a_n___private___defines_1ga1ded3736beb63c49281f2983fc68c36d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MCR_DBF<sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00010000)<sp/></highlight><highlight class="comment">/*<sp/>software<sp/>master<sp/>reset<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CAN<sp/>Mailbox<sp/>Transmit<sp/>Request<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="group___c_a_n___private___defines_1gabeb6db5ba5c01da5084ec1605f868e18" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TMIDxR_TXRQ<sp/><sp/>((uint32_t)0x00000001)<sp/></highlight><highlight class="comment">/*<sp/>Transmit<sp/>mailbox<sp/>request<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CAN<sp/>Filter<sp/>Master<sp/>Register<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="group___c_a_n___private___defines_1ga6125d0273c466e402db1a8f5bf888857" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FMR_FINIT<sp/><sp/><sp/><sp/>((uint32_t)0x00000001)<sp/></highlight><highlight class="comment">/*<sp/>Filter<sp/>init<sp/>mode<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Time<sp/>out<sp/>for<sp/>INAK<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="group___c_a_n___private___defines_1ga60a32132df242146efd3e9f7a079f0f0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INAK_TIMEOUT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x0000FFFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Time<sp/>out<sp/>for<sp/>SLAK<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="group___c_a_n___private___defines_1ga1bb8107706c8b4039ac55a122f3c65bb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SLAK_TIMEOUT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x0000FFFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Flags<sp/>in<sp/>TSR<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="group___c_a_n___private___defines_1gac67e7d905ba11441bf9e14180805cf3a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_FLAGS_TSR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x08000000)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Flags<sp/>in<sp/>RF1R<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="group___c_a_n___private___defines_1ga2a03d73273ab353c8deb3a4730431977" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_FLAGS_RF1R<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x04000000)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Flags<sp/>in<sp/>RF0R<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="group___c_a_n___private___defines_1ga4b22b2552759778ac07825240823a45f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_FLAGS_RF0R<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x02000000)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Flags<sp/>in<sp/>MSR<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="group___c_a_n___private___defines_1ga3aaa7df395ce1a90cb6e2ff3d2c4b24e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_FLAGS_MSR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x01000000)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Flags<sp/>in<sp/>ESR<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="group___c_a_n___private___defines_1ga14f7bb0b320da21443c9bd60b1f86b5d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_FLAGS_ESR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00F00000)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Mailboxes<sp/>definition<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="group___c_a_n___private___defines_1gaa62f09d0693681cb7576f61c93b7cf0f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_TXMAILBOX_0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint8_t)0x00)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="group___c_a_n___private___defines_1ga4e20f0aac1ac940014a6c66971890943" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_TXMAILBOX_1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint8_t)0x01)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="group___c_a_n___private___defines_1ga8a842aa352d72321930cc963b26bf6d7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_TXMAILBOX_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint8_t)0x02)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="group___c_a_n___private___defines_1ga79094ce5a3a2f717140e8cc9b7c161b6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CAN_MODE_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)<sp/>0x00000003)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref><sp/>CheckITStatus(uint32_t<sp/>CAN_Reg,<sp/>uint32_t<sp/>It_Bit);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="group___c_a_n___private___functions_1ga002b74cd69574a14b17ad445090245cd" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n___private___functions_1ga002b74cd69574a14b17ad445090245cd" kindref="member">CAN_DeInit</ref>(<ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref>*<sp/>CANx)</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" kindref="member">IS_CAN_ALL_PERIPH</ref>(CANx));</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CANx<sp/>==<sp/><ref refid="group___peripheral__declaration_1ga4964ecb6a5c689aaf8ee2832b8093aac" kindref="member">CAN1</ref>)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>CAN1<sp/>reset<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_c_c___exported___functions_1gab197ae4369c10b92640a733b40ed2801" kindref="member">RCC_APB1PeriphResetCmd</ref>(<ref refid="group___a_p_b1__peripheral_1ga7f1d940739de0134ae89e9e04214989d" kindref="member">RCC_APB1Periph_CAN1</ref>,<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" kindref="member">ENABLE</ref>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>CAN1<sp/>from<sp/>reset<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_c_c___exported___functions_1gab197ae4369c10b92640a733b40ed2801" kindref="member">RCC_APB1PeriphResetCmd</ref>(<ref refid="group___a_p_b1__peripheral_1ga7f1d940739de0134ae89e9e04214989d" kindref="member">RCC_APB1Periph_CAN1</ref>,<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>{<sp/><sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>CAN2<sp/>reset<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_c_c___exported___functions_1gab197ae4369c10b92640a733b40ed2801" kindref="member">RCC_APB1PeriphResetCmd</ref>(<ref refid="group___a_p_b1__peripheral_1ga62801597b97816751c038acb1466179c" kindref="member">RCC_APB1Periph_CAN2</ref>,<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" kindref="member">ENABLE</ref>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>CAN2<sp/>from<sp/>reset<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_c_c___exported___functions_1gab197ae4369c10b92640a733b40ed2801" kindref="member">RCC_APB1PeriphResetCmd</ref>(<ref refid="group___a_p_b1__peripheral_1ga62801597b97816751c038acb1466179c" kindref="member">RCC_APB1Periph_CAN2</ref>,<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="group___c_a_n___private___functions_1ga9023c35a9ab931ad4513fc5d19b4bd6c" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="group___c_a_n___private___functions_1ga9023c35a9ab931ad4513fc5d19b4bd6c" kindref="member">CAN_Init</ref>(<ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref>*<sp/>CANx,<sp/><ref refid="struct_c_a_n___init_type_def" kindref="compound">CAN_InitTypeDef</ref>*<sp/>CAN_InitStruct)</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>uint8_t<sp/>InitStatus<sp/>=<sp/><ref refid="group___c_a_n__sleep__constants_1ga095c319e8c54c974eb2b6eeadf180d96" kindref="member">CAN_InitStatus_Failed</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>uint32_t<sp/>wait_ack<sp/>=<sp/>0x00000000;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" kindref="member">IS_CAN_ALL_PERIPH</ref>(CANx));</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1aa53ceafdcf1a9a5c9a6566006c9a4b60" kindref="member">CAN_TTCM</ref>));</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1a70560646c27d96ca8adc4a62d24dafd9" kindref="member">CAN_ABOM</ref>));</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1a10f873c858a7b0efc2d0ab41524320d3" kindref="member">CAN_AWUM</ref>));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1a5adeac1b7b47f2b91e667eddc181ac09" kindref="member">CAN_NART</ref>));</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1aa63787683c0ad533b513fb60355d76f1" kindref="member">CAN_RFLM</ref>));</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1a003de4b70fc93b4f820f320c6ea75a16" kindref="member">CAN_TXFP</ref>));</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___mode_1ga5d6480c240edeba383b4e07d65814d98" kindref="member">IS_CAN_MODE</ref>(CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1a24816ff18ae048a5ec4bbb22aa2c04f9" kindref="member">CAN_Mode</ref>));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n__synchronisation__jump__width_1ga4e4f344712d3bcac1975318d4ab9a383" kindref="member">IS_CAN_SJW</ref>(CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1addac271c43490cb37ac7293f7bf201c2" kindref="member">CAN_SJW</ref>));</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n__time__quantum__in__bit__segment__1_1ga225f1457e1c6b8fc3b5af0f463933152" kindref="member">IS_CAN_BS1</ref>(CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1aecbd21b55dc88c3a18db93af2836cd58" kindref="member">CAN_BS1</ref>));</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n__time__quantum__in__bit__segment__2_1ga3f5620b1d094dbd7d2fb8d16f4b187a9" kindref="member">IS_CAN_BS2</ref>(CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1a693eb00830d6e2aeb4d9fabdba85b9cf" kindref="member">CAN_BS2</ref>));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n__clock__prescaler_1gacde6b8be6fe083a6302fc183b5ac1055" kindref="member">IS_CAN_PRESCALER</ref>(CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1a3e91dbcbf30b893a9bd6a65606cb8fe9" kindref="member">CAN_Prescaler</ref>));</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Exit<sp/>from<sp/>sleep<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>&amp;=<sp/>(~(uint32_t)<ref refid="group___peripheral___registers___bits___definition_1gadf9602dfb2f95b481b6e642b95991176" kindref="member">CAN_MCR_SLEEP</ref>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Request<sp/>initialisation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>|=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga0cf12be5661908dbe38aa14cd4c3a356" kindref="member">CAN_MCR_INRQ</ref><sp/>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>the<sp/>acknowledge<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(((CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref><sp/>&amp;<sp/><ref refid="group___peripheral___registers___bits___definition_1ga2871cee90ebecb760bab16e9c039b682" kindref="member">CAN_MSR_INAK</ref>)<sp/>!=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga2871cee90ebecb760bab16e9c039b682" kindref="member">CAN_MSR_INAK</ref>)<sp/>&amp;&amp;<sp/>(wait_ack<sp/>!=<sp/><ref refid="group___c_a_n___private___defines_1ga60a32132df242146efd3e9f7a079f0f0" kindref="member">INAK_TIMEOUT</ref>))</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>wait_ack++;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>acknowledge<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref><sp/>&amp;<sp/><ref refid="group___peripheral___registers___bits___definition_1ga2871cee90ebecb760bab16e9c039b682" kindref="member">CAN_MSR_INAK</ref>)<sp/>!=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga2871cee90ebecb760bab16e9c039b682" kindref="member">CAN_MSR_INAK</ref>)</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>InitStatus<sp/>=<sp/><ref refid="group___c_a_n__sleep__constants_1ga095c319e8c54c974eb2b6eeadf180d96" kindref="member">CAN_InitStatus_Failed</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>time<sp/>triggered<sp/>communication<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1aa53ceafdcf1a9a5c9a6566006c9a4b60" kindref="member">CAN_TTCM</ref><sp/>==<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" kindref="member">ENABLE</ref>)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>|=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga32b2eda9cad8a969c5d2349bd1d853bb" kindref="member">CAN_MCR_TTCM</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>&amp;=<sp/>~(uint32_t)<ref refid="group___peripheral___registers___bits___definition_1ga32b2eda9cad8a969c5d2349bd1d853bb" kindref="member">CAN_MCR_TTCM</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>automatic<sp/>bus-off<sp/>management<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1a70560646c27d96ca8adc4a62d24dafd9" kindref="member">CAN_ABOM</ref><sp/>==<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" kindref="member">ENABLE</ref>)</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>|=<sp/><ref refid="group___peripheral___registers___bits___definition_1gad7aff5c0a3ead7f937849ab66eba7490" kindref="member">CAN_MCR_ABOM</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>&amp;=<sp/>~(uint32_t)<ref refid="group___peripheral___registers___bits___definition_1gad7aff5c0a3ead7f937849ab66eba7490" kindref="member">CAN_MCR_ABOM</ref>;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>automatic<sp/>wake-up<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1a10f873c858a7b0efc2d0ab41524320d3" kindref="member">CAN_AWUM</ref><sp/>==<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" kindref="member">ENABLE</ref>)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>|=<sp/><ref refid="group___peripheral___registers___bits___definition_1gaa2745f1a565c3f2ec5b16612d1fd66e0" kindref="member">CAN_MCR_AWUM</ref>;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>&amp;=<sp/>~(uint32_t)<ref refid="group___peripheral___registers___bits___definition_1gaa2745f1a565c3f2ec5b16612d1fd66e0" kindref="member">CAN_MCR_AWUM</ref>;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>no<sp/>automatic<sp/>retransmission<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1a5adeac1b7b47f2b91e667eddc181ac09" kindref="member">CAN_NART</ref><sp/>==<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" kindref="member">ENABLE</ref>)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>|=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga2774f04e286942d36a5b6135c8028049" kindref="member">CAN_MCR_NART</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>&amp;=<sp/>~(uint32_t)<ref refid="group___peripheral___registers___bits___definition_1ga2774f04e286942d36a5b6135c8028049" kindref="member">CAN_MCR_NART</ref>;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>receive<sp/>FIFO<sp/>locked<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1aa63787683c0ad533b513fb60355d76f1" kindref="member">CAN_RFLM</ref><sp/>==<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" kindref="member">ENABLE</ref>)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>|=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga501125ff257a7d02c35a0d6dcbaa2ba8" kindref="member">CAN_MCR_RFLM</ref>;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>&amp;=<sp/>~(uint32_t)<ref refid="group___peripheral___registers___bits___definition_1ga501125ff257a7d02c35a0d6dcbaa2ba8" kindref="member">CAN_MCR_RFLM</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>transmit<sp/>FIFO<sp/>priority<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1a003de4b70fc93b4f820f320c6ea75a16" kindref="member">CAN_TXFP</ref><sp/>==<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" kindref="member">ENABLE</ref>)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>|=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga35e7e66f9cd8cb6efa6a80367d2294a9" kindref="member">CAN_MCR_TXFP</ref>;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>&amp;=<sp/>~(uint32_t)<ref refid="group___peripheral___registers___bits___definition_1ga35e7e66f9cd8cb6efa6a80367d2294a9" kindref="member">CAN_MCR_TXFP</ref>;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>bit<sp/>timing<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1accad1e4155459a13369f5ad0e7c6da29" kindref="member">BTR</ref><sp/>=<sp/>(uint32_t)((uint32_t)CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1a24816ff18ae048a5ec4bbb22aa2c04f9" kindref="member">CAN_Mode</ref><sp/>&lt;&lt;<sp/>30)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1addac271c43490cb37ac7293f7bf201c2" kindref="member">CAN_SJW</ref><sp/>&lt;&lt;<sp/>24)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1aecbd21b55dc88c3a18db93af2836cd58" kindref="member">CAN_BS1</ref><sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1a693eb00830d6e2aeb4d9fabdba85b9cf" kindref="member">CAN_BS2</ref><sp/>&lt;&lt;<sp/>20)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1a3e91dbcbf30b893a9bd6a65606cb8fe9" kindref="member">CAN_Prescaler</ref><sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Request<sp/>leave<sp/>initialisation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>&amp;=<sp/>~(uint32_t)<ref refid="group___peripheral___registers___bits___definition_1ga0cf12be5661908dbe38aa14cd4c3a356" kindref="member">CAN_MCR_INRQ</ref>;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>the<sp/>acknowledge<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/>wait_ack<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(((CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref><sp/>&amp;<sp/><ref refid="group___peripheral___registers___bits___definition_1ga2871cee90ebecb760bab16e9c039b682" kindref="member">CAN_MSR_INAK</ref>)<sp/>==<sp/><ref refid="group___peripheral___registers___bits___definition_1ga2871cee90ebecb760bab16e9c039b682" kindref="member">CAN_MSR_INAK</ref>)<sp/>&amp;&amp;<sp/>(wait_ack<sp/>!=<sp/><ref refid="group___c_a_n___private___defines_1ga60a32132df242146efd3e9f7a079f0f0" kindref="member">INAK_TIMEOUT</ref>))</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>wait_ack++;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>...and<sp/>check<sp/>acknowledged<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref><sp/>&amp;<sp/><ref refid="group___peripheral___registers___bits___definition_1ga2871cee90ebecb760bab16e9c039b682" kindref="member">CAN_MSR_INAK</ref>)<sp/>==<sp/><ref refid="group___peripheral___registers___bits___definition_1ga2871cee90ebecb760bab16e9c039b682" kindref="member">CAN_MSR_INAK</ref>)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InitStatus<sp/>=<sp/><ref refid="group___c_a_n__sleep__constants_1ga095c319e8c54c974eb2b6eeadf180d96" kindref="member">CAN_InitStatus_Failed</ref>;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>InitStatus<sp/>=<sp/><ref refid="group___c_a_n__sleep__constants_1ga6bed5957af8f2f6b00568e15ccac5772" kindref="member">CAN_InitStatus_Success</ref><sp/>;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>At<sp/>this<sp/>step,<sp/>return<sp/>the<sp/>status<sp/>of<sp/>initialization<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>InitStatus;</highlight></codeline>
<codeline lineno="282"><highlight class="normal">}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="group___c_a_n___private___functions_1ga39476830280340363c51041be6b12647" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n___private___functions_1ga39476830280340363c51041be6b12647" kindref="member">CAN_FilterInit</ref>(<ref refid="struct_c_a_n___filter_init_type_def" kindref="compound">CAN_FilterInitTypeDef</ref>*<sp/>CAN_FilterInitStruct)</highlight></codeline>
<codeline lineno="293"><highlight class="normal">{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>uint32_t<sp/>filter_number_bit_pos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n__filter__number_1ga28d6c98a160d71059ed9a5973de2a4ef" kindref="member">IS_CAN_FILTER_NUMBER</ref>(CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1af94466e1138c2b4fe6a67cf556981193" kindref="member">CAN_FilterNumber</ref>));</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n__filter__mode_1gae684565d5392c12fd333379e5ec840f8" kindref="member">IS_CAN_FILTER_MODE</ref>(CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1a7cfb23c48aad13a058c2619dbc062d8a" kindref="member">CAN_FilterMode</ref>));</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n__filter__scale_1gaf64c93166af0eb5ec7e804116f10783a" kindref="member">IS_CAN_FILTER_SCALE</ref>(CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1a9d52661aca538dbfcafdda6f16dddc82" kindref="member">CAN_FilterScale</ref>));</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n__filter___f_i_f_o_1ga2df5ae0de841fc80c969e9147991ec9d" kindref="member">IS_CAN_FILTER_FIFO</ref>(CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1a01ba491f12097adcc9f0a3d627628d55" kindref="member">CAN_FilterFIFOAssignment</ref>));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1a0225afda33b565f358ca75bdaa780074" kindref="member">CAN_FilterActivation</ref>));</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>filter_number_bit_pos<sp/>=<sp/>((uint32_t)1)<sp/>&lt;&lt;<sp/>CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1af94466e1138c2b4fe6a67cf556981193" kindref="member">CAN_FilterNumber</ref>;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialisation<sp/>mode<sp/>for<sp/>the<sp/>filter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><ref refid="group___peripheral__declaration_1ga4964ecb6a5c689aaf8ee2832b8093aac" kindref="member">CAN1</ref>-&gt;FMR<sp/>|=<sp/><ref refid="group___c_a_n___private___defines_1ga6125d0273c466e402db1a8f5bf888857" kindref="member">FMR_FINIT</ref>;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Filter<sp/>Deactivation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><ref refid="group___peripheral__declaration_1ga4964ecb6a5c689aaf8ee2832b8093aac" kindref="member">CAN1</ref>-&gt;FA1R<sp/>&amp;=<sp/>~(uint32_t)filter_number_bit_pos;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Filter<sp/>Scale<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1a9d52661aca538dbfcafdda6f16dddc82" kindref="member">CAN_FilterScale</ref><sp/>==<sp/><ref refid="group___c_a_n__filter__scale_1ga9e0493937e73bcf9a4127eef2f255a95" kindref="member">CAN_FilterScale_16bit</ref>)</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>16-bit<sp/>scale<sp/>for<sp/>the<sp/>filter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4964ecb6a5c689aaf8ee2832b8093aac" kindref="member">CAN1</ref>-&gt;FS1R<sp/>&amp;=<sp/>~(uint32_t)filter_number_bit_pos;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>First<sp/>16-bit<sp/>identifier<sp/>and<sp/>First<sp/>16-bit<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Or<sp/>First<sp/>16-bit<sp/>identifier<sp/>and<sp/>Second<sp/>16-bit<sp/>identifier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4964ecb6a5c689aaf8ee2832b8093aac" kindref="member">CAN1</ref>-&gt;sFilterRegister[CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1af94466e1138c2b4fe6a67cf556981193" kindref="member">CAN_FilterNumber</ref>].FR1<sp/>=<sp/></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>((0x0000FFFF<sp/>&amp;<sp/>(uint32_t)CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1a0f052daf04b0a481ecfa5c2cc8058089" kindref="member">CAN_FilterMaskIdLow</ref>)<sp/>&lt;&lt;<sp/>16)<sp/>|</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x0000FFFF<sp/>&amp;<sp/>(uint32_t)CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1ab8c56b48ac323e8c7a1b535c79a51f87" kindref="member">CAN_FilterIdLow</ref>);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Second<sp/>16-bit<sp/>identifier<sp/>and<sp/>Second<sp/>16-bit<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Or<sp/>Third<sp/>16-bit<sp/>identifier<sp/>and<sp/>Fourth<sp/>16-bit<sp/>identifier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4964ecb6a5c689aaf8ee2832b8093aac" kindref="member">CAN1</ref>-&gt;sFilterRegister[CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1af94466e1138c2b4fe6a67cf556981193" kindref="member">CAN_FilterNumber</ref>].FR2<sp/>=<sp/></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>((0x0000FFFF<sp/>&amp;<sp/>(uint32_t)CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1a6f34539615e6484f266b46aa8f362a91" kindref="member">CAN_FilterMaskIdHigh</ref>)<sp/>&lt;&lt;<sp/>16)<sp/>|</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x0000FFFF<sp/>&amp;<sp/>(uint32_t)CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1afc109aa8eedced09d296605f2eb871f7" kindref="member">CAN_FilterIdHigh</ref>);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1a9d52661aca538dbfcafdda6f16dddc82" kindref="member">CAN_FilterScale</ref><sp/>==<sp/><ref refid="group___c_a_n__filter__scale_1gac63dfb0e11713c59268ee9f4aebab60e" kindref="member">CAN_FilterScale_32bit</ref>)</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>32-bit<sp/>scale<sp/>for<sp/>the<sp/>filter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4964ecb6a5c689aaf8ee2832b8093aac" kindref="member">CAN1</ref>-&gt;FS1R<sp/>|=<sp/>filter_number_bit_pos;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>32-bit<sp/>identifier<sp/>or<sp/>First<sp/>32-bit<sp/>identifier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4964ecb6a5c689aaf8ee2832b8093aac" kindref="member">CAN1</ref>-&gt;sFilterRegister[CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1af94466e1138c2b4fe6a67cf556981193" kindref="member">CAN_FilterNumber</ref>].FR1<sp/>=<sp/></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>((0x0000FFFF<sp/>&amp;<sp/>(uint32_t)CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1afc109aa8eedced09d296605f2eb871f7" kindref="member">CAN_FilterIdHigh</ref>)<sp/>&lt;&lt;<sp/>16)<sp/>|</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x0000FFFF<sp/>&amp;<sp/>(uint32_t)CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1ab8c56b48ac323e8c7a1b535c79a51f87" kindref="member">CAN_FilterIdLow</ref>);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>32-bit<sp/>mask<sp/>or<sp/>Second<sp/>32-bit<sp/>identifier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4964ecb6a5c689aaf8ee2832b8093aac" kindref="member">CAN1</ref>-&gt;sFilterRegister[CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1af94466e1138c2b4fe6a67cf556981193" kindref="member">CAN_FilterNumber</ref>].FR2<sp/>=<sp/></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>((0x0000FFFF<sp/>&amp;<sp/>(uint32_t)CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1a6f34539615e6484f266b46aa8f362a91" kindref="member">CAN_FilterMaskIdHigh</ref>)<sp/>&lt;&lt;<sp/>16)<sp/>|</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(0x0000FFFF<sp/>&amp;<sp/>(uint32_t)CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1a0f052daf04b0a481ecfa5c2cc8058089" kindref="member">CAN_FilterMaskIdLow</ref>);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Filter<sp/>Mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1a7cfb23c48aad13a058c2619dbc062d8a" kindref="member">CAN_FilterMode</ref><sp/>==<sp/><ref refid="group___c_a_n__filter__mode_1ga8136e518fb31fd91079e4c7c4c19c94b" kindref="member">CAN_FilterMode_IdMask</ref>)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Id/Mask<sp/>mode<sp/>for<sp/>the<sp/>filter*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4964ecb6a5c689aaf8ee2832b8093aac" kindref="member">CAN1</ref>-&gt;FM1R<sp/>&amp;=<sp/>~(uint32_t)filter_number_bit_pos;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>CAN_FilterInitStruct-&gt;CAN_FilterMode<sp/>==<sp/>CAN_FilterMode_IdList<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Identifier<sp/>list<sp/>mode<sp/>for<sp/>the<sp/>filter*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4964ecb6a5c689aaf8ee2832b8093aac" kindref="member">CAN1</ref>-&gt;FM1R<sp/>|=<sp/>(uint32_t)filter_number_bit_pos;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Filter<sp/>FIFO<sp/>assignment<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1a01ba491f12097adcc9f0a3d627628d55" kindref="member">CAN_FilterFIFOAssignment</ref><sp/>==<sp/><ref refid="group___c_a_n__filter___f_i_f_o_1ga8249c27978ca94676530540b88a6be8f" kindref="member">CAN_Filter_FIFO0</ref>)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIFO<sp/>0<sp/>assignation<sp/>for<sp/>the<sp/>filter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4964ecb6a5c689aaf8ee2832b8093aac" kindref="member">CAN1</ref>-&gt;FFA1R<sp/>&amp;=<sp/>~(uint32_t)filter_number_bit_pos;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1a01ba491f12097adcc9f0a3d627628d55" kindref="member">CAN_FilterFIFOAssignment</ref><sp/>==<sp/><ref refid="group___c_a_n__filter___f_i_f_o_1gaab8478c89a607c4b8baf68efc730e316" kindref="member">CAN_Filter_FIFO1</ref>)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIFO<sp/>1<sp/>assignation<sp/>for<sp/>the<sp/>filter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4964ecb6a5c689aaf8ee2832b8093aac" kindref="member">CAN1</ref>-&gt;FFA1R<sp/>|=<sp/>(uint32_t)filter_number_bit_pos;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Filter<sp/>activation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CAN_FilterInitStruct-&gt;<ref refid="struct_c_a_n___filter_init_type_def_1a0225afda33b565f358ca75bdaa780074" kindref="member">CAN_FilterActivation</ref><sp/>==<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" kindref="member">ENABLE</ref>)</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4964ecb6a5c689aaf8ee2832b8093aac" kindref="member">CAN1</ref>-&gt;FA1R<sp/>|=<sp/>filter_number_bit_pos;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Leave<sp/>the<sp/>initialisation<sp/>mode<sp/>for<sp/>the<sp/>filter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><ref refid="group___peripheral__declaration_1ga4964ecb6a5c689aaf8ee2832b8093aac" kindref="member">CAN1</ref>-&gt;FMR<sp/>&amp;=<sp/>~<ref refid="group___c_a_n___private___defines_1ga6125d0273c466e402db1a8f5bf888857" kindref="member">FMR_FINIT</ref>;</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="384" refid="group___c_a_n___private___functions_1gad77ad810868ed111755fc9e8ae0c7646" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n___private___functions_1gad77ad810868ed111755fc9e8ae0c7646" kindref="member">CAN_StructInit</ref>(<ref refid="struct_c_a_n___init_type_def" kindref="compound">CAN_InitTypeDef</ref>*<sp/>CAN_InitStruct)</highlight></codeline>
<codeline lineno="385"><highlight class="normal">{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>CAN<sp/>init<sp/>structure<sp/>parameters<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>time<sp/>triggered<sp/>communication<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1aa53ceafdcf1a9a5c9a6566006c9a4b60" kindref="member">CAN_TTCM</ref><sp/>=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>automatic<sp/>bus-off<sp/>management<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1a70560646c27d96ca8adc4a62d24dafd9" kindref="member">CAN_ABOM</ref><sp/>=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>automatic<sp/>wake-up<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1a10f873c858a7b0efc2d0ab41524320d3" kindref="member">CAN_AWUM</ref><sp/>=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>no<sp/>automatic<sp/>retransmission<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1a5adeac1b7b47f2b91e667eddc181ac09" kindref="member">CAN_NART</ref><sp/>=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>receive<sp/>FIFO<sp/>locked<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1aa63787683c0ad533b513fb60355d76f1" kindref="member">CAN_RFLM</ref><sp/>=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>transmit<sp/>FIFO<sp/>priority<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1a003de4b70fc93b4f820f320c6ea75a16" kindref="member">CAN_TXFP</ref><sp/>=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>CAN_Mode<sp/>member<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1a24816ff18ae048a5ec4bbb22aa2c04f9" kindref="member">CAN_Mode</ref><sp/>=<sp/><ref refid="group___c_a_n___mode_1gaaf1f48ab4917ccfd5fd31dd781d59e29" kindref="member">CAN_Mode_Normal</ref>;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>CAN_SJW<sp/>member<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1addac271c43490cb37ac7293f7bf201c2" kindref="member">CAN_SJW</ref><sp/>=<sp/><ref refid="group___c_a_n__synchronisation__jump__width_1ga4e03d22ae683b63cb4df238449ec967c" kindref="member">CAN_SJW_1tq</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>CAN_BS1<sp/>member<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1aecbd21b55dc88c3a18db93af2836cd58" kindref="member">CAN_BS1</ref><sp/>=<sp/><ref refid="group___c_a_n__time__quantum__in__bit__segment__1_1ga7c5c668200f41991e14b31ca20235000" kindref="member">CAN_BS1_4tq</ref>;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>CAN_BS2<sp/>member<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1a693eb00830d6e2aeb4d9fabdba85b9cf" kindref="member">CAN_BS2</ref><sp/>=<sp/><ref refid="group___c_a_n__time__quantum__in__bit__segment__2_1gab3d325ce4a5d0eb1ee8ee50ad4ec7e49" kindref="member">CAN_BS2_3tq</ref>;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>CAN_Prescaler<sp/>member<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>CAN_InitStruct-&gt;<ref refid="struct_c_a_n___init_type_def_1a3e91dbcbf30b893a9bd6a65606cb8fe9" kindref="member">CAN_Prescaler</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="428" refid="group___c_a_n___private___functions_1ga109ff8960bc59f44b984c9646f17b3c0" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n___private___functions_1ga109ff8960bc59f44b984c9646f17b3c0" kindref="member">CAN_SlaveStartBank</ref>(uint8_t<sp/>CAN_BankNumber)<sp/></highlight></codeline>
<codeline lineno="429"><highlight class="normal">{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___start__bank__filter__for__slave___c_a_n_1ga7fb463088ff4cd584bba47e3d0a4f469" kindref="member">IS_CAN_BANKNUMBER</ref>(CAN_BankNumber));</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enter<sp/>Initialisation<sp/>mode<sp/>for<sp/>the<sp/>filter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><ref refid="group___peripheral__declaration_1ga4964ecb6a5c689aaf8ee2832b8093aac" kindref="member">CAN1</ref>-&gt;FMR<sp/>|=<sp/><ref refid="group___c_a_n___private___defines_1ga6125d0273c466e402db1a8f5bf888857" kindref="member">FMR_FINIT</ref>;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Select<sp/>the<sp/>start<sp/>slave<sp/>bank<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><ref refid="group___peripheral__declaration_1ga4964ecb6a5c689aaf8ee2832b8093aac" kindref="member">CAN1</ref>-&gt;FMR<sp/>&amp;=<sp/>(uint32_t)0xFFFFC0F1<sp/>;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><ref refid="group___peripheral__declaration_1ga4964ecb6a5c689aaf8ee2832b8093aac" kindref="member">CAN1</ref>-&gt;FMR<sp/>|=<sp/>(uint32_t)(CAN_BankNumber)&lt;&lt;8;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Leave<sp/>Initialisation<sp/>mode<sp/>for<sp/>the<sp/>filter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><ref refid="group___peripheral__declaration_1ga4964ecb6a5c689aaf8ee2832b8093aac" kindref="member">CAN1</ref>-&gt;FMR<sp/>&amp;=<sp/>~<ref refid="group___c_a_n___private___defines_1ga6125d0273c466e402db1a8f5bf888857" kindref="member">FMR_FINIT</ref>;</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="451" refid="group___c_a_n___private___functions_1gac0e2d33e08caf49d1f1251f0dcc20213" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n___private___functions_1gac0e2d33e08caf49d1f1251f0dcc20213" kindref="member">CAN_DBGFreeze</ref>(<ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref>*<sp/>CANx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="452"><highlight class="normal">{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" kindref="member">IS_CAN_ALL_PERIPH</ref>(CANx));</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>Debug<sp/>Freeze<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>|=<sp/><ref refid="group___c_a_n___private___defines_1ga1ded3736beb63c49281f2983fc68c36d" kindref="member">MCR_DBF</ref>;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>Debug<sp/>Freeze<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>&amp;=<sp/>~<ref refid="group___c_a_n___private___defines_1ga1ded3736beb63c49281f2983fc68c36d" kindref="member">MCR_DBF</ref>;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="481" refid="group___c_a_n___private___functions_1ga94740177bab153ca5b102d122f9a8cca" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n___private___functions_1ga94740177bab153ca5b102d122f9a8cca" kindref="member">CAN_TTComModeCmd</ref>(<ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref>*<sp/>CANx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="482"><highlight class="normal">{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" kindref="member">IS_CAN_ALL_PERIPH</ref>(CANx));</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>TTCM<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>|=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga32b2eda9cad8a969c5d2349bd1d853bb" kindref="member">CAN_MCR_TTCM</ref>;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>TGT<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a328925e230f68a775f6f4ad1076c27ce" kindref="member">sTxMailBox</ref>[0].<ref refid="struct_c_a_n___tx_mail_box___type_def_1a2351cb865d064cf75f61642aaa887f76" kindref="member">TDTR</ref><sp/>|=<sp/>((uint32_t)<ref refid="group___peripheral___registers___bits___definition_1gad2d329960b527a62fab099a084bfa906" kindref="member">CAN_TDT0R_TGT</ref>);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a328925e230f68a775f6f4ad1076c27ce" kindref="member">sTxMailBox</ref>[1].<ref refid="struct_c_a_n___tx_mail_box___type_def_1a2351cb865d064cf75f61642aaa887f76" kindref="member">TDTR</ref><sp/>|=<sp/>((uint32_t)<ref refid="group___peripheral___registers___bits___definition_1ga35757787e6481553885fdf4fd2738c4b" kindref="member">CAN_TDT1R_TGT</ref>);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a328925e230f68a775f6f4ad1076c27ce" kindref="member">sTxMailBox</ref>[2].<ref refid="struct_c_a_n___tx_mail_box___type_def_1a2351cb865d064cf75f61642aaa887f76" kindref="member">TDTR</ref><sp/>|=<sp/>((uint32_t)<ref refid="group___peripheral___registers___bits___definition_1ga4c51b43d309b56e8a64724ef1517033e" kindref="member">CAN_TDT2R_TGT</ref>);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>TTCM<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>&amp;=<sp/>(uint32_t)(~(uint32_t)<ref refid="group___peripheral___registers___bits___definition_1ga32b2eda9cad8a969c5d2349bd1d853bb" kindref="member">CAN_MCR_TTCM</ref>);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>TGT<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a328925e230f68a775f6f4ad1076c27ce" kindref="member">sTxMailBox</ref>[0].<ref refid="struct_c_a_n___tx_mail_box___type_def_1a2351cb865d064cf75f61642aaa887f76" kindref="member">TDTR</ref><sp/>&amp;=<sp/>((uint32_t)~<ref refid="group___peripheral___registers___bits___definition_1gad2d329960b527a62fab099a084bfa906" kindref="member">CAN_TDT0R_TGT</ref>);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a328925e230f68a775f6f4ad1076c27ce" kindref="member">sTxMailBox</ref>[1].<ref refid="struct_c_a_n___tx_mail_box___type_def_1a2351cb865d064cf75f61642aaa887f76" kindref="member">TDTR</ref><sp/>&amp;=<sp/>((uint32_t)~<ref refid="group___peripheral___registers___bits___definition_1ga35757787e6481553885fdf4fd2738c4b" kindref="member">CAN_TDT1R_TGT</ref>);</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a328925e230f68a775f6f4ad1076c27ce" kindref="member">sTxMailBox</ref>[2].<ref refid="struct_c_a_n___tx_mail_box___type_def_1a2351cb865d064cf75f61642aaa887f76" kindref="member">TDTR</ref><sp/>&amp;=<sp/>((uint32_t)~<ref refid="group___peripheral___registers___bits___definition_1ga4c51b43d309b56e8a64724ef1517033e" kindref="member">CAN_TDT2R_TGT</ref>);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="515" refid="group___c_a_n___private___functions_1gaccfcb81f76f58400077c7b2d8641dd83" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="group___c_a_n___private___functions_1gaccfcb81f76f58400077c7b2d8641dd83" kindref="member">CAN_Transmit</ref>(<ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref>*<sp/>CANx,<sp/><ref refid="struct_can_tx_msg" kindref="compound">CanTxMsg</ref>*<sp/>TxMessage)</highlight></codeline>
<codeline lineno="516"><highlight class="normal">{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>uint8_t<sp/>transmit_mailbox<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" kindref="member">IS_CAN_ALL_PERIPH</ref>(CANx));</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n__identifier__type_1gab845f7fbcf6ff8cf3d025210eb8900e4" kindref="member">IS_CAN_IDTYPE</ref>(TxMessage-&gt;<ref refid="struct_can_tx_msg_1aa4c8568a0e3250a17bd7e116b3e09670" kindref="member">IDE</ref>));</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n__remote__transmission__request_1ga3379997ad4da6fc4d7975c52b891bdc0" kindref="member">IS_CAN_RTR</ref>(TxMessage-&gt;<ref refid="struct_can_tx_msg_1a69f84255db38c6910058f290efdb7302" kindref="member">RTR</ref>));</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___tx_1ga6109469a6a2792b3e7c6be520ea50d36" kindref="member">IS_CAN_DLC</ref>(TxMessage-&gt;<ref refid="struct_can_tx_msg_1ab49d0fa602aad2fd9cd007adafc11fc2" kindref="member">DLC</ref>));</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Select<sp/>one<sp/>empty<sp/>transmit<sp/>mailbox<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((CANx-&gt;<ref refid="struct_c_a_n___type_def_1acbc82ac4e87e75350fc586be5e56d95b" kindref="member">TSR</ref>&amp;<ref refid="group___peripheral___registers___bits___definition_1gad7500e491fe82e67ed5d40759e8a50f0" kindref="member">CAN_TSR_TME0</ref>)<sp/>==<sp/><ref refid="group___peripheral___registers___bits___definition_1gad7500e491fe82e67ed5d40759e8a50f0" kindref="member">CAN_TSR_TME0</ref>)</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>transmit_mailbox<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((CANx-&gt;<ref refid="struct_c_a_n___type_def_1acbc82ac4e87e75350fc586be5e56d95b" kindref="member">TSR</ref>&amp;<ref refid="group___peripheral___registers___bits___definition_1ga5ba2b51def4b1683fd050e43045306ea" kindref="member">CAN_TSR_TME1</ref>)<sp/>==<sp/><ref refid="group___peripheral___registers___bits___definition_1ga5ba2b51def4b1683fd050e43045306ea" kindref="member">CAN_TSR_TME1</ref>)</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>transmit_mailbox<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((CANx-&gt;<ref refid="struct_c_a_n___type_def_1acbc82ac4e87e75350fc586be5e56d95b" kindref="member">TSR</ref>&amp;<ref refid="group___peripheral___registers___bits___definition_1gaf6523fac51d3aed2e36de4c2f07c2a21" kindref="member">CAN_TSR_TME2</ref>)<sp/>==<sp/><ref refid="group___peripheral___registers___bits___definition_1gaf6523fac51d3aed2e36de4c2f07c2a21" kindref="member">CAN_TSR_TME2</ref>)</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>transmit_mailbox<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>transmit_mailbox<sp/>=<sp/><ref refid="group___c_a_n__transmit__constants_1ga2620e99debd51011d3569121f2e44690" kindref="member">CAN_TxStatus_NoMailBox</ref>;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(transmit_mailbox<sp/>!=<sp/><ref refid="group___c_a_n__transmit__constants_1ga2620e99debd51011d3569121f2e44690" kindref="member">CAN_TxStatus_NoMailBox</ref>)</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>the<sp/>Id<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a328925e230f68a775f6f4ad1076c27ce" kindref="member">sTxMailBox</ref>[transmit_mailbox].<ref refid="struct_c_a_n___tx_mail_box___type_def_1a22f525c909de2dcec1d4093fe1d562b8" kindref="member">TIR</ref><sp/>&amp;=<sp/><ref refid="group___c_a_n___private___defines_1gabeb6db5ba5c01da5084ec1605f868e18" kindref="member">TMIDxR_TXRQ</ref>;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(TxMessage-&gt;<ref refid="struct_can_tx_msg_1aa4c8568a0e3250a17bd7e116b3e09670" kindref="member">IDE</ref><sp/>==<sp/><ref refid="group___c_a_n__identifier__type_1ga151d9df8a6f361d0a3231593726b5a13" kindref="member">CAN_Id_Standard</ref>)</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___tx_1gaf059e4383fa69dec6e18216b22a87f51" kindref="member">IS_CAN_STDID</ref>(TxMessage-&gt;<ref refid="struct_can_tx_msg_1abfb50c8208227f8cf378f29cf9a3a6f3" kindref="member">StdId</ref>));<sp/><sp/></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a328925e230f68a775f6f4ad1076c27ce" kindref="member">sTxMailBox</ref>[transmit_mailbox].<ref refid="struct_c_a_n___tx_mail_box___type_def_1a22f525c909de2dcec1d4093fe1d562b8" kindref="member">TIR</ref><sp/>|=<sp/>((TxMessage-&gt;<ref refid="struct_can_tx_msg_1abfb50c8208227f8cf378f29cf9a3a6f3" kindref="member">StdId</ref><sp/>&lt;&lt;<sp/>21)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TxMessage-&gt;<ref refid="struct_can_tx_msg_1a69f84255db38c6910058f290efdb7302" kindref="member">RTR</ref>);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___tx_1ga62dbc2163ad6751b3f921e717b00e9f2" kindref="member">IS_CAN_EXTID</ref>(TxMessage-&gt;<ref refid="struct_can_tx_msg_1a33050a95a4cc463b589ff16bdd416f22" kindref="member">ExtId</ref>));</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a328925e230f68a775f6f4ad1076c27ce" kindref="member">sTxMailBox</ref>[transmit_mailbox].<ref refid="struct_c_a_n___tx_mail_box___type_def_1a22f525c909de2dcec1d4093fe1d562b8" kindref="member">TIR</ref><sp/>|=<sp/>((TxMessage-&gt;<ref refid="struct_can_tx_msg_1a33050a95a4cc463b589ff16bdd416f22" kindref="member">ExtId</ref><sp/>&lt;&lt;<sp/>3)<sp/>|<sp/>\</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TxMessage-&gt;<ref refid="struct_can_tx_msg_1aa4c8568a0e3250a17bd7e116b3e09670" kindref="member">IDE</ref><sp/>|<sp/>\</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TxMessage-&gt;<ref refid="struct_can_tx_msg_1a69f84255db38c6910058f290efdb7302" kindref="member">RTR</ref>);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>the<sp/>DLC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>TxMessage-&gt;<ref refid="struct_can_tx_msg_1ab49d0fa602aad2fd9cd007adafc11fc2" kindref="member">DLC</ref><sp/>&amp;=<sp/>(uint8_t)0x0000000F;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a328925e230f68a775f6f4ad1076c27ce" kindref="member">sTxMailBox</ref>[transmit_mailbox].<ref refid="struct_c_a_n___tx_mail_box___type_def_1a2351cb865d064cf75f61642aaa887f76" kindref="member">TDTR</ref><sp/>&amp;=<sp/>(uint32_t)0xFFFFFFF0;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a328925e230f68a775f6f4ad1076c27ce" kindref="member">sTxMailBox</ref>[transmit_mailbox].<ref refid="struct_c_a_n___tx_mail_box___type_def_1a2351cb865d064cf75f61642aaa887f76" kindref="member">TDTR</ref><sp/>|=<sp/>TxMessage-&gt;<ref refid="struct_can_tx_msg_1ab49d0fa602aad2fd9cd007adafc11fc2" kindref="member">DLC</ref>;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>up<sp/>the<sp/>data<sp/>field<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a328925e230f68a775f6f4ad1076c27ce" kindref="member">sTxMailBox</ref>[transmit_mailbox].<ref refid="struct_c_a_n___tx_mail_box___type_def_1a408c96501b1cc8bd527432736d132a39" kindref="member">TDLR</ref><sp/>=<sp/>(((uint32_t)TxMessage-&gt;<ref refid="struct_can_tx_msg_1aabfbf718f627da26d9e3cf903dc0ad02" kindref="member">Data</ref>[3]<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)TxMessage-&gt;<ref refid="struct_can_tx_msg_1aabfbf718f627da26d9e3cf903dc0ad02" kindref="member">Data</ref>[2]<sp/>&lt;&lt;<sp/>16)<sp/>|</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)TxMessage-&gt;<ref refid="struct_can_tx_msg_1aabfbf718f627da26d9e3cf903dc0ad02" kindref="member">Data</ref>[1]<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)TxMessage-&gt;<ref refid="struct_can_tx_msg_1aabfbf718f627da26d9e3cf903dc0ad02" kindref="member">Data</ref>[0]));</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a328925e230f68a775f6f4ad1076c27ce" kindref="member">sTxMailBox</ref>[transmit_mailbox].<ref refid="struct_c_a_n___tx_mail_box___type_def_1a98c6bcd7c9bae378ebf83fd9f5b59020" kindref="member">TDHR</ref><sp/>=<sp/>(((uint32_t)TxMessage-&gt;<ref refid="struct_can_tx_msg_1aabfbf718f627da26d9e3cf903dc0ad02" kindref="member">Data</ref>[7]<sp/>&lt;&lt;<sp/>24)<sp/>|<sp/></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)TxMessage-&gt;<ref refid="struct_can_tx_msg_1aabfbf718f627da26d9e3cf903dc0ad02" kindref="member">Data</ref>[6]<sp/>&lt;&lt;<sp/>16)<sp/>|</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)TxMessage-&gt;<ref refid="struct_can_tx_msg_1aabfbf718f627da26d9e3cf903dc0ad02" kindref="member">Data</ref>[5]<sp/>&lt;&lt;<sp/>8)<sp/>|</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)TxMessage-&gt;<ref refid="struct_can_tx_msg_1aabfbf718f627da26d9e3cf903dc0ad02" kindref="member">Data</ref>[4]));</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Request<sp/>transmission<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a328925e230f68a775f6f4ad1076c27ce" kindref="member">sTxMailBox</ref>[transmit_mailbox].<ref refid="struct_c_a_n___tx_mail_box___type_def_1a22f525c909de2dcec1d4093fe1d562b8" kindref="member">TIR</ref><sp/>|=<sp/><ref refid="group___c_a_n___private___defines_1gabeb6db5ba5c01da5084ec1605f868e18" kindref="member">TMIDxR_TXRQ</ref>;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>transmit_mailbox;</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="589" refid="group___c_a_n___private___functions_1ga68ab05a0a6cdfcc2b6f6b6b2c10848e2" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="group___c_a_n___private___functions_1ga68ab05a0a6cdfcc2b6f6b6b2c10848e2" kindref="member">CAN_TransmitStatus</ref>(<ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref>*<sp/>CANx,<sp/>uint8_t<sp/>TransmitMailbox)</highlight></codeline>
<codeline lineno="590"><highlight class="normal">{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>uint32_t<sp/>state<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" kindref="member">IS_CAN_ALL_PERIPH</ref>(CANx));</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___tx_1ga218b3e1380c4d49163c91a1af904e44c" kindref="member">IS_CAN_TRANSMITMAILBOX</ref>(TransmitMailbox));</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(TransmitMailbox)</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="group___c_a_n___private___defines_1gaa62f09d0693681cb7576f61c93b7cf0f" kindref="member">CAN_TXMAILBOX_0</ref>):<sp/></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state<sp/>=<sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1acbc82ac4e87e75350fc586be5e56d95b" kindref="member">TSR</ref><sp/>&amp;<sp/><sp/>(<ref refid="group___peripheral___registers___bits___definition_1ga4a4809b8908618df57e6393cc7fe0f52" kindref="member">CAN_TSR_RQCP0</ref><sp/>|<sp/><ref refid="group___peripheral___registers___bits___definition_1gaacedb237b31d29aef7f38475e9a6b297" kindref="member">CAN_TSR_TXOK0</ref><sp/>|<sp/><ref refid="group___peripheral___registers___bits___definition_1gad7500e491fe82e67ed5d40759e8a50f0" kindref="member">CAN_TSR_TME0</ref>);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="group___c_a_n___private___defines_1ga4e20f0aac1ac940014a6c66971890943" kindref="member">CAN_TXMAILBOX_1</ref>):<sp/></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state<sp/>=<sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1acbc82ac4e87e75350fc586be5e56d95b" kindref="member">TSR</ref><sp/>&amp;<sp/><sp/>(<ref refid="group___peripheral___registers___bits___definition_1gabd3118dec59c3a45d2f262b090699538" kindref="member">CAN_TSR_RQCP1</ref><sp/>|<sp/><ref refid="group___peripheral___registers___bits___definition_1gaea918e510c5471b1ac797350b7950151" kindref="member">CAN_TSR_TXOK1</ref><sp/>|<sp/><ref refid="group___peripheral___registers___bits___definition_1ga5ba2b51def4b1683fd050e43045306ea" kindref="member">CAN_TSR_TME1</ref>);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="group___c_a_n___private___defines_1ga8a842aa352d72321930cc963b26bf6d7" kindref="member">CAN_TXMAILBOX_2</ref>):<sp/></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state<sp/>=<sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1acbc82ac4e87e75350fc586be5e56d95b" kindref="member">TSR</ref><sp/>&amp;<sp/><sp/>(<ref refid="group___peripheral___registers___bits___definition_1ga3cf9e83cec96164f1dadf4e43411ebf0" kindref="member">CAN_TSR_RQCP2</ref><sp/>|<sp/><ref refid="group___peripheral___registers___bits___definition_1ga782c591bb204d751b470dd53a37d240e" kindref="member">CAN_TSR_TXOK2</ref><sp/>|<sp/><ref refid="group___peripheral___registers___bits___definition_1gaf6523fac51d3aed2e36de4c2f07c2a21" kindref="member">CAN_TSR_TME2</ref>);</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>state<sp/>=<sp/><ref refid="group___c_a_n__transmit__constants_1ga8d193002e76c04ec8caff6b110cd5983" kindref="member">CAN_TxStatus_Failed</ref>;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(state)</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>transmit<sp/>pending<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(0x0):<sp/>state<sp/>=<sp/><ref refid="group___c_a_n__transmit__constants_1ga9678a3a51379422868083608c7394409" kindref="member">CAN_TxStatus_Pending</ref>;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>transmit<sp/>failed<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="group___peripheral___registers___bits___definition_1ga4a4809b8908618df57e6393cc7fe0f52" kindref="member">CAN_TSR_RQCP0</ref><sp/>|<sp/><ref refid="group___peripheral___registers___bits___definition_1gad7500e491fe82e67ed5d40759e8a50f0" kindref="member">CAN_TSR_TME0</ref>):<sp/>state<sp/>=<sp/><ref refid="group___c_a_n__transmit__constants_1ga8d193002e76c04ec8caff6b110cd5983" kindref="member">CAN_TxStatus_Failed</ref>;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="group___peripheral___registers___bits___definition_1gabd3118dec59c3a45d2f262b090699538" kindref="member">CAN_TSR_RQCP1</ref><sp/>|<sp/><ref refid="group___peripheral___registers___bits___definition_1ga5ba2b51def4b1683fd050e43045306ea" kindref="member">CAN_TSR_TME1</ref>):<sp/>state<sp/>=<sp/><ref refid="group___c_a_n__transmit__constants_1ga8d193002e76c04ec8caff6b110cd5983" kindref="member">CAN_TxStatus_Failed</ref>;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="group___peripheral___registers___bits___definition_1ga3cf9e83cec96164f1dadf4e43411ebf0" kindref="member">CAN_TSR_RQCP2</ref><sp/>|<sp/><ref refid="group___peripheral___registers___bits___definition_1gaf6523fac51d3aed2e36de4c2f07c2a21" kindref="member">CAN_TSR_TME2</ref>):<sp/>state<sp/>=<sp/><ref refid="group___c_a_n__transmit__constants_1ga8d193002e76c04ec8caff6b110cd5983" kindref="member">CAN_TxStatus_Failed</ref>;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>transmit<sp/>succeeded<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="group___peripheral___registers___bits___definition_1ga4a4809b8908618df57e6393cc7fe0f52" kindref="member">CAN_TSR_RQCP0</ref><sp/>|<sp/><ref refid="group___peripheral___registers___bits___definition_1gaacedb237b31d29aef7f38475e9a6b297" kindref="member">CAN_TSR_TXOK0</ref><sp/>|<sp/><ref refid="group___peripheral___registers___bits___definition_1gad7500e491fe82e67ed5d40759e8a50f0" kindref="member">CAN_TSR_TME0</ref>):state<sp/>=<sp/><ref refid="group___c_a_n__transmit__constants_1ga0b401c61922b1449de9b486dcf475c97" kindref="member">CAN_TxStatus_Ok</ref>;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="group___peripheral___registers___bits___definition_1gabd3118dec59c3a45d2f262b090699538" kindref="member">CAN_TSR_RQCP1</ref><sp/>|<sp/><ref refid="group___peripheral___registers___bits___definition_1gaea918e510c5471b1ac797350b7950151" kindref="member">CAN_TSR_TXOK1</ref><sp/>|<sp/><ref refid="group___peripheral___registers___bits___definition_1ga5ba2b51def4b1683fd050e43045306ea" kindref="member">CAN_TSR_TME1</ref>):state<sp/>=<sp/><ref refid="group___c_a_n__transmit__constants_1ga0b401c61922b1449de9b486dcf475c97" kindref="member">CAN_TxStatus_Ok</ref>;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="group___peripheral___registers___bits___definition_1ga3cf9e83cec96164f1dadf4e43411ebf0" kindref="member">CAN_TSR_RQCP2</ref><sp/>|<sp/><ref refid="group___peripheral___registers___bits___definition_1ga782c591bb204d751b470dd53a37d240e" kindref="member">CAN_TSR_TXOK2</ref><sp/>|<sp/><ref refid="group___peripheral___registers___bits___definition_1gaf6523fac51d3aed2e36de4c2f07c2a21" kindref="member">CAN_TSR_TME2</ref>):state<sp/>=<sp/><ref refid="group___c_a_n__transmit__constants_1ga0b401c61922b1449de9b486dcf475c97" kindref="member">CAN_TxStatus_Ok</ref>;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>state<sp/>=<sp/><ref refid="group___c_a_n__transmit__constants_1ga8d193002e76c04ec8caff6b110cd5983" kindref="member">CAN_TxStatus_Failed</ref>;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)<sp/>state;</highlight></codeline>
<codeline lineno="635"><highlight class="normal">}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="643" refid="group___c_a_n___private___functions_1ga81106cdf5395a1947bfc87ec1685829e" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n___private___functions_1ga81106cdf5395a1947bfc87ec1685829e" kindref="member">CAN_CancelTransmit</ref>(<ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref>*<sp/>CANx,<sp/>uint8_t<sp/>Mailbox)</highlight></codeline>
<codeline lineno="644"><highlight class="normal">{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" kindref="member">IS_CAN_ALL_PERIPH</ref>(CANx));</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___tx_1ga218b3e1380c4d49163c91a1af904e44c" kindref="member">IS_CAN_TRANSMITMAILBOX</ref>(Mailbox));</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>abort<sp/>transmission<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(Mailbox)</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="group___c_a_n___private___defines_1gaa62f09d0693681cb7576f61c93b7cf0f" kindref="member">CAN_TXMAILBOX_0</ref>):<sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1acbc82ac4e87e75350fc586be5e56d95b" kindref="member">TSR</ref><sp/>|=<sp/><ref refid="group___peripheral___registers___bits___definition_1gafdac6b87a303b0d0ec9b0d94a54ae31f" kindref="member">CAN_TSR_ABRQ0</ref>;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="group___c_a_n___private___defines_1ga4e20f0aac1ac940014a6c66971890943" kindref="member">CAN_TXMAILBOX_1</ref>):<sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1acbc82ac4e87e75350fc586be5e56d95b" kindref="member">TSR</ref><sp/>|=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga4c44a4e585b3ab1c37a6c2c28c90d6cd" kindref="member">CAN_TSR_ABRQ1</ref>;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>(<ref refid="group___c_a_n___private___defines_1ga8a842aa352d72321930cc963b26bf6d7" kindref="member">CAN_TXMAILBOX_2</ref>):<sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1acbc82ac4e87e75350fc586be5e56d95b" kindref="member">TSR</ref><sp/>|=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga2a3b7e4be7cebb35ad66cb85b82901bb" kindref="member">CAN_TSR_ABRQ2</ref>;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[ILG]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(<sp/>__GNUC__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wconversion&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="676" refid="group___c_a_n___private___functions_1ga351b90bb8a3bb0c846f85bbd56ef4dc8" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n___private___functions_1ga351b90bb8a3bb0c846f85bbd56ef4dc8" kindref="member">CAN_Receive</ref>(<ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref>*<sp/>CANx,<sp/>uint8_t<sp/>FIFONumber,<sp/><ref refid="struct_can_rx_msg" kindref="compound">CanRxMsg</ref>*<sp/>RxMessage)</highlight></codeline>
<codeline lineno="677"><highlight class="normal">{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" kindref="member">IS_CAN_ALL_PERIPH</ref>(CANx));</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n__receive___f_i_f_o__number__constants_1gaeeb94bf58bd48b8928f964eaaa20a24a" kindref="member">IS_CAN_FIFO</ref>(FIFONumber));</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>Id<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>RxMessage-&gt;<ref refid="struct_can_rx_msg_1a83a67d1a709cc01570ce956e5adc811f" kindref="member">IDE</ref><sp/>=<sp/>(uint8_t)0x04<sp/>&amp;<sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1aa6053bc607535d9ecf7a3d887c0cc053" kindref="member">sFIFOMailBox</ref>[FIFONumber].<ref refid="struct_c_a_n___f_i_f_o_mail_box___type_def_1a034504d43f7b16b320745a25b3a8f12d" kindref="member">RIR</ref>;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>if<sp/>(RxMessage-&gt;<ref refid="struct_can_rx_msg_1a83a67d1a709cc01570ce956e5adc811f" kindref="member">IDE</ref><sp/>==<sp/><ref refid="group___c_a_n__identifier__type_1ga151d9df8a6f361d0a3231593726b5a13" kindref="member">CAN_Id_Standard</ref>)</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>RxMessage-&gt;<ref refid="struct_can_rx_msg_1a62769e18836146f71238bee6b43b531e" kindref="member">StdId</ref><sp/>=<sp/>(uint32_t)0x000007FF<sp/>&amp;<sp/>(CANx-&gt;<ref refid="struct_c_a_n___type_def_1aa6053bc607535d9ecf7a3d887c0cc053" kindref="member">sFIFOMailBox</ref>[FIFONumber].<ref refid="struct_c_a_n___f_i_f_o_mail_box___type_def_1a034504d43f7b16b320745a25b3a8f12d" kindref="member">RIR</ref><sp/>&gt;&gt;<sp/>21);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>RxMessage-&gt;<ref refid="struct_can_rx_msg_1a1fdca10d31c81eea2ccef41d2aced562" kindref="member">ExtId</ref><sp/>=<sp/>(uint32_t)0x1FFFFFFF<sp/>&amp;<sp/>(CANx-&gt;<ref refid="struct_c_a_n___type_def_1aa6053bc607535d9ecf7a3d887c0cc053" kindref="member">sFIFOMailBox</ref>[FIFONumber].<ref refid="struct_c_a_n___f_i_f_o_mail_box___type_def_1a034504d43f7b16b320745a25b3a8f12d" kindref="member">RIR</ref><sp/>&gt;&gt;<sp/>3);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>RxMessage-&gt;<ref refid="struct_can_rx_msg_1a9a183149a391a24f86da2ce895f0f1c9" kindref="member">RTR</ref><sp/>=<sp/>(uint8_t)0x02<sp/>&amp;<sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1aa6053bc607535d9ecf7a3d887c0cc053" kindref="member">sFIFOMailBox</ref>[FIFONumber].<ref refid="struct_c_a_n___f_i_f_o_mail_box___type_def_1a034504d43f7b16b320745a25b3a8f12d" kindref="member">RIR</ref>;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>DLC<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>RxMessage-&gt;<ref refid="struct_can_rx_msg_1abf77d3abf9ad290c08cdfd5d99ebc745" kindref="member">DLC</ref><sp/>=<sp/>(uint8_t)0x0F<sp/>&amp;<sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1aa6053bc607535d9ecf7a3d887c0cc053" kindref="member">sFIFOMailBox</ref>[FIFONumber].<ref refid="struct_c_a_n___f_i_f_o_mail_box___type_def_1a49d74ca8b402c2b9596bfcbe4cd051a9" kindref="member">RDTR</ref>;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>FMI<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>RxMessage-&gt;<ref refid="struct_can_rx_msg_1a5afe39d8e295659eeb3030593828b96a" kindref="member">FMI</ref><sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>(CANx-&gt;<ref refid="struct_c_a_n___type_def_1aa6053bc607535d9ecf7a3d887c0cc053" kindref="member">sFIFOMailBox</ref>[FIFONumber].<ref refid="struct_c_a_n___f_i_f_o_mail_box___type_def_1a49d74ca8b402c2b9596bfcbe4cd051a9" kindref="member">RDTR</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>data<sp/>field<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>RxMessage-&gt;<ref refid="struct_can_rx_msg_1ae8ecbad16622db30d63fda08bc478649" kindref="member">Data</ref>[0]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1aa6053bc607535d9ecf7a3d887c0cc053" kindref="member">sFIFOMailBox</ref>[FIFONumber].<ref refid="struct_c_a_n___f_i_f_o_mail_box___type_def_1ac7d62861de29d0b4fcf11fabbdbd76e7" kindref="member">RDLR</ref>;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>RxMessage-&gt;<ref refid="struct_can_rx_msg_1ae8ecbad16622db30d63fda08bc478649" kindref="member">Data</ref>[1]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>(CANx-&gt;<ref refid="struct_c_a_n___type_def_1aa6053bc607535d9ecf7a3d887c0cc053" kindref="member">sFIFOMailBox</ref>[FIFONumber].<ref refid="struct_c_a_n___f_i_f_o_mail_box___type_def_1ac7d62861de29d0b4fcf11fabbdbd76e7" kindref="member">RDLR</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>RxMessage-&gt;<ref refid="struct_can_rx_msg_1ae8ecbad16622db30d63fda08bc478649" kindref="member">Data</ref>[2]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>(CANx-&gt;<ref refid="struct_c_a_n___type_def_1aa6053bc607535d9ecf7a3d887c0cc053" kindref="member">sFIFOMailBox</ref>[FIFONumber].<ref refid="struct_c_a_n___f_i_f_o_mail_box___type_def_1ac7d62861de29d0b4fcf11fabbdbd76e7" kindref="member">RDLR</ref><sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>RxMessage-&gt;<ref refid="struct_can_rx_msg_1ae8ecbad16622db30d63fda08bc478649" kindref="member">Data</ref>[3]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>(CANx-&gt;<ref refid="struct_c_a_n___type_def_1aa6053bc607535d9ecf7a3d887c0cc053" kindref="member">sFIFOMailBox</ref>[FIFONumber].<ref refid="struct_c_a_n___f_i_f_o_mail_box___type_def_1ac7d62861de29d0b4fcf11fabbdbd76e7" kindref="member">RDLR</ref><sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/>RxMessage-&gt;<ref refid="struct_can_rx_msg_1ae8ecbad16622db30d63fda08bc478649" kindref="member">Data</ref>[4]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1aa6053bc607535d9ecf7a3d887c0cc053" kindref="member">sFIFOMailBox</ref>[FIFONumber].<ref refid="struct_c_a_n___f_i_f_o_mail_box___type_def_1a95890984bd67845015d40e82fb091c93" kindref="member">RDHR</ref>;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>RxMessage-&gt;<ref refid="struct_can_rx_msg_1ae8ecbad16622db30d63fda08bc478649" kindref="member">Data</ref>[5]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>(CANx-&gt;<ref refid="struct_c_a_n___type_def_1aa6053bc607535d9ecf7a3d887c0cc053" kindref="member">sFIFOMailBox</ref>[FIFONumber].<ref refid="struct_c_a_n___f_i_f_o_mail_box___type_def_1a95890984bd67845015d40e82fb091c93" kindref="member">RDHR</ref><sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>RxMessage-&gt;<ref refid="struct_can_rx_msg_1ae8ecbad16622db30d63fda08bc478649" kindref="member">Data</ref>[6]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>(CANx-&gt;<ref refid="struct_c_a_n___type_def_1aa6053bc607535d9ecf7a3d887c0cc053" kindref="member">sFIFOMailBox</ref>[FIFONumber].<ref refid="struct_c_a_n___f_i_f_o_mail_box___type_def_1a95890984bd67845015d40e82fb091c93" kindref="member">RDHR</ref><sp/>&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>RxMessage-&gt;<ref refid="struct_can_rx_msg_1ae8ecbad16622db30d63fda08bc478649" kindref="member">Data</ref>[7]<sp/>=<sp/>(uint8_t)0xFF<sp/>&amp;<sp/>(CANx-&gt;<ref refid="struct_c_a_n___type_def_1aa6053bc607535d9ecf7a3d887c0cc053" kindref="member">sFIFOMailBox</ref>[FIFONumber].<ref refid="struct_c_a_n___f_i_f_o_mail_box___type_def_1a95890984bd67845015d40e82fb091c93" kindref="member">RDHR</ref><sp/>&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>the<sp/>FIFO<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>FIFO0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FIFONumber<sp/>==<sp/><ref refid="group___c_a_n__receive___f_i_f_o__number__constants_1ga8f52eeefb86b2af5b7c3b4b75fa4d114" kindref="member">CAN_FIFO0</ref>)</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1ad8e858479e26ab075ee2ddb630e8769d" kindref="member">RF0R</ref><sp/>|=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga74d2db4b9b7d52712e47557dcc61964d" kindref="member">CAN_RF0R_RFOM0</ref>;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>FIFO1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>FIFONumber<sp/>==<sp/>CAN_FIFO1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a69a528d1288c1de666df68655af1d20e" kindref="member">RF1R</ref><sp/>|=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga6930f860de4a90e3344e63fbc209b9ab" kindref="member">CAN_RF1R_RFOM1</ref>;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal">}</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[ILG]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(<sp/>__GNUC__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="730" refid="group___c_a_n___private___functions_1ga1bc3b39471e579b4101624c33d27918b" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n___private___functions_1ga1bc3b39471e579b4101624c33d27918b" kindref="member">CAN_FIFORelease</ref>(<ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref>*<sp/>CANx,<sp/>uint8_t<sp/>FIFONumber)</highlight></codeline>
<codeline lineno="731"><highlight class="normal">{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" kindref="member">IS_CAN_ALL_PERIPH</ref>(CANx));</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n__receive___f_i_f_o__number__constants_1gaeeb94bf58bd48b8928f964eaaa20a24a" kindref="member">IS_CAN_FIFO</ref>(FIFONumber));</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>FIFO0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FIFONumber<sp/>==<sp/><ref refid="group___c_a_n__receive___f_i_f_o__number__constants_1ga8f52eeefb86b2af5b7c3b4b75fa4d114" kindref="member">CAN_FIFO0</ref>)</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1ad8e858479e26ab075ee2ddb630e8769d" kindref="member">RF0R</ref><sp/>|=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga74d2db4b9b7d52712e47557dcc61964d" kindref="member">CAN_RF0R_RFOM0</ref>;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>FIFO1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>FIFONumber<sp/>==<sp/>CAN_FIFO1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a69a528d1288c1de666df68655af1d20e" kindref="member">RF1R</ref><sp/>|=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga6930f860de4a90e3344e63fbc209b9ab" kindref="member">CAN_RF1R_RFOM1</ref>;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="753" refid="group___c_a_n___private___functions_1ga7100459a95ce1b3cfe8ab15e112029fe" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="group___c_a_n___private___functions_1ga7100459a95ce1b3cfe8ab15e112029fe" kindref="member">CAN_MessagePending</ref>(<ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref>*<sp/>CANx,<sp/>uint8_t<sp/>FIFONumber)</highlight></codeline>
<codeline lineno="754"><highlight class="normal">{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/>uint8_t<sp/>message_pending=0;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" kindref="member">IS_CAN_ALL_PERIPH</ref>(CANx));</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n__receive___f_i_f_o__number__constants_1gaeeb94bf58bd48b8928f964eaaa20a24a" kindref="member">IS_CAN_FIFO</ref>(FIFONumber));</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FIFONumber<sp/>==<sp/><ref refid="group___c_a_n__receive___f_i_f_o__number__constants_1ga8f52eeefb86b2af5b7c3b4b75fa4d114" kindref="member">CAN_FIFO0</ref>)</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>message_pending<sp/>=<sp/>(uint8_t)(CANx-&gt;<ref refid="struct_c_a_n___type_def_1ad8e858479e26ab075ee2ddb630e8769d" kindref="member">RF0R</ref>&amp;(uint32_t)0x03);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FIFONumber<sp/>==<sp/><ref refid="group___c_a_n__receive___f_i_f_o__number__constants_1gafbcf3f13dbf61030ab7a812595ba9850" kindref="member">CAN_FIFO1</ref>)</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>message_pending<sp/>=<sp/>(uint8_t)(CANx-&gt;<ref refid="struct_c_a_n___type_def_1a69a528d1288c1de666df68655af1d20e" kindref="member">RF1R</ref>&amp;(uint32_t)0x03);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>message_pending<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>message_pending;</highlight></codeline>
<codeline lineno="772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="784" refid="group___c_a_n___private___functions_1gab2a3630e9e3024114eb117d14e514208" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="group___c_a_n___private___functions_1gab2a3630e9e3024114eb117d14e514208" kindref="member">CAN_OperatingModeRequest</ref>(<ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref>*<sp/>CANx,<sp/>uint8_t<sp/>CAN_OperatingMode)</highlight></codeline>
<codeline lineno="785"><highlight class="normal">{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/>uint8_t<sp/>status<sp/>=<sp/><ref refid="group___c_a_n___mode___status_1ga9882944537945325ef08e1986838ea45" kindref="member">CAN_ModeStatus_Failed</ref>;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Timeout<sp/>for<sp/>INAK<sp/>or<sp/>also<sp/>for<sp/>SLAK<sp/>bits*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/>uint32_t<sp/>timeout<sp/>=<sp/><ref refid="group___c_a_n___private___defines_1ga60a32132df242146efd3e9f7a079f0f0" kindref="member">INAK_TIMEOUT</ref>;<sp/></highlight></codeline>
<codeline lineno="790"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" kindref="member">IS_CAN_ALL_PERIPH</ref>(CANx));</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___operating___mode_1ga377f1598db9b0248ba83fa6e5a75db75" kindref="member">IS_CAN_OPERATING_MODE</ref>(CAN_OperatingMode));</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CAN_OperatingMode<sp/>==<sp/><ref refid="group___c_a_n___operating___mode_1gace8a4b5c164aba6f473d6254ad1e8a36" kindref="member">CAN_OperatingMode_Initialization</ref>)</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Request<sp/>initialisation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>=<sp/>(uint32_t)((CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>&amp;<sp/>(uint32_t)(~(uint32_t)<ref refid="group___peripheral___registers___bits___definition_1gadf9602dfb2f95b481b6e642b95991176" kindref="member">CAN_MCR_SLEEP</ref>))<sp/>|<sp/><ref refid="group___peripheral___registers___bits___definition_1ga0cf12be5661908dbe38aa14cd4c3a356" kindref="member">CAN_MCR_INRQ</ref>);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>the<sp/>acknowledge<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(((CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref><sp/>&amp;<sp/><ref refid="group___c_a_n___private___defines_1ga79094ce5a3a2f717140e8cc9b7c161b6" kindref="member">CAN_MODE_MASK</ref>)<sp/>!=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga2871cee90ebecb760bab16e9c039b682" kindref="member">CAN_MSR_INAK</ref>)<sp/>&amp;&amp;<sp/>(timeout<sp/>!=<sp/>0))</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timeout--;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref><sp/>&amp;<sp/><ref refid="group___c_a_n___private___defines_1ga79094ce5a3a2f717140e8cc9b7c161b6" kindref="member">CAN_MODE_MASK</ref>)<sp/>!=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga2871cee90ebecb760bab16e9c039b682" kindref="member">CAN_MSR_INAK</ref>)</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/><ref refid="group___c_a_n___mode___status_1ga9882944537945325ef08e1986838ea45" kindref="member">CAN_ModeStatus_Failed</ref>;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/><ref refid="group___c_a_n___mode___status_1ga7ca0ea503eb3b3a7c0abdfad27cb6579" kindref="member">CAN_ModeStatus_Success</ref>;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CAN_OperatingMode<sp/>==<sp/><ref refid="group___c_a_n___operating___mode_1ga663ecffaa60d1a201a035dfa45325848" kindref="member">CAN_OperatingMode_Normal</ref>)</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Request<sp/>leave<sp/>initialisation<sp/>and<sp/>sleep<sp/>mode<sp/><sp/>and<sp/>enter<sp/>Normal<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>&amp;=<sp/>(uint32_t)(~(<ref refid="group___peripheral___registers___bits___definition_1gadf9602dfb2f95b481b6e642b95991176" kindref="member">CAN_MCR_SLEEP</ref>|<ref refid="group___peripheral___registers___bits___definition_1ga0cf12be5661908dbe38aa14cd4c3a356" kindref="member">CAN_MCR_INRQ</ref>));</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>the<sp/>acknowledge<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(((CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref><sp/>&amp;<sp/><ref refid="group___c_a_n___private___defines_1ga79094ce5a3a2f717140e8cc9b7c161b6" kindref="member">CAN_MODE_MASK</ref>)<sp/>!=<sp/>0)<sp/>&amp;&amp;<sp/>(timeout!=0))</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timeout--;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref><sp/>&amp;<sp/><ref refid="group___c_a_n___private___defines_1ga79094ce5a3a2f717140e8cc9b7c161b6" kindref="member">CAN_MODE_MASK</ref>)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/><ref refid="group___c_a_n___mode___status_1ga9882944537945325ef08e1986838ea45" kindref="member">CAN_ModeStatus_Failed</ref>;</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/><ref refid="group___c_a_n___mode___status_1ga7ca0ea503eb3b3a7c0abdfad27cb6579" kindref="member">CAN_ModeStatus_Success</ref>;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CAN_OperatingMode<sp/>==<sp/><ref refid="group___c_a_n___operating___mode_1ga173b85d2baaa6249d966b8073e3ad8ca" kindref="member">CAN_OperatingMode_Sleep</ref>)</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Request<sp/>Sleep<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>=<sp/>(uint32_t)((CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>&amp;<sp/>(uint32_t)(~(uint32_t)<ref refid="group___peripheral___registers___bits___definition_1ga0cf12be5661908dbe38aa14cd4c3a356" kindref="member">CAN_MCR_INRQ</ref>))<sp/>|<sp/><ref refid="group___peripheral___registers___bits___definition_1gadf9602dfb2f95b481b6e642b95991176" kindref="member">CAN_MCR_SLEEP</ref>);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>the<sp/>acknowledge<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(((CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref><sp/>&amp;<sp/><ref refid="group___c_a_n___private___defines_1ga79094ce5a3a2f717140e8cc9b7c161b6" kindref="member">CAN_MODE_MASK</ref>)<sp/>!=<sp/><ref refid="group___peripheral___registers___bits___definition_1gaf1611badb362f0fd9047af965509f074" kindref="member">CAN_MSR_SLAK</ref>)<sp/>&amp;&amp;<sp/>(timeout!=0))</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timeout--;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref><sp/>&amp;<sp/><ref refid="group___c_a_n___private___defines_1ga79094ce5a3a2f717140e8cc9b7c161b6" kindref="member">CAN_MODE_MASK</ref>)<sp/>!=<sp/><ref refid="group___peripheral___registers___bits___definition_1gaf1611badb362f0fd9047af965509f074" kindref="member">CAN_MSR_SLAK</ref>)</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/><ref refid="group___c_a_n___mode___status_1ga9882944537945325ef08e1986838ea45" kindref="member">CAN_ModeStatus_Failed</ref>;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>status<sp/>=<sp/><ref refid="group___c_a_n___mode___status_1ga7ca0ea503eb3b3a7c0abdfad27cb6579" kindref="member">CAN_ModeStatus_Success</ref>;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>status<sp/>=<sp/><ref refid="group___c_a_n___mode___status_1ga9882944537945325ef08e1986838ea45" kindref="member">CAN_ModeStatus_Failed</ref>;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>(uint8_t)<sp/>status;</highlight></codeline>
<codeline lineno="858"><highlight class="normal">}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="866" refid="group___c_a_n___private___functions_1ga640215e38765759d7eceb8a039046667" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="group___c_a_n___private___functions_1ga640215e38765759d7eceb8a039046667" kindref="member">CAN_Sleep</ref>(<ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref>*<sp/>CANx)</highlight></codeline>
<codeline lineno="867"><highlight class="normal">{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>uint8_t<sp/>sleepstatus<sp/>=<sp/><ref refid="group___c_a_n__sleep__constants_1ga169500ab7169c4e9c7e9e4ea34b3e070" kindref="member">CAN_Sleep_Failed</ref>;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" kindref="member">IS_CAN_ALL_PERIPH</ref>(CANx));</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Request<sp/>Sleep<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>=<sp/>(((CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref>)<sp/>&amp;<sp/>(uint32_t)(~(uint32_t)<ref refid="group___peripheral___registers___bits___definition_1ga0cf12be5661908dbe38aa14cd4c3a356" kindref="member">CAN_MCR_INRQ</ref>))<sp/>|<sp/><ref refid="group___peripheral___registers___bits___definition_1gadf9602dfb2f95b481b6e642b95991176" kindref="member">CAN_MCR_SLEEP</ref>);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sleep<sp/>mode<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref><sp/>&amp;<sp/>(<ref refid="group___peripheral___registers___bits___definition_1gaf1611badb362f0fd9047af965509f074" kindref="member">CAN_MSR_SLAK</ref>|<ref refid="group___peripheral___registers___bits___definition_1ga2871cee90ebecb760bab16e9c039b682" kindref="member">CAN_MSR_INAK</ref>))<sp/>==<sp/><ref refid="group___peripheral___registers___bits___definition_1gaf1611badb362f0fd9047af965509f074" kindref="member">CAN_MSR_SLAK</ref>)</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sleep<sp/>mode<sp/>not<sp/>entered<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>sleepstatus<sp/>=<sp/><sp/><ref refid="group___c_a_n__sleep__constants_1gaf5c4e9d32d4faff9d0bf61e153ed7998" kindref="member">CAN_Sleep_Ok</ref>;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>return<sp/>sleep<sp/>mode<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)sleepstatus;</highlight></codeline>
<codeline lineno="884"><highlight class="normal">}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="892" refid="group___c_a_n___private___functions_1ga78cdfbf1884b9e33c552bcbca15bed10" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="group___c_a_n___private___functions_1ga78cdfbf1884b9e33c552bcbca15bed10" kindref="member">CAN_WakeUp</ref>(<ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref>*<sp/>CANx)</highlight></codeline>
<codeline lineno="893"><highlight class="normal">{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>uint32_t<sp/>wait_slak<sp/>=<sp/><ref refid="group___c_a_n___private___defines_1ga1bb8107706c8b4039ac55a122f3c65bb" kindref="member">SLAK_TIMEOUT</ref>;</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/>uint8_t<sp/>wakeupstatus<sp/>=<sp/><ref refid="group___c_a_n__wake__up__constants_1ga837fd7ad47fee78e43a186544e2b390b" kindref="member">CAN_WakeUp_Failed</ref>;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" kindref="member">IS_CAN_ALL_PERIPH</ref>(CANx));</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wake<sp/>up<sp/>request<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a1282eee79a22003257a7a5daa7f4a35f" kindref="member">MCR</ref><sp/>&amp;=<sp/>~(uint32_t)<ref refid="group___peripheral___registers___bits___definition_1gadf9602dfb2f95b481b6e642b95991176" kindref="member">CAN_MCR_SLEEP</ref>;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sleep<sp/>mode<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(((CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref><sp/>&amp;<sp/><ref refid="group___peripheral___registers___bits___definition_1gaf1611badb362f0fd9047af965509f074" kindref="member">CAN_MSR_SLAK</ref>)<sp/>==<sp/><ref refid="group___peripheral___registers___bits___definition_1gaf1611badb362f0fd9047af965509f074" kindref="member">CAN_MSR_SLAK</ref>)&amp;&amp;(wait_slak!=0x00))</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/>wait_slak--;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref><sp/>&amp;<sp/><ref refid="group___peripheral___registers___bits___definition_1gaf1611badb362f0fd9047af965509f074" kindref="member">CAN_MSR_SLAK</ref>)<sp/>!=<sp/><ref refid="group___peripheral___registers___bits___definition_1gaf1611badb362f0fd9047af965509f074" kindref="member">CAN_MSR_SLAK</ref>)</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>wake<sp/>up<sp/>done<sp/>:<sp/>Sleep<sp/>mode<sp/>exited<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>wakeupstatus<sp/>=<sp/><ref refid="group___c_a_n__wake__up__constants_1ga152e4935cf85bdfb803eb36b656cd690" kindref="member">CAN_WakeUp_Ok</ref>;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>return<sp/>wakeup<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint8_t)wakeupstatus;</highlight></codeline>
<codeline lineno="915"><highlight class="normal">}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="932" refid="group___c_a_n___private___functions_1gaaee721a392b6b21bfd15dc160aeb6924" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="group___c_a_n___private___functions_1gaaee721a392b6b21bfd15dc160aeb6924" kindref="member">CAN_GetLastErrorCode</ref>(<ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref>*<sp/>CANx)</highlight></codeline>
<codeline lineno="933"><highlight class="normal">{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>uint8_t<sp/>errorcode=0;</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" kindref="member">IS_CAN_ALL_PERIPH</ref>(CANx));</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>error<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>errorcode<sp/>=<sp/>(((uint8_t)CANx-&gt;<ref refid="struct_c_a_n___type_def_1ab1a1b6a7c587443a03d654d3b9a94423" kindref="member">ESR</ref>)<sp/>&amp;<sp/>(uint8_t)<ref refid="group___peripheral___registers___bits___definition_1gab9f86741dd89034900e300499ae2272e" kindref="member">CAN_ESR_LEC</ref>);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>error<sp/>code*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>errorcode;</highlight></codeline>
<codeline lineno="944"><highlight class="normal">}</highlight></codeline>
<codeline lineno="956" refid="group___c_a_n___private___functions_1ga6903eecbec40eb1361d915ddde9a3274" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="group___c_a_n___private___functions_1ga6903eecbec40eb1361d915ddde9a3274" kindref="member">CAN_GetReceiveErrorCounter</ref>(<ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref>*<sp/>CANx)</highlight></codeline>
<codeline lineno="957"><highlight class="normal">{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>uint8_t<sp/>counter=0;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" kindref="member">IS_CAN_ALL_PERIPH</ref>(CANx));</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>Receive<sp/>Error<sp/>Counter*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>counter<sp/>=<sp/>(uint8_t)((CANx-&gt;<ref refid="struct_c_a_n___type_def_1ab1a1b6a7c587443a03d654d3b9a94423" kindref="member">ESR</ref><sp/>&amp;<sp/><ref refid="group___peripheral___registers___bits___definition_1ga0df5b2ea3f419182e9bd885f55ee5dc9" kindref="member">CAN_ESR_REC</ref>)&gt;&gt;<sp/>24);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>Receive<sp/>Error<sp/>Counter*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>counter;</highlight></codeline>
<codeline lineno="968"><highlight class="normal">}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="976" refid="group___c_a_n___private___functions_1ga85ee0c35bf7ca15d4e4c862eef534843" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="group___c_a_n___private___functions_1ga85ee0c35bf7ca15d4e4c862eef534843" kindref="member">CAN_GetLSBTransmitErrorCounter</ref>(<ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref>*<sp/>CANx)</highlight></codeline>
<codeline lineno="977"><highlight class="normal">{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>uint8_t<sp/>counter=0;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" kindref="member">IS_CAN_ALL_PERIPH</ref>(CANx));</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>LSB<sp/>of<sp/>the<sp/>9-bit<sp/>CANx<sp/>Transmit<sp/>Error<sp/>Counter(TEC)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/>counter<sp/>=<sp/>(uint8_t)((CANx-&gt;<ref refid="struct_c_a_n___type_def_1ab1a1b6a7c587443a03d654d3b9a94423" kindref="member">ESR</ref><sp/>&amp;<sp/><ref refid="group___peripheral___registers___bits___definition_1gae3de2080f48cc851c20d920acfd1737d" kindref="member">CAN_ESR_TEC</ref>)&gt;&gt;<sp/>16);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>LSB<sp/>of<sp/>the<sp/>9-bit<sp/>CANx<sp/>Transmit<sp/>Error<sp/>Counter(TEC)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>counter;</highlight></codeline>
<codeline lineno="988"><highlight class="normal">}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013" refid="group___c_a_n___private___functions_1gad1a8b2499a780b5bfa4accb3597b02f4" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n___private___functions_1gad1a8b2499a780b5bfa4accb3597b02f4" kindref="member">CAN_ITConfig</ref>(<ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref>*<sp/>CANx,<sp/>uint32_t<sp/>CAN_IT,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="1014"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" kindref="member">IS_CAN_ALL_PERIPH</ref>(CANx));</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n__interrupts_1gac0a9467bb0028c5fcd15a8a0ec6aaecb" kindref="member">IS_CAN_IT</ref>(CAN_IT));</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>selected<sp/>CANx<sp/>interrupt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a530babbc4b9584c93a1bf87d6ce8b8dc" kindref="member">IER</ref><sp/>|=<sp/>CAN_IT;</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>selected<sp/>CANx<sp/>interrupt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a530babbc4b9584c93a1bf87d6ce8b8dc" kindref="member">IER</ref><sp/>&amp;=<sp/>~CAN_IT;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1053" refid="group___c_a_n___private___functions_1ga2faad96caf823ef463cc5b5b25c480bb" refkind="member"><highlight class="normal"><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref><sp/><ref refid="group___c_a_n___private___functions_1ga2faad96caf823ef463cc5b5b25c480bb" kindref="member">CAN_GetFlagStatus</ref>(<ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref>*<sp/>CANx,<sp/>uint32_t<sp/>CAN_FLAG)</highlight></codeline>
<codeline lineno="1054"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" kindref="member">IS_CAN_ALL_PERIPH</ref>(CANx));</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n__flags_1ga38d33d1762ed3a331d214cdb3249866e" kindref="member">IS_CAN_GET_FLAG</ref>(CAN_FLAG));</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((CAN_FLAG<sp/>&amp;<sp/><ref refid="group___c_a_n___private___defines_1ga14f7bb0b320da21443c9bd60b1f86b5d" kindref="member">CAN_FLAGS_ESR</ref>)<sp/>!=<sp/>(uint32_t)<ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>)</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>status<sp/>of<sp/>the<sp/>specified<sp/>CAN<sp/>flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((CANx-&gt;<ref refid="struct_c_a_n___type_def_1ab1a1b6a7c587443a03d654d3b9a94423" kindref="member">ESR</ref><sp/>&amp;<sp/>(CAN_FLAG<sp/>&amp;<sp/>0x000FFFFF))<sp/>!=<sp/>(uint32_t)RESET)</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CAN_FLAG<sp/>is<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" kindref="member">SET</ref>;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CAN_FLAG<sp/>is<sp/>reset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((CAN_FLAG<sp/>&amp;<sp/><ref refid="group___c_a_n___private___defines_1ga3aaa7df395ce1a90cb6e2ff3d2c4b24e" kindref="member">CAN_FLAGS_MSR</ref>)<sp/>!=<sp/>(uint32_t)RESET)</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>status<sp/>of<sp/>the<sp/>specified<sp/>CAN<sp/>flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref><sp/>&amp;<sp/>(CAN_FLAG<sp/>&amp;<sp/>0x000FFFFF))<sp/>!=<sp/>(uint32_t)RESET)</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CAN_FLAG<sp/>is<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" kindref="member">SET</ref>;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CAN_FLAG<sp/>is<sp/>reset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((CAN_FLAG<sp/>&amp;<sp/><ref refid="group___c_a_n___private___defines_1gac67e7d905ba11441bf9e14180805cf3a" kindref="member">CAN_FLAGS_TSR</ref>)<sp/>!=<sp/>(uint32_t)RESET)</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>status<sp/>of<sp/>the<sp/>specified<sp/>CAN<sp/>flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((CANx-&gt;<ref refid="struct_c_a_n___type_def_1acbc82ac4e87e75350fc586be5e56d95b" kindref="member">TSR</ref><sp/>&amp;<sp/>(CAN_FLAG<sp/>&amp;<sp/>0x000FFFFF))<sp/>!=<sp/>(uint32_t)RESET)</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CAN_FLAG<sp/>is<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" kindref="member">SET</ref>;</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CAN_FLAG<sp/>is<sp/>reset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((CAN_FLAG<sp/>&amp;<sp/><ref refid="group___c_a_n___private___defines_1ga4b22b2552759778ac07825240823a45f" kindref="member">CAN_FLAGS_RF0R</ref>)<sp/>!=<sp/>(uint32_t)RESET)</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>status<sp/>of<sp/>the<sp/>specified<sp/>CAN<sp/>flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((CANx-&gt;<ref refid="struct_c_a_n___type_def_1ad8e858479e26ab075ee2ddb630e8769d" kindref="member">RF0R</ref><sp/>&amp;<sp/>(CAN_FLAG<sp/>&amp;<sp/>0x000FFFFF))<sp/>!=<sp/>(uint32_t)RESET)</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CAN_FLAG<sp/>is<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" kindref="member">SET</ref>;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CAN_FLAG<sp/>is<sp/>reset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>If(CAN_FLAG<sp/>&amp;<sp/>CAN_FLAGS_RF1R<sp/>!=<sp/>(uint32_t)RESET)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>status<sp/>of<sp/>the<sp/>specified<sp/>CAN<sp/>flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((uint32_t)(CANx-&gt;<ref refid="struct_c_a_n___type_def_1a69a528d1288c1de666df68655af1d20e" kindref="member">RF1R</ref><sp/>&amp;<sp/>(CAN_FLAG<sp/>&amp;<sp/>0x000FFFFF))<sp/>!=<sp/>(uint32_t)RESET)</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CAN_FLAG<sp/>is<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" kindref="member">SET</ref>;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CAN_FLAG<sp/>is<sp/>reset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>CAN_FLAG<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>bitstatus;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153" refid="group___c_a_n___private___functions_1ga2c01646d5d3a2d7045e8dd71f58f8742" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n___private___functions_1ga2c01646d5d3a2d7045e8dd71f58f8742" kindref="member">CAN_ClearFlag</ref>(<ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref>*<sp/>CANx,<sp/>uint32_t<sp/>CAN_FLAG)</highlight></codeline>
<codeline lineno="1154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>uint32_t<sp/>flagtmp=0;</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" kindref="member">IS_CAN_ALL_PERIPH</ref>(CANx));</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n__flags_1gac46f5fb953efb6163cf3b2e33a514d0c" kindref="member">IS_CAN_CLEAR_FLAG</ref>(CAN_FLAG));</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(CAN_FLAG<sp/>==<sp/><ref refid="group___c_a_n__flags_1ga73a774fa4d391aec0ea6552bf9372917" kindref="member">CAN_FLAG_LEC</ref>)<sp/></highlight><highlight class="comment">/*<sp/>ESR<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>selected<sp/>CAN<sp/>flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1ab1a1b6a7c587443a03d654d3b9a94423" kindref="member">ESR</ref><sp/>=<sp/>(uint32_t)<ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>MSR<sp/>or<sp/>TSR<sp/>or<sp/>RF0R<sp/>or<sp/>RF1R<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>flagtmp<sp/>=<sp/>CAN_FLAG<sp/>&amp;<sp/>0x000FFFFF;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((CAN_FLAG<sp/>&amp;<sp/><ref refid="group___c_a_n___private___defines_1ga4b22b2552759778ac07825240823a45f" kindref="member">CAN_FLAGS_RF0R</ref>)!=(uint32_t)<ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>)</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Receive<sp/>Flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1ad8e858479e26ab075ee2ddb630e8769d" kindref="member">RF0R</ref><sp/>=<sp/>(uint32_t)(flagtmp);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((CAN_FLAG<sp/>&amp;<sp/><ref refid="group___c_a_n___private___defines_1ga2a03d73273ab353c8deb3a4730431977" kindref="member">CAN_FLAGS_RF1R</ref>)!=(uint32_t)<ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>)</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Receive<sp/>Flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a69a528d1288c1de666df68655af1d20e" kindref="member">RF1R</ref><sp/>=<sp/>(uint32_t)(flagtmp);</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((CAN_FLAG<sp/>&amp;<sp/><ref refid="group___c_a_n___private___defines_1gac67e7d905ba11441bf9e14180805cf3a" kindref="member">CAN_FLAGS_TSR</ref>)!=(uint32_t)<ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>)</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Transmit<sp/>Flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1acbc82ac4e87e75350fc586be5e56d95b" kindref="member">TSR</ref><sp/>=<sp/>(uint32_t)(flagtmp);</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>If((CAN_FLAG<sp/>&amp;<sp/>CAN_FLAGS_MSR)!=(uint32_t)RESET)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Operating<sp/>mode<sp/>Flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref><sp/>=<sp/>(uint32_t)(flagtmp);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213" refid="group___c_a_n___private___functions_1ga9aca05b3013e1b3438f3559f80b33c82" refkind="member"><highlight class="normal"><ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref><sp/><ref refid="group___c_a_n___private___functions_1ga9aca05b3013e1b3438f3559f80b33c82" kindref="member">CAN_GetITStatus</ref>(<ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref>*<sp/>CANx,<sp/>uint32_t<sp/>CAN_IT)</highlight></codeline>
<codeline lineno="1214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref><sp/>itstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" kindref="member">IS_CAN_ALL_PERIPH</ref>(CANx));</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n__interrupts_1gac0a9467bb0028c5fcd15a8a0ec6aaecb" kindref="member">IS_CAN_IT</ref>(CAN_IT));</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>check<sp/>the<sp/>enable<sp/>interrupt<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((CANx-&gt;<ref refid="struct_c_a_n___type_def_1a530babbc4b9584c93a1bf87d6ce8b8dc" kindref="member">IER</ref><sp/>&amp;<sp/>CAN_IT)<sp/>!=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>)</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>in<sp/>case<sp/>the<sp/>Interrupt<sp/>is<sp/>enabled,<sp/>....<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(CAN_IT)</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1ga619e36230fa2eb089a7c1936b5004eb9" kindref="member">CAN_IT_TME</ref>:</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>CAN_TSR_RQCPx<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itstatus<sp/>=<sp/>CheckITStatus(CANx-&gt;<ref refid="struct_c_a_n___type_def_1acbc82ac4e87e75350fc586be5e56d95b" kindref="member">TSR</ref>,<sp/><ref refid="group___peripheral___registers___bits___definition_1ga4a4809b8908618df57e6393cc7fe0f52" kindref="member">CAN_TSR_RQCP0</ref>|<ref refid="group___peripheral___registers___bits___definition_1gabd3118dec59c3a45d2f262b090699538" kindref="member">CAN_TSR_RQCP1</ref>|<ref refid="group___peripheral___registers___bits___definition_1ga3cf9e83cec96164f1dadf4e43411ebf0" kindref="member">CAN_TSR_RQCP2</ref>);<sp/><sp/></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1ga3fe6fbf53e9d692957e87ad329bcd362" kindref="member">CAN_IT_FMP0</ref>:</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>CAN_RF0R_FMP0<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itstatus<sp/>=<sp/>CheckITStatus(CANx-&gt;<ref refid="struct_c_a_n___type_def_1ad8e858479e26ab075ee2ddb630e8769d" kindref="member">RF0R</ref>,<sp/><ref refid="group___peripheral___registers___bits___definition_1ga9e23f3d7947e58531524d77b5c4741cc" kindref="member">CAN_RF0R_FMP0</ref>);<sp/><sp/></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1gabf63043d9216de80ddc7ffe57b23ef67" kindref="member">CAN_IT_FF0</ref>:</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>CAN_RF0R_FULL0<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itstatus<sp/>=<sp/>CheckITStatus(CANx-&gt;<ref refid="struct_c_a_n___type_def_1ad8e858479e26ab075ee2ddb630e8769d" kindref="member">RF0R</ref>,<sp/><ref refid="group___peripheral___registers___bits___definition_1gae934674f6e22a758e430f32cfc386d70" kindref="member">CAN_RF0R_FULL0</ref>);<sp/><sp/></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1ga066a4317f95669e5b5931c9a759cf248" kindref="member">CAN_IT_FOV0</ref>:</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>CAN_RF0R_FOVR0<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itstatus<sp/>=<sp/>CheckITStatus(CANx-&gt;<ref refid="struct_c_a_n___type_def_1ad8e858479e26ab075ee2ddb630e8769d" kindref="member">RF0R</ref>,<sp/><ref refid="group___peripheral___registers___bits___definition_1ga2a3d15b3abab8199c16e26a3dffdc8b8" kindref="member">CAN_RF0R_FOVR0</ref>);<sp/><sp/></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1gaa0e101053fb203629e0e9a954213e71e" kindref="member">CAN_IT_FMP1</ref>:</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>CAN_RF1R_FMP1<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itstatus<sp/>=<sp/>CheckITStatus(CANx-&gt;<ref refid="struct_c_a_n___type_def_1a69a528d1288c1de666df68655af1d20e" kindref="member">RF1R</ref>,<sp/><ref refid="group___peripheral___registers___bits___definition_1ga8f9254d05043df6f21bf96234a03f72f" kindref="member">CAN_RF1R_FMP1</ref>);<sp/><sp/></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1ga93b86d884ce0624b4b36c991fd75fc1c" kindref="member">CAN_IT_FF1</ref>:</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>CAN_RF1R_FULL1<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itstatus<sp/>=<sp/>CheckITStatus(CANx-&gt;<ref refid="struct_c_a_n___type_def_1a69a528d1288c1de666df68655af1d20e" kindref="member">RF1R</ref>,<sp/><ref refid="group___peripheral___registers___bits___definition_1gabdaa12fe4d14254cc4a6a4de749a7d0a" kindref="member">CAN_RF1R_FULL1</ref>);<sp/><sp/></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1ga963301fdbede5f9a9665dc5b6210eaec" kindref="member">CAN_IT_FOV1</ref>:</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>CAN_RF1R_FOVR1<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itstatus<sp/>=<sp/>CheckITStatus(CANx-&gt;<ref refid="struct_c_a_n___type_def_1a69a528d1288c1de666df68655af1d20e" kindref="member">RF1R</ref>,<sp/><ref refid="group___peripheral___registers___bits___definition_1gab5eeaabd4db3825bc53d860aca8d7590" kindref="member">CAN_RF1R_FOVR1</ref>);<sp/><sp/></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1gac9c8767770d94de753dda9ad31f9af15" kindref="member">CAN_IT_WKU</ref>:</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>CAN_MSR_WKUI<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itstatus<sp/>=<sp/>CheckITStatus(CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref>,<sp/><ref refid="group___peripheral___registers___bits___definition_1ga0f4c753b96d21c5001b39ad5b08519fc" kindref="member">CAN_MSR_WKUI</ref>);<sp/><sp/></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1ga639d4ab2777d9a2f8b7e67071b091059" kindref="member">CAN_IT_SLK</ref>:</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>CAN_MSR_SLAKI<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itstatus<sp/>=<sp/>CheckITStatus(CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref>,<sp/><ref refid="group___peripheral___registers___bits___definition_1ga47ab62ae123c791de27ad05dde5bee91" kindref="member">CAN_MSR_SLAKI</ref>);<sp/><sp/></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1ga8a9f04ddf6ebe169d32b951a8ea135b3" kindref="member">CAN_IT_EWG</ref>:</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>CAN_ESR_EWGF<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itstatus<sp/>=<sp/>CheckITStatus(CANx-&gt;<ref refid="struct_c_a_n___type_def_1ab1a1b6a7c587443a03d654d3b9a94423" kindref="member">ESR</ref>,<sp/><ref refid="group___peripheral___registers___bits___definition_1ga2c0c02829fb41ac2a1b1852c19931de8" kindref="member">CAN_ESR_EWGF</ref>);<sp/><sp/></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1ga006b7b641d337a599ceac64b483e75dd" kindref="member">CAN_IT_EPV</ref>:</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>CAN_ESR_EPVF<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itstatus<sp/>=<sp/>CheckITStatus(CANx-&gt;<ref refid="struct_c_a_n___type_def_1ab1a1b6a7c587443a03d654d3b9a94423" kindref="member">ESR</ref>,<sp/><ref refid="group___peripheral___registers___bits___definition_1ga633c961d528cbf8093b0e05e92225ff0" kindref="member">CAN_ESR_EPVF</ref>);<sp/><sp/></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1gad63c39e6237aa07681a1f8ce2ff9e167" kindref="member">CAN_IT_BOF</ref>:</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>CAN_ESR_BOFF<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itstatus<sp/>=<sp/>CheckITStatus(CANx-&gt;<ref refid="struct_c_a_n___type_def_1ab1a1b6a7c587443a03d654d3b9a94423" kindref="member">ESR</ref>,<sp/><ref refid="group___peripheral___registers___bits___definition_1ga619d49f67f1835a7efc457205fea1225" kindref="member">CAN_ESR_BOFF</ref>);<sp/><sp/></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1gad670b6f001bf67f24e17d91ada50a61c" kindref="member">CAN_IT_LEC</ref>:</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>CAN_ESR_LEC<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itstatus<sp/>=<sp/>CheckITStatus(CANx-&gt;<ref refid="struct_c_a_n___type_def_1ab1a1b6a7c587443a03d654d3b9a94423" kindref="member">ESR</ref>,<sp/><ref refid="group___peripheral___registers___bits___definition_1gab9f86741dd89034900e300499ae2272e" kindref="member">CAN_ESR_LEC</ref>);<sp/><sp/></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1ga65f1781c9165a2e9b5f77f1ed3990741" kindref="member">CAN_IT_ERR</ref>:</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>CAN_MSR_ERRI<sp/>bit<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itstatus<sp/>=<sp/>CheckITStatus(CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref>,<sp/><ref refid="group___peripheral___registers___bits___definition_1ga9c424768e9e963402f37cb95ae87a1ae" kindref="member">CAN_MSR_ERRI</ref>);<sp/></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default<sp/>:</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>in<sp/>case<sp/>of<sp/>error,<sp/>return<sp/>RESET<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>in<sp/>case<sp/>the<sp/>Interrupt<sp/>is<sp/>not<sp/>enabled,<sp/>return<sp/>RESET<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>itstatus<sp/><sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>CAN_IT<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>itstatus;</highlight></codeline>
<codeline lineno="1296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316" refid="group___c_a_n___private___functions_1ga30bf7ac0c1793f6622a4a1adbb7dbc8a" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n___private___functions_1ga30bf7ac0c1793f6622a4a1adbb7dbc8a" kindref="member">CAN_ClearITPendingBit</ref>(<ref refid="struct_c_a_n___type_def" kindref="compound">CAN_TypeDef</ref>*<sp/>CANx,<sp/>uint32_t<sp/>CAN_IT)</highlight></codeline>
<codeline lineno="1317"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n___exported___types_1gaf471a53f52a02078ffd842658d932f63" kindref="member">IS_CAN_ALL_PERIPH</ref>(CANx));</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___c_a_n__interrupts_1ga8b6e5fd6ddfe0141925f1e22cfbe7b85" kindref="member">IS_CAN_CLEAR_IT</ref>(CAN_IT));</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(CAN_IT)</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1ga619e36230fa2eb089a7c1936b5004eb9" kindref="member">CAN_IT_TME</ref>:</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>CAN_TSR_RQCPx<sp/>(rc_w1)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1acbc82ac4e87e75350fc586be5e56d95b" kindref="member">TSR</ref><sp/>=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga4a4809b8908618df57e6393cc7fe0f52" kindref="member">CAN_TSR_RQCP0</ref>|<ref refid="group___peripheral___registers___bits___definition_1gabd3118dec59c3a45d2f262b090699538" kindref="member">CAN_TSR_RQCP1</ref>|<ref refid="group___peripheral___registers___bits___definition_1ga3cf9e83cec96164f1dadf4e43411ebf0" kindref="member">CAN_TSR_RQCP2</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1gabf63043d9216de80ddc7ffe57b23ef67" kindref="member">CAN_IT_FF0</ref>:</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>CAN_RF0R_FULL0<sp/>(rc_w1)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1ad8e858479e26ab075ee2ddb630e8769d" kindref="member">RF0R</ref><sp/>=<sp/><ref refid="group___peripheral___registers___bits___definition_1gae934674f6e22a758e430f32cfc386d70" kindref="member">CAN_RF0R_FULL0</ref>;<sp/></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1ga066a4317f95669e5b5931c9a759cf248" kindref="member">CAN_IT_FOV0</ref>:</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>CAN_RF0R_FOVR0<sp/>(rc_w1)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1ad8e858479e26ab075ee2ddb630e8769d" kindref="member">RF0R</ref><sp/>=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga2a3d15b3abab8199c16e26a3dffdc8b8" kindref="member">CAN_RF0R_FOVR0</ref>;<sp/></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1ga93b86d884ce0624b4b36c991fd75fc1c" kindref="member">CAN_IT_FF1</ref>:</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>CAN_RF1R_FULL1<sp/>(rc_w1)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a69a528d1288c1de666df68655af1d20e" kindref="member">RF1R</ref><sp/>=<sp/><ref refid="group___peripheral___registers___bits___definition_1gabdaa12fe4d14254cc4a6a4de749a7d0a" kindref="member">CAN_RF1R_FULL1</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1ga963301fdbede5f9a9665dc5b6210eaec" kindref="member">CAN_IT_FOV1</ref>:</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>CAN_RF1R_FOVR1<sp/>(rc_w1)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1a69a528d1288c1de666df68655af1d20e" kindref="member">RF1R</ref><sp/>=<sp/><ref refid="group___peripheral___registers___bits___definition_1gab5eeaabd4db3825bc53d860aca8d7590" kindref="member">CAN_RF1R_FOVR1</ref>;<sp/></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1gac9c8767770d94de753dda9ad31f9af15" kindref="member">CAN_IT_WKU</ref>:</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>CAN_MSR_WKUI<sp/>(rc_w1)*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref><sp/>=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga0f4c753b96d21c5001b39ad5b08519fc" kindref="member">CAN_MSR_WKUI</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1ga639d4ab2777d9a2f8b7e67071b091059" kindref="member">CAN_IT_SLK</ref>:</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>CAN_MSR_SLAKI<sp/>(rc_w1)*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref><sp/>=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga47ab62ae123c791de27ad05dde5bee91" kindref="member">CAN_MSR_SLAKI</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1ga8a9f04ddf6ebe169d32b951a8ea135b3" kindref="member">CAN_IT_EWG</ref>:</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>CAN_MSR_ERRI<sp/>(rc_w1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref><sp/>=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga9c424768e9e963402f37cb95ae87a1ae" kindref="member">CAN_MSR_ERRI</ref>;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note<sp/>:<sp/>the<sp/>corresponding<sp/>Flag<sp/>is<sp/>cleared<sp/>by<sp/>hardware<sp/>depending<sp/></highlight></codeline>
<codeline lineno="1356"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>CAN<sp/>Bus<sp/>status*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1ga006b7b641d337a599ceac64b483e75dd" kindref="member">CAN_IT_EPV</ref>:</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>CAN_MSR_ERRI<sp/>(rc_w1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref><sp/>=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga9c424768e9e963402f37cb95ae87a1ae" kindref="member">CAN_MSR_ERRI</ref>;<sp/></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note<sp/>:<sp/>the<sp/>corresponding<sp/>Flag<sp/>is<sp/>cleared<sp/>by<sp/>hardware<sp/>depending<sp/></highlight></codeline>
<codeline lineno="1362"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>CAN<sp/>Bus<sp/>status*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1gad63c39e6237aa07681a1f8ce2ff9e167" kindref="member">CAN_IT_BOF</ref>:</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>CAN_MSR_ERRI<sp/>(rc_w1)<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref><sp/>=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga9c424768e9e963402f37cb95ae87a1ae" kindref="member">CAN_MSR_ERRI</ref>;<sp/></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note<sp/>:<sp/>the<sp/>corresponding<sp/>Flag<sp/>is<sp/>cleared<sp/>by<sp/>hardware<sp/>depending<sp/></highlight></codeline>
<codeline lineno="1368"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>CAN<sp/>Bus<sp/>status*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1gad670b6f001bf67f24e17d91ada50a61c" kindref="member">CAN_IT_LEC</ref>:</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>Clear<sp/>LEC<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1ab1a1b6a7c587443a03d654d3b9a94423" kindref="member">ESR</ref><sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;<sp/></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>CAN_MSR_ERRI<sp/>(rc_w1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref><sp/>=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga9c424768e9e963402f37cb95ae87a1ae" kindref="member">CAN_MSR_ERRI</ref>;<sp/></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="group___c_a_n__interrupts_1ga65f1781c9165a2e9b5f77f1ed3990741" kindref="member">CAN_IT_ERR</ref>:</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Clear<sp/>LEC<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1ab1a1b6a7c587443a03d654d3b9a94423" kindref="member">ESR</ref><sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;<sp/></highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>CAN_MSR_ERRI<sp/>(rc_w1)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CANx-&gt;<ref refid="struct_c_a_n___type_def_1af98b957a4e887751fbd407d3e2cf93b5" kindref="member">MSR</ref><sp/>=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga9c424768e9e963402f37cb95ae87a1ae" kindref="member">CAN_MSR_ERRI</ref>;<sp/></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note<sp/>:<sp/>BOFF,<sp/>EPVF<sp/>and<sp/>EWGF<sp/>Flags<sp/>are<sp/>cleared<sp/>by<sp/>hardware<sp/>depending<sp/></highlight></codeline>
<codeline lineno="1382"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>CAN<sp/>Bus<sp/>status*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>default<sp/>:</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref><sp/>CheckITStatus(uint32_t<sp/>CAN_Reg,<sp/>uint32_t<sp/>It_Bit)</highlight></codeline>
<codeline lineno="1396"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref><sp/>pendingbitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((CAN_Reg<sp/>&amp;<sp/>It_Bit)<sp/>!=<sp/>(uint32_t)<ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>)</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CAN_IT<sp/>is<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>pendingbitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" kindref="member">SET</ref>;</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CAN_IT<sp/>is<sp/>reset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/>pendingbitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pendingbitstatus;</highlight></codeline>
<codeline lineno="1410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="comment">/*******************<sp/>(C)<sp/>COPYRIGHT<sp/>2011<sp/>STMicroelectronics<sp/>*****END<sp/>OF<sp/>FILE****/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_can.c"/>
  </compounddef>
</doxygen>
