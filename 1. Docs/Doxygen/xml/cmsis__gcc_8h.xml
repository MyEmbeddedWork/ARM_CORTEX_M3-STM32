<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="cmsis__gcc_8h" kind="file" language="C++">
    <compoundname>cmsis_gcc.h</compoundname>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___c_m_s_i_s___core___instruction_interface_1gabc17e391c13c71702366c67cba39c276" prot="public" static="no">
        <name>__CMSIS_GCC_OUT_REG</name>
        <param><defname>r</defname></param>
        <initializer>&quot;=r&quot; (r)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_gcc.h" line="365" column="10" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_gcc.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_m_s_i_s___core___instruction_interface_1ga9d94dee7402367961d2cf0accc00fd97" prot="public" static="no">
        <name>__CMSIS_GCC_USE_REG</name>
        <param><defname>r</defname></param>
        <initializer>&quot;r&quot; (r)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_gcc.h" line="366" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_gcc.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_m_s_i_s___core___instruction_interface_1ga15ea6bd3c507d3e81c3b3a1258e46397" prot="public" static="no">
        <name>__BKPT</name>
        <param><defname>value</defname></param>
        <initializer>__ASM <ref refid="semihosting_8h_1a65e6ad7ed1b130fda2cf7f6a0861fca9" kindref="member">volatile</ref> (&quot;bkpt &quot;#value)</initializer>
        <briefdescription>
<para>Breakpoint. </para>        </briefdescription>
        <detaileddescription>
<para>Causes the processor to enter Debug state. Debug tools can use this to investigate system state when the instruction at a particular address is reached. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>is ignored by the processor. If required, a debugger can use it to store additional information about the breakpoint. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_gcc.h" line="517" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_gcc.h" bodystart="517" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_m_s_i_s___core___instruction_interface_1ga5d5bb1527e042be4a9fa5a33f65cc248" prot="public" static="no">
        <name>__CLZ</name>
        <initializer>__builtin_clz</initializer>
        <briefdescription>
<para>Count leading zeros. </para>        </briefdescription>
        <detaileddescription>
<para>Counts the number of leading zeros of a data value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to count the leading zeros </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of leading zeros in value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_gcc.h" line="554" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_gcc.h" bodystart="554" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t op2</definition>
        <argsstring></argsstring>
        <name>op2</name>
        <initializer>{
  return (op1 &gt;&gt; op2) | (op1 &lt;&lt; (32U - op2))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_gcc.h" line="504" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_gcc.h" bodystart="505" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>__attribute__</definition>
        <argsstring>((always_inline)) __STATIC_INLINE void __enable_irq(void)</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(always_inline)</type>
        </param>
        <briefdescription>
<para>Enable IRQ Interrupts. </para>        </briefdescription>
        <detaileddescription>
<para>Set Priority Mask.</para><para>Get Priority Mask.</para><para>Set Main Stack Pointer.</para><para>Get Main Stack Pointer.</para><para>Set Process Stack Pointer.</para><para>Get Process Stack Pointer.</para><para>Get xPSR Register.</para><para>Get APSR Register.</para><para>Get IPSR Register.</para><para>Set Control Register.</para><para>Get Control Register.</para><para>Disable IRQ Interrupts.</para><para>Enables IRQ interrupts by clearing the I-bit in the CPSR. Can only be executed in Privileged modes.</para><para>Disables IRQ interrupts by setting the I-bit in the CPSR. Can only be executed in Privileged modes.</para><para>Returns the content of the Control Register. <simplesect kind="return"><para>Control Register value</para></simplesect>
Writes the given value to the Control Register. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">control</parametername>
</parameternamelist>
<parameterdescription>
<para>Control Register value to set</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns the content of the IPSR Register. <simplesect kind="return"><para>IPSR Register value</para></simplesect>
Returns the content of the APSR Register. <simplesect kind="return"><para>APSR Register value</para></simplesect>
Returns the content of the xPSR Register. <simplesect kind="return"><para>xPSR Register value</para></simplesect>
Returns the current value of the Process Stack Pointer (PSP). <simplesect kind="return"><para>PSP Register value</para></simplesect>
Assigns the given value to the Process Stack Pointer (PSP). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">topOfProcStack</parametername>
</parameternamelist>
<parameterdescription>
<para>Process Stack Pointer value to set</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns the current value of the Main Stack Pointer (MSP). <simplesect kind="return"><para>MSP Register value</para></simplesect>
Assigns the given value to the Main Stack Pointer (MSP). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">topOfMainStack</parametername>
</parameternamelist>
<parameterdescription>
<para>Main Stack Pointer value to set</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns the current state of the priority mask bit from the Priority Mask Register. <simplesect kind="return"><para>Priority Mask value</para></simplesect>
Assigns the given value to the Priority Mask Register. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">priMask</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority Mask </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" line="50" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" bodystart="50" bodyend="53"/>
        <references refid="group___c_m_s_i_s___core___reg_acc_functions_1ga5fe64567d5bf0a81c118374e9a3a4598" compoundref="cmsis__armcc_8h" startline="57" endline="61">__get_CONTROL</references>
        <references refid="group___c_m_s_i_s___core___reg_acc_functions_1ga558df7eeb0a34765e0b54d9853d08484" compoundref="cmsis__armcc_8h" startline="69" endline="73">__set_CONTROL</references>
        <references refid="group___c_m_s_i_s___core___reg_acc_functions_1ga2c18685a915eb9b7513a907c2b866636" compoundref="cmsis__armcc_8h" startline="81" endline="85">__get_IPSR</references>
        <references refid="group___c_m_s_i_s___core___reg_acc_functions_1gaf082254959c727c663f2334021f1a98a" compoundref="cmsis__armcc_8h" startline="93" endline="97">__get_APSR</references>
        <references refid="group___c_m_s_i_s___core___reg_acc_functions_1ga94c675a736d4754a5f73d8748b24aa11" compoundref="cmsis__armcc_8h" startline="105" endline="109">__get_xPSR</references>
        <references refid="group___c_m_s_i_s___core___reg_acc_functions_1ga0c569cbb49336f8d638686f9103047aa" compoundref="cmsis__armcc_8h" startline="117" endline="121">__get_PSP</references>
        <references refid="group___c_m_s_i_s___core___reg_acc_functions_1gab145e35dbaf6868d3a17a8ad360fe379" compoundref="cmsis__armcc_8h" startline="129" endline="133">__set_PSP</references>
        <references refid="group___c_m_s_i_s___core___reg_acc_functions_1gac5267c10c9b15b5349eea0a959ea014c" compoundref="cmsis__armcc_8h" startline="141" endline="145">__get_MSP</references>
        <references refid="group___c_m_s_i_s___core___reg_acc_functions_1ga1ff33c0b5ed0e687dd7967a1dd283d5f" compoundref="cmsis__armcc_8h" startline="153" endline="157">__set_MSP</references>
        <references refid="group___c_m_s_i_s___core___reg_acc_functions_1gac9e3a67ff722261b89c77ebe49b6f9a7" compoundref="cmsis__armcc_8h" startline="165" endline="169">__get_PRIMASK</references>
        <references refid="group___c_m_s_i_s___core___reg_acc_functions_1ga42e74e3fffe1a2d93db1de04d9260929" compoundref="cmsis__armcc_8h" startline="177" endline="181">__set_PRIMASK</references>
        <references refid="semihosting_8h_1aacce635d68067370c70caa2381ea1040" compoundref="semihosting_8h" startline="102">value</references>
      </memberdef>
      <memberdef kind="function" id="group___c_m_s_i_s___core___instruction_interface_1gade0870dc150fccdf0a5ae2d3300b2954" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>void __attribute__</definition>
        <argsstring>((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(always_inline)</type>
        </param>
        <initializer>{
    return 0</initializer>
        <briefdescription>
<para>Reverse bit order of value. </para>        </briefdescription>
        <detaileddescription>
<para>Enable IRQ Interrupts.</para><para>Set Priority Mask.</para><para>Get Priority Mask.</para><para>Set Main Stack Pointer.</para><para>Get Main Stack Pointer.</para><para>Set Process Stack Pointer.</para><para>Get Process Stack Pointer.</para><para>Get xPSR Register.</para><para>Get APSR Register.</para><para>Get IPSR Register.</para><para>Set Control Register.</para><para>Get Control Register.</para><para>Disable IRQ Interrupts.</para><para>Reverse byte order (16 bit)</para><para>Reverse byte order (32 bit)</para><para>Data Memory Barrier.</para><para>Data Synchronization Barrier.</para><para>Instruction Synchronization Barrier.</para><para>Send Event.</para><para>Wait For Event.</para><para>Wait For Interrupt.</para><para>No Operation.</para><para>Rotate Right in unsigned value (32 bit)</para><para>Reverse byte order in signed short value.</para><para>Reverses the bit order of the given value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to reverse </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reversed value</para></simplesect>
Reverses the byte order in a signed short value with sign extension to integer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to reverse </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reversed value</para></simplesect>
Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">op1</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to rotate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op2</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of Bits to rotate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Rotated value</para></simplesect>
No Operation does nothing. This instruction can be used for code alignment purposes.</para><para>Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.</para><para>Wait For Event is a hint instruction that permits the processor to enter a low-power state until one of a number of events occurs.</para><para>Send Event is a hint instruction. It causes an event to be signaled to the CPU.</para><para>Instruction Synchronization Barrier flushes the pipeline in the processor, so that all instructions following the ISB are fetched from cache or memory, after the instruction has been completed.</para><para>Acts as a special kind of Data Memory Barrier. It completes when all explicit memory accesses before this instruction complete.</para><para>Ensures the apparent order of the explicit memory operations before and after the instruction, without ensuring their completion.</para><para>Reverses the byte order in integer value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to reverse </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reversed value</para></simplesect>
Reverses the byte order in two unsigned short values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to reverse </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reversed value</para></simplesect>
Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to rotate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of Bits to rotate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Rotated value</para></simplesect>
Disables IRQ interrupts by setting the I-bit in the CPSR. Can only be executed in Privileged modes.</para><para>Returns the content of the Control Register. <simplesect kind="return"><para>Control Register value</para></simplesect>
Writes the given value to the Control Register. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">control</parametername>
</parameternamelist>
<parameterdescription>
<para>Control Register value to set</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns the content of the IPSR Register. <simplesect kind="return"><para>IPSR Register value</para></simplesect>
Returns the content of the APSR Register. <simplesect kind="return"><para>APSR Register value</para></simplesect>
Returns the content of the xPSR Register. <simplesect kind="return"><para>xPSR Register value</para></simplesect>
Returns the current value of the Process Stack Pointer (PSP). <simplesect kind="return"><para>PSP Register value</para></simplesect>
Assigns the given value to the Process Stack Pointer (PSP). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">topOfProcStack</parametername>
</parameternamelist>
<parameterdescription>
<para>Process Stack Pointer value to set</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns the current value of the Main Stack Pointer (MSP). <simplesect kind="return"><para>MSP Register value</para></simplesect>
Assigns the given value to the Main Stack Pointer (MSP). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">topOfMainStack</parametername>
</parameternamelist>
<parameterdescription>
<para>Main Stack Pointer value to set</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns the current state of the priority mask bit from the Priority Mask Register. <simplesect kind="return"><para>Priority Mask value</para></simplesect>
Assigns the given value to the Priority Mask Register. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">priMask</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority Mask</para></parameterdescription>
</parameteritem>
</parameterlist>
Enables IRQ interrupts by clearing the I-bit in the CPSR. Can only be executed in Privileged modes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc.h" line="439" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc.h" bodystart="439" bodyend="453"/>
        <references refid="semihosting_8h_1aacce635d68067370c70caa2381ea1040" compoundref="semihosting_8h" startline="102">value</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>CMSIS Cortex-M Core Function/Instruction Header File. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="version"><para>V4.30 </para></simplesect>
<simplesect kind="date"><para>20. October 2015 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**************************************************************************/</highlight></codeline>
<codeline lineno="7"><highlight class="comment">/*<sp/>Copyright<sp/>(c)<sp/>2009<sp/>-<sp/>2015<sp/>ARM<sp/>LIMITED</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/>-<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/>-<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/>-<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>ARM<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/>---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__CMSIS_GCC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__CMSIS_GCC_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ignore<sp/>some<sp/>GCC<sp/>warnings<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(<sp/>__GNUC__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wsign-conversion&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wconversion&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wunused-parameter&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>###########################<sp/><sp/>Core<sp/>Function<sp/>Access<sp/><sp/>###########################<sp/>*/</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__enable_irq(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;cpsie<sp/>i&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__disable_irq(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;cpsid<sp/>i&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga5fe64567d5bf0a81c118374e9a3a4598" kindref="member">__get_CONTROL</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="81"><highlight class="normal">{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>control&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga558df7eeb0a34765e0b54d9853d08484" kindref="member">__set_CONTROL</ref>(uint32_t<sp/>control)</highlight></codeline>
<codeline lineno="95"><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>control,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(control)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga2c18685a915eb9b7513a907c2b866636" kindref="member">__get_IPSR</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>ipsr&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1gaf082254959c727c663f2334021f1a98a" kindref="member">__get_APSR</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="120"><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>apsr&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga94c675a736d4754a5f73d8748b24aa11" kindref="member">__get_xPSR</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>xpsr&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga0c569cbb49336f8d638686f9103047aa" kindref="member">__get_PSP</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="149"><highlight class="normal">{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>psp\n&quot;</highlight><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1gab145e35dbaf6868d3a17a8ad360fe379" kindref="member">__set_PSP</ref>(uint32_t<sp/>topOfProcStack)</highlight></codeline>
<codeline lineno="163"><highlight class="normal">{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>psp,<sp/>%0\n&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(topOfProcStack)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;sp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1gac5267c10c9b15b5349eea0a959ea014c" kindref="member">__get_MSP</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>msp\n&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga1ff33c0b5ed0e687dd7967a1dd283d5f" kindref="member">__set_MSP</ref>(uint32_t<sp/>topOfMainStack)</highlight></codeline>
<codeline lineno="189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>msp,<sp/>%0\n&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(topOfMainStack)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;sp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1gac9e3a67ff722261b89c77ebe49b6f9a7" kindref="member">__get_PRIMASK</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="200"><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>primask&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="205"><highlight class="normal">}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga42e74e3fffe1a2d93db1de04d9260929" kindref="member">__set_PRIMASK</ref>(uint32_t<sp/>priMask)</highlight></codeline>
<codeline lineno="214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>primask,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(priMask)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(__CORTEX_M<sp/>&gt;=<sp/>0x03U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__enable_fault_irq(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="227"><highlight class="normal">{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;cpsie<sp/>f&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__disable_fault_irq(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="238"><highlight class="normal">{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;cpsid<sp/>f&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__get_BASEPRI(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>basepri&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="254"><highlight class="normal">}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__set_BASEPRI(uint32_t<sp/><ref refid="semihosting_8h_1aacce635d68067370c70caa2381ea1040" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>basepri,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="semihosting_8h_1aacce635d68067370c70caa2381ea1040" kindref="member">value</ref>)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="265"><highlight class="normal">}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__set_BASEPRI_MAX(uint32_t<sp/><ref refid="semihosting_8h_1aacce635d68067370c70caa2381ea1040" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>basepri_max,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="semihosting_8h_1aacce635d68067370c70caa2381ea1040" kindref="member">value</ref>)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__get_FAULTMASK(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>faultmask&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__set_FAULTMASK(uint32_t<sp/>faultMask)</highlight></codeline>
<codeline lineno="300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>faultmask,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(faultMask)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(__CORTEX_M<sp/>&gt;=<sp/>0x03U)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(__CORTEX_M<sp/>==<sp/>0x04U)<sp/>||<sp/>(__CORTEX_M<sp/>==<sp/>0x07U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__get_FPSCR(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__FPU_PRESENT<sp/>==<sp/>1U)<sp/>&amp;&amp;<sp/>(__FPU_USED<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Empty<sp/>asm<sp/>statement<sp/>works<sp/>as<sp/>a<sp/>scheduling<sp/>barrier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;VMRS<sp/>%0,<sp/>fpscr&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__set_FPSCR(uint32_t<sp/>fpscr)</highlight></codeline>
<codeline lineno="336"><highlight class="normal">{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__FPU_PRESENT<sp/>==<sp/>1U)<sp/>&amp;&amp;<sp/>(__FPU_USED<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Empty<sp/>asm<sp/>statement<sp/>works<sp/>as<sp/>a<sp/>scheduling<sp/>barrier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;VMSR<sp/>fpscr,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(fpscr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;vfpcc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(__CORTEX_M<sp/>==<sp/>0x04U)<sp/>||<sp/>(__CORTEX_M<sp/>==<sp/>0x07U)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="comment">/*<sp/>##########################<sp/><sp/>Core<sp/>Instruction<sp/>Access<sp/><sp/>#########################<sp/>*/</highlight></codeline>
<codeline lineno="358"><highlight class="comment">/*<sp/>Define<sp/>macros<sp/>for<sp/>porting<sp/>to<sp/>both<sp/>thumb1<sp/>and<sp/>thumb2.</highlight></codeline>
<codeline lineno="359"><highlight class="comment"><sp/>*<sp/>For<sp/>thumb1,<sp/>use<sp/>low<sp/>register<sp/>(r0-r7),<sp/>specified<sp/>by<sp/>constraint<sp/>&quot;l&quot;</highlight></codeline>
<codeline lineno="360"><highlight class="comment"><sp/>*<sp/>Otherwise,<sp/>use<sp/>general<sp/>registers,<sp/>specified<sp/>by<sp/>constraint<sp/>&quot;r&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(__thumb__)<sp/>&amp;&amp;<sp/>!defined<sp/>(__thumb2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__CMSIS_GCC_OUT_REG(r)<sp/>&quot;=l&quot;<sp/>(r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__CMSIS_GCC_USE_REG(r)<sp/>&quot;l&quot;<sp/>(r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365" refid="group___c_m_s_i_s___core___instruction_interface_1gabc17e391c13c71702366c67cba39c276" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__CMSIS_GCC_OUT_REG(r)<sp/>&quot;=r&quot;<sp/>(r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366" refid="group___c_m_s_i_s___core___instruction_interface_1ga9d94dee7402367961d2cf0accc00fd97" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__CMSIS_GCC_USE_REG(r)<sp/>&quot;r&quot;<sp/>(r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1gabd585ddc865fb9b7f2493af1eee1a572" kindref="member">__NOP</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="374"><highlight class="normal">{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;nop&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1gad23bf2b78a9a4524157c9de0d30b7448" kindref="member">__WFI</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="384"><highlight class="normal">{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;wfi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1gaac6cc7dd4325d9cb40d3290fa5244b3d" kindref="member">__WFE</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="395"><highlight class="normal">{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;wfe&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1gaab4f296d0022b4b10dc0976eb22052f9" kindref="member">__SEV</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="405"><highlight class="normal">{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;sev&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1gaad233022e850a009fc6f7602be1182f6" kindref="member">__ISB</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="417"><highlight class="normal">{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;isb<sp/>0xF&quot;</highlight><highlight class="normal">:::</highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1ga067d257a2b34565410acefb5afef2203" kindref="member">__DSB</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="428"><highlight class="normal">{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;dsb<sp/>0xF&quot;</highlight><highlight class="normal">:::</highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1ga671101179b5943990785f36f8c1e2269" kindref="member">__DMB</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="439"><highlight class="normal">{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;dmb<sp/>0xF&quot;</highlight><highlight class="normal">:::</highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1ga14f54807872c0f5e05604c4924abfdae" kindref="member">__REV</ref>(uint32_t<sp/><ref refid="semihosting_8h_1aacce635d68067370c70caa2381ea1040" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="451"><highlight class="normal">{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__GNUC__<sp/>&gt;<sp/>4)<sp/>||<sp/>(__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>__builtin_bswap32(value);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;rev<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1gabc17e391c13c71702366c67cba39c276" kindref="member">__CMSIS_GCC_OUT_REG</ref><sp/>(result)<sp/>:<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1ga9d94dee7402367961d2cf0accc00fd97" kindref="member">__CMSIS_GCC_USE_REG</ref><sp/>(value)<sp/>);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1ga4e3acd41e7667cdf65ffcd8c76a8613f" kindref="member">__REV16</ref>(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="470"><highlight class="normal">{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;rev16<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1gabc17e391c13c71702366c67cba39c276" kindref="member">__CMSIS_GCC_OUT_REG</ref><sp/>(result)<sp/>:<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1ga9d94dee7402367961d2cf0accc00fd97" kindref="member">__CMSIS_GCC_USE_REG</ref><sp/>(value)<sp/>);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>int32_t<sp/>__REVSH(int32_t<sp/>value)</highlight></codeline>
<codeline lineno="485"><highlight class="normal">{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__GNUC__<sp/>&gt;<sp/>4)<sp/>||<sp/>(__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">short</highlight><highlight class="normal">)__builtin_bswap16(value);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>int32_t<sp/>result;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;revsh<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1gabc17e391c13c71702366c67cba39c276" kindref="member">__CMSIS_GCC_OUT_REG</ref><sp/>(result)<sp/>:<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1ga9d94dee7402367961d2cf0accc00fd97" kindref="member">__CMSIS_GCC_USE_REG</ref><sp/>(value)<sp/>);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1ga95b9bd281ddeda378b85afdb8f2ced86" kindref="member">__ROR</ref>(uint32_t<sp/>op1,<sp/>uint32_t<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)</highlight></codeline>
<codeline lineno="505" refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" refkind="member"><highlight class="normal">{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(op1<sp/>&gt;&gt;<sp/>op2)<sp/>|<sp/>(op1<sp/>&lt;&lt;<sp/>(32U<sp/>-<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>));</highlight></codeline>
<codeline lineno="507"><highlight class="normal">}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="517" refid="group___c_m_s_i_s___core___instruction_interface_1ga15ea6bd3c507d3e81c3b3a1258e46397" refkind="member"><highlight class="preprocessor">#define<sp/>__BKPT(value)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASM<sp/>volatile<sp/>(&quot;bkpt<sp/>&quot;#value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__RBIT(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="527"><highlight class="normal">{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(__CORTEX_M<sp/>&gt;=<sp/>0x03U)<sp/>||<sp/>(__CORTEX_SC<sp/>&gt;=<sp/>300U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;rbit<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(value)<sp/>);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>int32_t<sp/>s<sp/>=<sp/>4<sp/></highlight><highlight class="comment">/*sizeof(v)*/</highlight><highlight class="normal"><sp/>*<sp/>8<sp/>-<sp/>1;<sp/></highlight><highlight class="comment">/*<sp/>extra<sp/>shift<sp/>needed<sp/>at<sp/>end<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/><ref refid="semihosting_8h_1aacce635d68067370c70caa2381ea1040" kindref="member">value</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>r<sp/>will<sp/>be<sp/>reversed<sp/>bits<sp/>of<sp/>v;<sp/>first<sp/>get<sp/>LSB<sp/>of<sp/>v<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(value<sp/>&gt;&gt;=<sp/>1U;<sp/><ref refid="semihosting_8h_1aacce635d68067370c70caa2381ea1040" kindref="member">value</ref>;<sp/>value<sp/>&gt;&gt;=<sp/>1U)</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>&lt;&lt;=<sp/>1U;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>value<sp/>&amp;<sp/>1U;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>s--;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>result<sp/>&lt;&lt;=<sp/>s;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>shift<sp/>when<sp/>v&apos;s<sp/>highest<sp/>bits<sp/>are<sp/>zero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="554" refid="group___c_m_s_i_s___core___instruction_interface_1ga5d5bb1527e042be4a9fa5a33f65cc248" refkind="member"><highlight class="preprocessor">#define<sp/>__CLZ<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__builtin_clz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/><sp/><sp/><sp/><sp/><sp/>(__CORTEX_M<sp/>&gt;=<sp/>0x03U)<sp/>||<sp/>(__CORTEX_SC<sp/>&gt;=<sp/>300U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint8_t<sp/>__LDREXB(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>*addr)</highlight></codeline>
<codeline lineno="566"><highlight class="normal">{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__GNUC__<sp/>&gt;<sp/>4)<sp/>||<sp/>(__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ldrexb<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal"><sp/>(*addr)<sp/>);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Prior<sp/>to<sp/>GCC<sp/>4.8,<sp/>&quot;Q&quot;<sp/>will<sp/>be<sp/>expanded<sp/>to<sp/>[rx,<sp/>#0]<sp/>which<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="573"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accepted<sp/>by<sp/>assembler.<sp/>So<sp/>has<sp/>to<sp/>use<sp/>following<sp/>less<sp/>efficient<sp/>pattern.</highlight></codeline>
<codeline lineno="574"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ldrexb<sp/>%0,<sp/>[%1]&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint8_t)<sp/>result);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>explicit<sp/>type<sp/>cast<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint16_t<sp/>__LDREXH(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint16_t<sp/>*addr)</highlight></codeline>
<codeline lineno="588"><highlight class="normal">{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__GNUC__<sp/>&gt;<sp/>4)<sp/>||<sp/>(__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ldrexh<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal"><sp/>(*addr)<sp/>);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Prior<sp/>to<sp/>GCC<sp/>4.8,<sp/>&quot;Q&quot;<sp/>will<sp/>be<sp/>expanded<sp/>to<sp/>[rx,<sp/>#0]<sp/>which<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="595"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accepted<sp/>by<sp/>assembler.<sp/>So<sp/>has<sp/>to<sp/>use<sp/>following<sp/>less<sp/>efficient<sp/>pattern.</highlight></codeline>
<codeline lineno="596"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ldrexh<sp/>%0,<sp/>[%1]&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint16_t)<sp/>result);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>explicit<sp/>type<sp/>cast<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__LDREXW(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*addr)</highlight></codeline>
<codeline lineno="610"><highlight class="normal">{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ldrex<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal"><sp/>(*addr)<sp/>);</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__STREXB(uint8_t<sp/>value,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>*addr)</highlight></codeline>
<codeline lineno="627"><highlight class="normal">{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;strexb<sp/>%0,<sp/>%2,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=&amp;r&quot;</highlight><highlight class="normal"><sp/>(result),<sp/></highlight><highlight class="stringliteral">&quot;=Q&quot;</highlight><highlight class="normal"><sp/>(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>((uint32_t)value)<sp/>);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__STREXH(uint16_t<sp/>value,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint16_t<sp/>*addr)</highlight></codeline>
<codeline lineno="644"><highlight class="normal">{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;strexh<sp/>%0,<sp/>%2,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=&amp;r&quot;</highlight><highlight class="normal"><sp/>(result),<sp/></highlight><highlight class="stringliteral">&quot;=Q&quot;</highlight><highlight class="normal"><sp/>(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>((uint32_t)value)<sp/>);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="649"><highlight class="normal">}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__STREXW(uint32_t<sp/>value,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*addr)</highlight></codeline>
<codeline lineno="661"><highlight class="normal">{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;strex<sp/>%0,<sp/>%2,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=&amp;r&quot;</highlight><highlight class="normal"><sp/>(result),<sp/></highlight><highlight class="stringliteral">&quot;=Q&quot;</highlight><highlight class="normal"><sp/>(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="semihosting_8h_1aacce635d68067370c70caa2381ea1040" kindref="member">value</ref>)<sp/>);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="666"><highlight class="normal">}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__CLREX(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="674"><highlight class="normal">{</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;clrex&quot;</highlight><highlight class="normal"><sp/>:::<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="676"><highlight class="normal">}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="preprocessor">#define<sp/>__SSAT(ARG1,ARG2)<sp/>\</highlight></codeline>
<codeline lineno="687"><highlight class="preprocessor">({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="688"><highlight class="preprocessor"><sp/><sp/>uint32_t<sp/>__RES,<sp/>__ARG1<sp/>=<sp/>(ARG1);<sp/>\</highlight></codeline>
<codeline lineno="689"><highlight class="preprocessor"><sp/><sp/>__ASM<sp/>(&quot;ssat<sp/>%0,<sp/>%1,<sp/>%2&quot;<sp/>:<sp/>&quot;=r&quot;<sp/>(__RES)<sp/>:<sp/><sp/>&quot;I&quot;<sp/>(ARG2),<sp/>&quot;r&quot;<sp/>(__ARG1)<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="690"><highlight class="preprocessor"><sp/><sp/>__RES;<sp/>\</highlight></codeline>
<codeline lineno="691"><highlight class="preprocessor"><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="preprocessor">#define<sp/>__USAT(ARG1,ARG2)<sp/>\</highlight></codeline>
<codeline lineno="702"><highlight class="preprocessor">({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="703"><highlight class="preprocessor"><sp/><sp/>uint32_t<sp/>__RES,<sp/>__ARG1<sp/>=<sp/>(ARG1);<sp/>\</highlight></codeline>
<codeline lineno="704"><highlight class="preprocessor"><sp/><sp/>__ASM<sp/>(&quot;usat<sp/>%0,<sp/>%1,<sp/>%2&quot;<sp/>:<sp/>&quot;=r&quot;<sp/>(__RES)<sp/>:<sp/><sp/>&quot;I&quot;<sp/>(ARG2),<sp/>&quot;r&quot;<sp/>(__ARG1)<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="705"><highlight class="preprocessor"><sp/><sp/>__RES;<sp/>\</highlight></codeline>
<codeline lineno="706"><highlight class="preprocessor"><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__RRX(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="717"><highlight class="normal">{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;rrx<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1gabc17e391c13c71702366c67cba39c276" kindref="member">__CMSIS_GCC_OUT_REG</ref><sp/>(result)<sp/>:<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1ga9d94dee7402367961d2cf0accc00fd97" kindref="member">__CMSIS_GCC_USE_REG</ref><sp/>(value)<sp/>);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="722"><highlight class="normal">}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint8_t<sp/>__LDRBT(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>*addr)</highlight></codeline>
<codeline lineno="732"><highlight class="normal">{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__GNUC__<sp/>&gt;<sp/>4)<sp/>||<sp/>(__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ldrbt<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal"><sp/>(*addr)<sp/>);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Prior<sp/>to<sp/>GCC<sp/>4.8,<sp/>&quot;Q&quot;<sp/>will<sp/>be<sp/>expanded<sp/>to<sp/>[rx,<sp/>#0]<sp/>which<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="739"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accepted<sp/>by<sp/>assembler.<sp/>So<sp/>has<sp/>to<sp/>use<sp/>following<sp/>less<sp/>efficient<sp/>pattern.</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ldrbt<sp/>%0,<sp/>[%1]&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint8_t)<sp/>result);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>explicit<sp/>type<sp/>cast<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint16_t<sp/>__LDRHT(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint16_t<sp/>*addr)</highlight></codeline>
<codeline lineno="754"><highlight class="normal">{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__GNUC__<sp/>&gt;<sp/>4)<sp/>||<sp/>(__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ldrht<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal"><sp/>(*addr)<sp/>);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Prior<sp/>to<sp/>GCC<sp/>4.8,<sp/>&quot;Q&quot;<sp/>will<sp/>be<sp/>expanded<sp/>to<sp/>[rx,<sp/>#0]<sp/>which<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="761"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accepted<sp/>by<sp/>assembler.<sp/>So<sp/>has<sp/>to<sp/>use<sp/>following<sp/>less<sp/>efficient<sp/>pattern.</highlight></codeline>
<codeline lineno="762"><highlight class="comment"><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ldrht<sp/>%0,<sp/>[%1]&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint16_t)<sp/>result);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>explicit<sp/>type<sp/>cast<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal">}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__LDRT(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*addr)</highlight></codeline>
<codeline lineno="776"><highlight class="normal">{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ldrt<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal"><sp/>(*addr)<sp/>);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__STRBT(uint8_t<sp/>value,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>*addr)</highlight></codeline>
<codeline lineno="791"><highlight class="normal">{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;strbt<sp/>%1,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=Q&quot;</highlight><highlight class="normal"><sp/>(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>((uint32_t)value)<sp/>);</highlight></codeline>
<codeline lineno="793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__STRHT(uint16_t<sp/>value,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint16_t<sp/>*addr)</highlight></codeline>
<codeline lineno="803"><highlight class="normal">{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;strht<sp/>%1,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=Q&quot;</highlight><highlight class="normal"><sp/>(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>((uint32_t)value)<sp/>);</highlight></codeline>
<codeline lineno="805"><highlight class="normal">}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__STRT(uint32_t<sp/>value,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*addr)</highlight></codeline>
<codeline lineno="815"><highlight class="normal">{</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;strt<sp/>%1,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=Q&quot;</highlight><highlight class="normal"><sp/>(*addr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="semihosting_8h_1aacce635d68067370c70caa2381ea1040" kindref="member">value</ref>)<sp/>);</highlight></codeline>
<codeline lineno="817"><highlight class="normal">}</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(__CORTEX_M<sp/>&gt;=<sp/>0x03U)<sp/>||<sp/>(__CORTEX_SC<sp/>&gt;=<sp/>300U)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>group<sp/>CMSIS_Core_InstructionInterface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>###################<sp/><sp/>Compiler<sp/>specific<sp/>Intrinsics<sp/><sp/>###########################<sp/>*/</highlight></codeline>
<codeline lineno="830"><highlight class="preprocessor">#if<sp/>(__CORTEX_M<sp/>&gt;=<sp/>0x04U)<sp/><sp/></highlight><highlight class="comment">/*<sp/>only<sp/>for<sp/>Cortex-M4<sp/>and<sp/>above<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SADD8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="833"><highlight class="normal">{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;sadd8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="838"><highlight class="normal">}</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__QADD8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="841"><highlight class="normal">{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;qadd8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="846"><highlight class="normal">}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SHADD8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="849"><highlight class="normal">{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;shadd8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="854"><highlight class="normal">}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UADD8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="857"><highlight class="normal">{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uadd8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="862"><highlight class="normal">}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UQADD8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="865"><highlight class="normal">{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uqadd8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="870"><highlight class="normal">}</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UHADD8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="873"><highlight class="normal">{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uhadd8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="878"><highlight class="normal">}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SSUB8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="882"><highlight class="normal">{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ssub8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="887"><highlight class="normal">}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__QSUB8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="890"><highlight class="normal">{</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;qsub8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="895"><highlight class="normal">}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SHSUB8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="898"><highlight class="normal">{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;shsub8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="903"><highlight class="normal">}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__USUB8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="906"><highlight class="normal">{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;usub8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="911"><highlight class="normal">}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UQSUB8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="914"><highlight class="normal">{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uqsub8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="919"><highlight class="normal">}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UHSUB8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="922"><highlight class="normal">{</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uhsub8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SADD16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="931"><highlight class="normal">{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;sadd16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="936"><highlight class="normal">}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__QADD16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="939"><highlight class="normal">{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;qadd16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="944"><highlight class="normal">}</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SHADD16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="947"><highlight class="normal">{</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;shadd16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="952"><highlight class="normal">}</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UADD16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="955"><highlight class="normal">{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uadd16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UQADD16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="963"><highlight class="normal">{</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uqadd16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="968"><highlight class="normal">}</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UHADD16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="971"><highlight class="normal">{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uhadd16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="976"><highlight class="normal">}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SSUB16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="979"><highlight class="normal">{</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ssub16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="984"><highlight class="normal">}</highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__QSUB16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="987"><highlight class="normal">{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;qsub16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="992"><highlight class="normal">}</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SHSUB16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="995"><highlight class="normal">{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;shsub16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__USUB16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1003"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;usub16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UQSUB16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1011"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uqsub16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UHSUB16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1019"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uhsub16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SASX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1027"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;sasx<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__QASX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1035"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;qasx<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SHASX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1043"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;shasx<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UASX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1051"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uasx<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1056"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UQASX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1059"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uqasx<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UHASX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1067"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uhasx<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1072"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SSAX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1075"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ssax<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__QSAX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1083"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;qsax<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1088"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SHSAX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1091"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;shsax<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__USAX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1099"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;usax<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UQSAX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uqsax<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UHSAX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uhsax<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__USAD8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;usad8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__USADA8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2,<sp/>uint32_t<sp/>op3)</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;usada8<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op3)<sp/>);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SSAT16(ARG1,ARG2)<sp/>\</highlight></codeline>
<codeline lineno="1139"><highlight class="preprocessor">({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1140"><highlight class="preprocessor"><sp/><sp/>int32_t<sp/>__RES,<sp/>__ARG1<sp/>=<sp/>(ARG1);<sp/>\</highlight></codeline>
<codeline lineno="1141"><highlight class="preprocessor"><sp/><sp/>__ASM<sp/>(&quot;ssat16<sp/>%0,<sp/>%1,<sp/>%2&quot;<sp/>:<sp/>&quot;=r&quot;<sp/>(__RES)<sp/>:<sp/><sp/>&quot;I&quot;<sp/>(ARG2),<sp/>&quot;r&quot;<sp/>(__ARG1)<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="1142"><highlight class="preprocessor"><sp/><sp/>__RES;<sp/>\</highlight></codeline>
<codeline lineno="1143"><highlight class="preprocessor"><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__USAT16(ARG1,ARG2)<sp/>\</highlight></codeline>
<codeline lineno="1146"><highlight class="preprocessor">({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1147"><highlight class="preprocessor"><sp/><sp/>uint32_t<sp/>__RES,<sp/>__ARG1<sp/>=<sp/>(ARG1);<sp/>\</highlight></codeline>
<codeline lineno="1148"><highlight class="preprocessor"><sp/><sp/>__ASM<sp/>(&quot;usat16<sp/>%0,<sp/>%1,<sp/>%2&quot;<sp/>:<sp/>&quot;=r&quot;<sp/>(__RES)<sp/>:<sp/><sp/>&quot;I&quot;<sp/>(ARG2),<sp/>&quot;r&quot;<sp/>(__ARG1)<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="1149"><highlight class="preprocessor"><sp/><sp/>__RES;<sp/>\</highlight></codeline>
<codeline lineno="1150"><highlight class="preprocessor"><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UXTB16(uint32_t<sp/>op1)</highlight></codeline>
<codeline lineno="1153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uxtb16<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1));</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UXTAB16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uxtab16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SXTB16(uint32_t<sp/>op1)</highlight></codeline>
<codeline lineno="1169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;sxtb16<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1));</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SXTAB16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;sxtab16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SMUAD<sp/><sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1185"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smuad<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SMUADX<sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1193"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smuadx<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SMLAD<sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2,<sp/>uint32_t<sp/>op3)</highlight></codeline>
<codeline lineno="1201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smlad<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op3)<sp/>);</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SMLADX<sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2,<sp/>uint32_t<sp/>op3)</highlight></codeline>
<codeline lineno="1209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smladx<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op3)<sp/>);</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint64_t<sp/>__SMLALD<sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2,<sp/>uint64_t<sp/>acc)</highlight></codeline>
<codeline lineno="1217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">llreg_u{</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>w32[2];</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>w64;</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/>}<sp/>llr;</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/>llr.w64<sp/>=<sp/>acc;</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__ARMEB__<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Little<sp/>endian<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smlald<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]):<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op2)<sp/>,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]),<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1])<sp/>);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Big<sp/>endian<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smlald<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]):<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op2)<sp/>,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]),<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0])<sp/>);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(llr.w64);</highlight></codeline>
<codeline lineno="1231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint64_t<sp/>__SMLALDX<sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2,<sp/>uint64_t<sp/>acc)</highlight></codeline>
<codeline lineno="1234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">llreg_u{</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>w32[2];</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>w64;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/>}<sp/>llr;</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/>llr.w64<sp/>=<sp/>acc;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__ARMEB__<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Little<sp/>endian<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smlaldx<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]):<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op2)<sp/>,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]),<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1])<sp/>);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Big<sp/>endian<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smlaldx<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]):<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op2)<sp/>,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]),<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0])<sp/>);</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(llr.w64);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SMUSD<sp/><sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1251"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smusd<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SMUSDX<sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smusdx<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SMLSD<sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2,<sp/>uint32_t<sp/>op3)</highlight></codeline>
<codeline lineno="1267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smlsd<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op3)<sp/>);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SMLSDX<sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2,<sp/>uint32_t<sp/>op3)</highlight></codeline>
<codeline lineno="1275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smlsdx<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op3)<sp/>);</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1280"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint64_t<sp/>__SMLSLD<sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2,<sp/>uint64_t<sp/>acc)</highlight></codeline>
<codeline lineno="1283"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">llreg_u{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>w32[2];</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>w64;</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/>}<sp/>llr;</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/>llr.w64<sp/>=<sp/>acc;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__ARMEB__<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Little<sp/>endian<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smlsld<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]):<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op2)<sp/>,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]),<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1])<sp/>);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Big<sp/>endian<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smlsld<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]):<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op2)<sp/>,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]),<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0])<sp/>);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(llr.w64);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint64_t<sp/>__SMLSLDX<sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2,<sp/>uint64_t<sp/>acc)</highlight></codeline>
<codeline lineno="1300"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">llreg_u{</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>w32[2];</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>w64;</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/>}<sp/>llr;</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/>llr.w64<sp/>=<sp/>acc;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__ARMEB__<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Little<sp/>endian<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smlsldx<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]):<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op2)<sp/>,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]),<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1])<sp/>);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Big<sp/>endian<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smlsldx<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]):<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op2)<sp/>,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]),<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0])<sp/>);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(llr.w64);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SEL<sp/><sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1317"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;sel<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/><sp/>int32_t<sp/>__QADD(<sp/>int32_t<sp/>op1,<sp/><sp/>int32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/>int32_t<sp/>result;</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;qadd<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/><sp/>int32_t<sp/>__QSUB(<sp/>int32_t<sp/>op1,<sp/><sp/>int32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1333"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/>int32_t<sp/>result;</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;qsub<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1338"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PKHBT(ARG1,ARG2,ARG3)<sp/>\</highlight></codeline>
<codeline lineno="1341"><highlight class="preprocessor">({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1342"><highlight class="preprocessor"><sp/><sp/>uint32_t<sp/>__RES,<sp/>__ARG1<sp/>=<sp/>(ARG1),<sp/>__ARG2<sp/>=<sp/>(ARG2);<sp/>\</highlight></codeline>
<codeline lineno="1343"><highlight class="preprocessor"><sp/><sp/>__ASM<sp/>(&quot;pkhbt<sp/>%0,<sp/>%1,<sp/>%2,<sp/>lsl<sp/>%3&quot;<sp/>:<sp/>&quot;=r&quot;<sp/>(__RES)<sp/>:<sp/><sp/>&quot;r&quot;<sp/>(__ARG1),<sp/>&quot;r&quot;<sp/>(__ARG2),<sp/>&quot;I&quot;<sp/>(ARG3)<sp/><sp/>);<sp/>\</highlight></codeline>
<codeline lineno="1344"><highlight class="preprocessor"><sp/><sp/>__RES;<sp/>\</highlight></codeline>
<codeline lineno="1345"><highlight class="preprocessor"><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PKHTB(ARG1,ARG2,ARG3)<sp/>\</highlight></codeline>
<codeline lineno="1348"><highlight class="preprocessor">({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1349"><highlight class="preprocessor"><sp/><sp/>uint32_t<sp/>__RES,<sp/>__ARG1<sp/>=<sp/>(ARG1),<sp/>__ARG2<sp/>=<sp/>(ARG2);<sp/>\</highlight></codeline>
<codeline lineno="1350"><highlight class="preprocessor"><sp/><sp/>if<sp/>(ARG3<sp/>==<sp/>0)<sp/>\</highlight></codeline>
<codeline lineno="1351"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>__ASM<sp/>(&quot;pkhtb<sp/>%0,<sp/>%1,<sp/>%2&quot;<sp/>:<sp/>&quot;=r&quot;<sp/>(__RES)<sp/>:<sp/><sp/>&quot;r&quot;<sp/>(__ARG1),<sp/>&quot;r&quot;<sp/>(__ARG2)<sp/><sp/>);<sp/>\</highlight></codeline>
<codeline lineno="1352"><highlight class="preprocessor"><sp/><sp/>else<sp/>\</highlight></codeline>
<codeline lineno="1353"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>__ASM<sp/>(&quot;pkhtb<sp/>%0,<sp/>%1,<sp/>%2,<sp/>asr<sp/>%3&quot;<sp/>:<sp/>&quot;=r&quot;<sp/>(__RES)<sp/>:<sp/><sp/>&quot;r&quot;<sp/>(__ARG1),<sp/>&quot;r&quot;<sp/>(__ARG2),<sp/>&quot;I&quot;<sp/>(ARG3)<sp/><sp/>);<sp/>\</highlight></codeline>
<codeline lineno="1354"><highlight class="preprocessor"><sp/><sp/>__RES;<sp/>\</highlight></codeline>
<codeline lineno="1355"><highlight class="preprocessor"><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___instruction_interface_1gae84a2733711339c5eefeb0d899506b96" kindref="member">__attribute__</ref>(<sp/>(<sp/>always_inline<sp/>)<sp/>)<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SMMLA<sp/>(int32_t<sp/>op1,<sp/>int32_t<sp/>op2,<sp/>int32_t<sp/>op3)</highlight></codeline>
<codeline lineno="1358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/>int32_t<sp/>result;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smmla<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result):<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op3)<sp/>);</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(__CORTEX_M<sp/>&gt;=<sp/>0x04)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="preprocessor">#if<sp/>defined<sp/>(<sp/>__GNUC__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__CMSIS_GCC_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_gcc.h"/>
  </compounddef>
</doxygen>
