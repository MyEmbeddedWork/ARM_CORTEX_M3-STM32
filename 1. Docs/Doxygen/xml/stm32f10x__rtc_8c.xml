<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="stm32f10x__rtc_8c" kind="file" language="C++">
    <compoundname>stm32f10x_rtc.c</compoundname>
    <includes refid="stm32f10x__rtc_8h" local="yes">stm32f10x_rtc.h</includes>
    <incdepgraph>
      <node id="1000">
        <label>system_stm32f10x.h</label>
        <link refid="system__stm32f10x_8h"/>
      </node>
      <node id="997">
        <label>stdint.h</label>
      </node>
      <node id="996">
        <label>core_cm3.h</label>
        <link refid="core__cm3_8h"/>
        <childnode refid="997" relation="include">
        </childnode>
        <childnode refid="998" relation="include">
        </childnode>
        <childnode refid="999" relation="include">
        </childnode>
      </node>
      <node id="999">
        <label>core_cmFunc.h</label>
        <link refid="core__cm_func_8h"/>
      </node>
      <node id="993">
        <label>C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c</label>
        <link refid="stm32f10x__rtc_8c"/>
        <childnode refid="994" relation="include">
        </childnode>
      </node>
      <node id="998">
        <label>core_cmInstr.h</label>
        <link refid="core__cm_instr_8h"/>
      </node>
      <node id="995">
        <label>stm32f10x.h</label>
        <link refid="stm32f10x_8h"/>
        <childnode refid="996" relation="include">
        </childnode>
        <childnode refid="1000" relation="include">
        </childnode>
        <childnode refid="997" relation="include">
        </childnode>
      </node>
      <node id="994">
        <label>stm32f10x_rtc.h</label>
        <link refid="stm32f10x__rtc_8h"/>
        <childnode refid="995" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___r_t_c___private___defines_1gae19d75bb0ecb5e93d97e026a04d4854f" prot="public" static="no">
        <name>RTC_LSB_MASK</name>
        <initializer>((uint32_t)0x0000FFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RTC LSB Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" line="44" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___r_t_c___private___defines_1ga47b3eed8e018a9139bc7bb374c7ca125" prot="public" static="no">
        <name>PRLH_MSB_MASK</name>
        <initializer>((uint32_t)0x000F0000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>RTC Prescaler MSB Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" line="45" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___r_t_c___private___functions_1ga175dfe88866234730c1ec40d2221c4f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RTC_ITConfig</definition>
        <argsstring>(uint16_t RTC_IT, FunctionalState NewState)</argsstring>
        <name>RTC_ITConfig</name>
        <param>
          <type>uint16_t</type>
          <declname>RTC_IT</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified RTC interrupts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>RTC_IT</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the RTC interrupts sources to be enabled or disabled. This parameter can be any combination of the following values: <itemizedlist>
<listitem><para>RTC_IT_OW: Overflow interrupt </para></listitem>
<listitem><para>RTC_IT_ALR: Alarm interrupt </para></listitem>
<listitem><para>RTC_IT_SEC: Second interrupt </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the specified RTC interrupts. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" line="90" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" bodystart="90" bodyend="104"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___r_t_c__interrupts__define_1ga5c941995b804ce4c7ef62e28e0133a83" compoundref="stm32f10x__rtc_8h" startline="61">IS_RTC_IT</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" compoundref="stm32f10x_8h" startline="1389">RTC</references>
      </memberdef>
      <memberdef kind="function" id="group___r_t_c___private___functions_1ga23612d9da2fe057a0cd72c684e5b438a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RTC_EnterConfigMode</definition>
        <argsstring>(void)</argsstring>
        <name>RTC_EnterConfigMode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Enters the RTC configuration mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" line="111" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" bodystart="111" bodyend="115"/>
        <references refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" compoundref="stm32f10x_8h" startline="1389">RTC</references>
        <references refid="group___peripheral___registers___bits___definition_1ga3829687c89579c020665c19b8937a820" compoundref="stm32f10x_8h" startline="4492">RTC_CRL_CNF</references>
        <referencedby refid="group___r_t_c___private___functions_1gafa81ec17158de1d1a7740eca81b9fb65" compoundref="stm32f10x__rtc_8c" startline="151" endline="159">RTC_SetCounter</referencedby>
        <referencedby refid="group___r_t_c___private___functions_1gaf76be6071d1ba65b009e0791069e602c" compoundref="stm32f10x__rtc_8c" startline="166" endline="177">RTC_SetPrescaler</referencedby>
        <referencedby refid="group___r_t_c___private___functions_1gaec644c636a30ab5e287ba60ffc77132c" compoundref="stm32f10x__rtc_8c" startline="184" endline="192">RTC_SetAlarm</referencedby>
      </memberdef>
      <memberdef kind="function" id="group___r_t_c___private___functions_1ga7585aa6e2dbb497173b2fd03bac0d304" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RTC_ExitConfigMode</definition>
        <argsstring>(void)</argsstring>
        <name>RTC_ExitConfigMode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Exits from the RTC configuration mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" line="122" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" bodystart="122" bodyend="126"/>
        <references refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" compoundref="stm32f10x_8h" startline="1389">RTC</references>
        <references refid="group___peripheral___registers___bits___definition_1ga3829687c89579c020665c19b8937a820" compoundref="stm32f10x_8h" startline="4492">RTC_CRL_CNF</references>
        <referencedby refid="group___r_t_c___private___functions_1gafa81ec17158de1d1a7740eca81b9fb65" compoundref="stm32f10x__rtc_8c" startline="151" endline="159">RTC_SetCounter</referencedby>
        <referencedby refid="group___r_t_c___private___functions_1gaf76be6071d1ba65b009e0791069e602c" compoundref="stm32f10x__rtc_8c" startline="166" endline="177">RTC_SetPrescaler</referencedby>
        <referencedby refid="group___r_t_c___private___functions_1gaec644c636a30ab5e287ba60ffc77132c" compoundref="stm32f10x__rtc_8c" startline="184" endline="192">RTC_SetAlarm</referencedby>
      </memberdef>
      <memberdef kind="function" id="group___r_t_c___private___functions_1ga6edb19a0ad8414a40610341121c5ea6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t RTC_GetCounter</definition>
        <argsstring>(void)</argsstring>
        <name>RTC_GetCounter</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the RTC counter value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>RTC</parametername>
</parameternamelist>
<parameterdescription>
<para>counter value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" line="133" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" bodystart="133" bodyend="138"/>
        <references refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" compoundref="stm32f10x_8h" startline="1389">RTC</references>
      </memberdef>
      <memberdef kind="function" id="group___r_t_c___private___functions_1gafa81ec17158de1d1a7740eca81b9fb65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RTC_SetCounter</definition>
        <argsstring>(uint32_t CounterValue)</argsstring>
        <name>RTC_SetCounter</name>
        <param>
          <type>uint32_t</type>
          <declname>CounterValue</declname>
        </param>
        <briefdescription>
<para>Sets the RTC counter value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>CounterValue</parametername>
</parameternamelist>
<parameterdescription>
<para>RTC counter new value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" line="151" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" bodystart="151" bodyend="159"/>
        <references refid="group___r_t_c___private___functions_1ga23612d9da2fe057a0cd72c684e5b438a" compoundref="stm32f10x__rtc_8c" startline="111" endline="115">RTC_EnterConfigMode</references>
        <references refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" compoundref="stm32f10x_8h" startline="1389">RTC</references>
        <references refid="group___r_t_c___private___defines_1gae19d75bb0ecb5e93d97e026a04d4854f" compoundref="stm32f10x__rtc_8c" startline="44">RTC_LSB_MASK</references>
        <references refid="group___r_t_c___private___functions_1ga7585aa6e2dbb497173b2fd03bac0d304" compoundref="stm32f10x__rtc_8c" startline="122" endline="126">RTC_ExitConfigMode</references>
      </memberdef>
      <memberdef kind="function" id="group___r_t_c___private___functions_1gaf76be6071d1ba65b009e0791069e602c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RTC_SetPrescaler</definition>
        <argsstring>(uint32_t PrescalerValue)</argsstring>
        <name>RTC_SetPrescaler</name>
        <param>
          <type>uint32_t</type>
          <declname>PrescalerValue</declname>
        </param>
        <briefdescription>
<para>Sets the RTC prescaler value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>PrescalerValue</parametername>
</parameternamelist>
<parameterdescription>
<para>RTC prescaler new value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" line="166" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" bodystart="166" bodyend="177"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___r_t_c__interrupts__flags_1ga483b9ec67246cbfb2874c5a85f0cb4d8" compoundref="stm32f10x__rtc_8h" startline="81">IS_RTC_PRESCALER</references>
        <references refid="group___r_t_c___private___functions_1ga23612d9da2fe057a0cd72c684e5b438a" compoundref="stm32f10x__rtc_8c" startline="111" endline="115">RTC_EnterConfigMode</references>
        <references refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" compoundref="stm32f10x_8h" startline="1389">RTC</references>
        <references refid="group___r_t_c___private___defines_1ga47b3eed8e018a9139bc7bb374c7ca125" compoundref="stm32f10x__rtc_8c" startline="45">PRLH_MSB_MASK</references>
        <references refid="group___r_t_c___private___defines_1gae19d75bb0ecb5e93d97e026a04d4854f" compoundref="stm32f10x__rtc_8c" startline="44">RTC_LSB_MASK</references>
        <references refid="group___r_t_c___private___functions_1ga7585aa6e2dbb497173b2fd03bac0d304" compoundref="stm32f10x__rtc_8c" startline="122" endline="126">RTC_ExitConfigMode</references>
      </memberdef>
      <memberdef kind="function" id="group___r_t_c___private___functions_1gaec644c636a30ab5e287ba60ffc77132c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RTC_SetAlarm</definition>
        <argsstring>(uint32_t AlarmValue)</argsstring>
        <name>RTC_SetAlarm</name>
        <param>
          <type>uint32_t</type>
          <declname>AlarmValue</declname>
        </param>
        <briefdescription>
<para>Sets the RTC alarm value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>AlarmValue</parametername>
</parameternamelist>
<parameterdescription>
<para>RTC alarm new value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" line="184" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" bodystart="184" bodyend="192"/>
        <references refid="group___r_t_c___private___functions_1ga23612d9da2fe057a0cd72c684e5b438a" compoundref="stm32f10x__rtc_8c" startline="111" endline="115">RTC_EnterConfigMode</references>
        <references refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" compoundref="stm32f10x_8h" startline="1389">RTC</references>
        <references refid="group___r_t_c___private___defines_1gae19d75bb0ecb5e93d97e026a04d4854f" compoundref="stm32f10x__rtc_8c" startline="44">RTC_LSB_MASK</references>
        <references refid="group___r_t_c___private___functions_1ga7585aa6e2dbb497173b2fd03bac0d304" compoundref="stm32f10x__rtc_8c" startline="122" endline="126">RTC_ExitConfigMode</references>
      </memberdef>
      <memberdef kind="function" id="group___r_t_c___private___functions_1gaa4f00e0469fedcf6cbf23760e6d801ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t RTC_GetDivider</definition>
        <argsstring>(void)</argsstring>
        <name>RTC_GetDivider</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Gets the RTC divider value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>RTC</parametername>
</parameternamelist>
<parameterdescription>
<para>Divider value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" line="204" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" bodystart="204" bodyend="210"/>
        <references refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" compoundref="stm32f10x_8h" startline="1389">RTC</references>
      </memberdef>
      <memberdef kind="function" id="group___r_t_c___private___functions_1gaa0a406ef860d5231748c5f0d82673036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RTC_WaitForLastTask</definition>
        <argsstring>(void)</argsstring>
        <name>RTC_WaitForLastTask</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Waits until last write operation on RTC registers has finished. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function must be called before any write to RTC registers. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" line="218" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" bodystart="218" bodyend="224"/>
        <references refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" compoundref="stm32f10x_8h" startline="1389">RTC</references>
        <references refid="group___r_t_c__interrupts__flags_1ga203dcbb991497e4d0e6722815f6db942" compoundref="stm32f10x__rtc_8h" startline="72">RTC_FLAG_RTOFF</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
      </memberdef>
      <memberdef kind="function" id="group___r_t_c___private___functions_1gaca4346e0dc15dccc15179786b28450db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RTC_WaitForSynchro</definition>
        <argsstring>(void)</argsstring>
        <name>RTC_WaitForSynchro</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Waits until the RTC registers (RTC_CNT, RTC_ALR and RTC_PRL) are synchronized with RTC APB clock. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This function must be called before any read operation after an APB reset or an APB clock stop. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" line="234" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" bodystart="234" bodyend="242"/>
        <references refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" compoundref="stm32f10x_8h" startline="1389">RTC</references>
        <references refid="group___r_t_c__interrupts__flags_1ga78c4245996bef8d5f39226b6e37ed9c0" compoundref="stm32f10x__rtc_8h" startline="73">RTC_FLAG_RSF</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
      </memberdef>
      <memberdef kind="function" id="group___r_t_c___private___functions_1ga21a85e5f846cb4552d5e76420779f3f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref></type>
        <definition>FlagStatus RTC_GetFlagStatus</definition>
        <argsstring>(uint16_t RTC_FLAG)</argsstring>
        <name>RTC_GetFlagStatus</name>
        <param>
          <type>uint16_t</type>
          <declname>RTC_FLAG</declname>
        </param>
        <briefdescription>
<para>Checks whether the specified RTC flag is set or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>RTC_FLAG</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the flag to check. This parameter can be one the following values: <itemizedlist>
<listitem><para>RTC_FLAG_RTOFF: RTC Operation OFF flag </para></listitem>
<listitem><para>RTC_FLAG_RSF: Registers Synchronized flag </para></listitem>
<listitem><para>RTC_FLAG_OW: Overflow flag </para></listitem>
<listitem><para>RTC_FLAG_ALR: Alarm flag </para></listitem>
<listitem><para>RTC_FLAG_SEC: Second flag </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of RTC_FLAG (SET or RESET). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" line="255" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" bodystart="255" bodyend="271"/>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___r_t_c__interrupts__flags_1ga2126725a0d48f1c40f42566e249620ef" compoundref="stm32f10x__rtc_8h" startline="78">IS_RTC_GET_FLAG</references>
        <references refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" compoundref="stm32f10x_8h" startline="1389">RTC</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" compoundref="stm32f10x_8h" startline="519">SET</references>
      </memberdef>
      <memberdef kind="function" id="group___r_t_c___private___functions_1gacefb05730a77ffaa273c1ac3ade1a22f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RTC_ClearFlag</definition>
        <argsstring>(uint16_t RTC_FLAG)</argsstring>
        <name>RTC_ClearFlag</name>
        <param>
          <type>uint16_t</type>
          <declname>RTC_FLAG</declname>
        </param>
        <briefdescription>
<para>Clears the RTC&apos;s pending flags. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>RTC_FLAG</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the flag to clear. This parameter can be any combination of the following values: <itemizedlist>
<listitem><para>RTC_FLAG_RSF: Registers Synchronized flag. This flag is cleared only after an APB reset or an APB Clock stop. </para></listitem>
<listitem><para>RTC_FLAG_OW: Overflow flag </para></listitem>
<listitem><para>RTC_FLAG_ALR: Alarm flag </para></listitem>
<listitem><para>RTC_FLAG_SEC: Second flag </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" line="284" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" bodystart="284" bodyend="291"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___r_t_c__interrupts__flags_1ga5f8a9327a258f16f29703fa3e3cc8af7" compoundref="stm32f10x__rtc_8h" startline="77">IS_RTC_CLEAR_FLAG</references>
        <references refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" compoundref="stm32f10x_8h" startline="1389">RTC</references>
      </memberdef>
      <memberdef kind="function" id="group___r_t_c___private___functions_1ga23274ad8aa28e86d5b0d58eee295db21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref></type>
        <definition>ITStatus RTC_GetITStatus</definition>
        <argsstring>(uint16_t RTC_IT)</argsstring>
        <name>RTC_GetITStatus</name>
        <param>
          <type>uint16_t</type>
          <declname>RTC_IT</declname>
        </param>
        <briefdescription>
<para>Checks whether the specified RTC interrupt has occurred or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>RTC_IT</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the RTC interrupts sources to check. This parameter can be one of the following values: <itemizedlist>
<listitem><para>RTC_IT_OW: Overflow interrupt </para></listitem>
<listitem><para>RTC_IT_ALR: Alarm interrupt </para></listitem>
<listitem><para>RTC_IT_SEC: Second interrupt </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the RTC_IT (SET or RESET). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" line="302" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" bodystart="302" bodyend="318"/>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___r_t_c__interrupts__define_1ga2e10d8ccb2aa398ac14bde526f98dbc9" compoundref="stm32f10x__rtc_8h" startline="62">IS_RTC_GET_IT</references>
        <references refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" compoundref="stm32f10x_8h" startline="1389">RTC</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" compoundref="stm32f10x_8h" startline="519">SET</references>
      </memberdef>
      <memberdef kind="function" id="group___r_t_c___private___functions_1ga62b9a04d89a11f28db7dcfd50d9ee768" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RTC_ClearITPendingBit</definition>
        <argsstring>(uint16_t RTC_IT)</argsstring>
        <name>RTC_ClearITPendingBit</name>
        <param>
          <type>uint16_t</type>
          <declname>RTC_IT</declname>
        </param>
        <briefdescription>
<para>Clears the RTC&apos;s interrupt pending bits. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>RTC_IT</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the interrupt pending bit to clear. This parameter can be any combination of the following values: <itemizedlist>
<listitem><para>RTC_IT_OW: Overflow interrupt </para></listitem>
<listitem><para>RTC_IT_ALR: Alarm interrupt </para></listitem>
<listitem><para>RTC_IT_SEC: Second interrupt </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" line="329" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c" bodystart="329" bodyend="336"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___r_t_c__interrupts__define_1ga5c941995b804ce4c7ef62e28e0133a83" compoundref="stm32f10x__rtc_8h" startline="61">IS_RTC_IT</references>
        <references refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" compoundref="stm32f10x_8h" startline="1389">RTC</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file provides all the RTC firmware functions. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>MCD Application Team </para></simplesect>
<simplesect kind="version"><para>V3.5.0 </para></simplesect>
<simplesect kind="date"><para>11-March-2011 </para></simplesect>
<simplesect kind="attention"><para></para></simplesect>
THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.</para><para><heading level="2"><center><copy/> COPYRIGHT 2011 STMicroelectronics</center></heading>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="22"><highlight class="comment">/*<sp/>Includes<sp/>------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stm32f10x__rtc_8h" kindref="compound">stm32f10x_rtc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="group___r_t_c___private___defines_1gae19d75bb0ecb5e93d97e026a04d4854f" refkind="member"><highlight class="preprocessor">#define<sp/>RTC_LSB_MASK<sp/><sp/><sp/><sp/><sp/>((uint32_t)0x0000FFFF)<sp/><sp/></highlight></codeline>
<codeline lineno="45" refid="group___r_t_c___private___defines_1ga47b3eed8e018a9139bc7bb374c7ca125" refkind="member"><highlight class="preprocessor">#define<sp/>PRLH_MSB_MASK<sp/><sp/><sp/><sp/>((uint32_t)0x000F0000)<sp/><sp/></highlight></codeline>
<codeline lineno="90" refid="group___r_t_c___private___functions_1ga175dfe88866234730c1ec40d2221c4f4" refkind="member"><highlight class="preprocessor">void<sp/>RTC_ITConfig(uint16_t<sp/>RTC_IT,<sp/>FunctionalState<sp/>NewState)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___r_t_c__interrupts__define_1ga5c941995b804ce4c7ef62e28e0133a83" kindref="member">IS_RTC_IT</ref>(RTC_IT));<sp/><sp/></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" kindref="member">RTC</ref>-&gt;CRH<sp/>|=<sp/>RTC_IT;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" kindref="member">RTC</ref>-&gt;CRH<sp/>&amp;=<sp/>(uint16_t)~RTC_IT;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="group___r_t_c___private___functions_1ga23612d9da2fe057a0cd72c684e5b438a" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___r_t_c___private___functions_1ga23612d9da2fe057a0cd72c684e5b438a" kindref="member">RTC_EnterConfigMode</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>CNF<sp/>flag<sp/>to<sp/>enter<sp/>in<sp/>the<sp/>Configuration<sp/>Mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><ref refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" kindref="member">RTC</ref>-&gt;CRL<sp/>|=<sp/><ref refid="group___peripheral___registers___bits___definition_1ga3829687c89579c020665c19b8937a820" kindref="member">RTC_CRL_CNF</ref>;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="group___r_t_c___private___functions_1ga7585aa6e2dbb497173b2fd03bac0d304" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___r_t_c___private___functions_1ga7585aa6e2dbb497173b2fd03bac0d304" kindref="member">RTC_ExitConfigMode</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>the<sp/>CNF<sp/>flag<sp/>to<sp/>exit<sp/>from<sp/>the<sp/>Configuration<sp/>Mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><ref refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" kindref="member">RTC</ref>-&gt;CRL<sp/>&amp;=<sp/>(uint16_t)~((uint16_t)<ref refid="group___peripheral___registers___bits___definition_1ga3829687c89579c020665c19b8937a820" kindref="member">RTC_CRL_CNF</ref>);<sp/></highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="group___r_t_c___private___functions_1ga6edb19a0ad8414a40610341121c5ea6c" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="group___r_t_c___private___functions_1ga6edb19a0ad8414a40610341121c5ea6c" kindref="member">RTC_GetCounter</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>uint16_t<sp/>tmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/><ref refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" kindref="member">RTC</ref>-&gt;CNTL;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(((uint32_t)<ref refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" kindref="member">RTC</ref>-&gt;CNTH<sp/>&lt;&lt;<sp/>16<sp/>)<sp/>|<sp/>tmp)<sp/>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[ILG]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(<sp/>__GNUC__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wconversion&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="group___r_t_c___private___functions_1gafa81ec17158de1d1a7740eca81b9fb65" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___r_t_c___private___functions_1gafa81ec17158de1d1a7740eca81b9fb65" kindref="member">RTC_SetCounter</ref>(uint32_t<sp/>CounterValue)</highlight></codeline>
<codeline lineno="152"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><ref refid="group___r_t_c___private___functions_1ga23612d9da2fe057a0cd72c684e5b438a" kindref="member">RTC_EnterConfigMode</ref>();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>RTC<sp/>COUNTER<sp/>MSB<sp/>word<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><ref refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" kindref="member">RTC</ref>-&gt;CNTH<sp/>=<sp/>CounterValue<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>RTC<sp/>COUNTER<sp/>LSB<sp/>word<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><ref refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" kindref="member">RTC</ref>-&gt;CNTL<sp/>=<sp/>(CounterValue<sp/>&amp;<sp/><ref refid="group___r_t_c___private___defines_1gae19d75bb0ecb5e93d97e026a04d4854f" kindref="member">RTC_LSB_MASK</ref>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><ref refid="group___r_t_c___private___functions_1ga7585aa6e2dbb497173b2fd03bac0d304" kindref="member">RTC_ExitConfigMode</ref>();</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="group___r_t_c___private___functions_1gaf76be6071d1ba65b009e0791069e602c" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___r_t_c___private___functions_1gaf76be6071d1ba65b009e0791069e602c" kindref="member">RTC_SetPrescaler</ref>(uint32_t<sp/>PrescalerValue)</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___r_t_c__interrupts__flags_1ga483b9ec67246cbfb2874c5a85f0cb4d8" kindref="member">IS_RTC_PRESCALER</ref>(PrescalerValue));</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><ref refid="group___r_t_c___private___functions_1ga23612d9da2fe057a0cd72c684e5b438a" kindref="member">RTC_EnterConfigMode</ref>();</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>RTC<sp/>PRESCALER<sp/>MSB<sp/>word<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><ref refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" kindref="member">RTC</ref>-&gt;PRLH<sp/>=<sp/>(PrescalerValue<sp/>&amp;<sp/><ref refid="group___r_t_c___private___defines_1ga47b3eed8e018a9139bc7bb374c7ca125" kindref="member">PRLH_MSB_MASK</ref>)<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>RTC<sp/>PRESCALER<sp/>LSB<sp/>word<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><ref refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" kindref="member">RTC</ref>-&gt;PRLL<sp/>=<sp/>(PrescalerValue<sp/>&amp;<sp/><ref refid="group___r_t_c___private___defines_1gae19d75bb0ecb5e93d97e026a04d4854f" kindref="member">RTC_LSB_MASK</ref>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><ref refid="group___r_t_c___private___functions_1ga7585aa6e2dbb497173b2fd03bac0d304" kindref="member">RTC_ExitConfigMode</ref>();</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="group___r_t_c___private___functions_1gaec644c636a30ab5e287ba60ffc77132c" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___r_t_c___private___functions_1gaec644c636a30ab5e287ba60ffc77132c" kindref="member">RTC_SetAlarm</ref>(uint32_t<sp/>AlarmValue)</highlight></codeline>
<codeline lineno="185"><highlight class="normal">{<sp/><sp/></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><ref refid="group___r_t_c___private___functions_1ga23612d9da2fe057a0cd72c684e5b438a" kindref="member">RTC_EnterConfigMode</ref>();</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>ALARM<sp/>MSB<sp/>word<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><ref refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" kindref="member">RTC</ref>-&gt;ALRH<sp/>=<sp/>AlarmValue<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>ALARM<sp/>LSB<sp/>word<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><ref refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" kindref="member">RTC</ref>-&gt;ALRL<sp/>=<sp/>(AlarmValue<sp/>&amp;<sp/><ref refid="group___r_t_c___private___defines_1gae19d75bb0ecb5e93d97e026a04d4854f" kindref="member">RTC_LSB_MASK</ref>);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><ref refid="group___r_t_c___private___functions_1ga7585aa6e2dbb497173b2fd03bac0d304" kindref="member">RTC_ExitConfigMode</ref>();</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[ILG]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(<sp/>__GNUC__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="group___r_t_c___private___functions_1gaa4f00e0469fedcf6cbf23760e6d801ed" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="group___r_t_c___private___functions_1gaa4f00e0469fedcf6cbf23760e6d801ed" kindref="member">RTC_GetDivider</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="205"><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>uint32_t<sp/>tmp<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>((uint32_t)<ref refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" kindref="member">RTC</ref>-&gt;DIVH<sp/>&amp;<sp/>(uint32_t)0x000F)<sp/>&lt;&lt;<sp/>16;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>tmp<sp/>|=<sp/><ref refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" kindref="member">RTC</ref>-&gt;DIVL;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tmp;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="group___r_t_c___private___functions_1gaa0a406ef860d5231748c5f0d82673036" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___r_t_c___private___functions_1gaa0a406ef860d5231748c5f0d82673036" kindref="member">RTC_WaitForLastTask</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="219"><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>until<sp/>RTOFF<sp/>flag<sp/>is<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" kindref="member">RTC</ref>-&gt;CRL<sp/>&amp;<sp/><ref refid="group___r_t_c__interrupts__flags_1ga203dcbb991497e4d0e6722815f6db942" kindref="member">RTC_FLAG_RTOFF</ref>)<sp/>==<sp/>(uint16_t)<ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="group___r_t_c___private___functions_1gaca4346e0dc15dccc15179786b28450db" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___r_t_c___private___functions_1gaca4346e0dc15dccc15179786b28450db" kindref="member">RTC_WaitForSynchro</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>RSF<sp/>flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><ref refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" kindref="member">RTC</ref>-&gt;CRL<sp/>&amp;=<sp/>(uint16_t)~<ref refid="group___r_t_c__interrupts__flags_1ga78c4245996bef8d5f39226b6e37ed9c0" kindref="member">RTC_FLAG_RSF</ref>;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Loop<sp/>until<sp/>RSF<sp/>flag<sp/>is<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((<ref refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" kindref="member">RTC</ref>-&gt;CRL<sp/>&amp;<sp/><ref refid="group___r_t_c__interrupts__flags_1ga78c4245996bef8d5f39226b6e37ed9c0" kindref="member">RTC_FLAG_RSF</ref>)<sp/>==<sp/>(uint16_t)<ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>)</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="group___r_t_c___private___functions_1ga21a85e5f846cb4552d5e76420779f3f6" refkind="member"><highlight class="normal"><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref><sp/><ref refid="group___r_t_c___private___functions_1ga21a85e5f846cb4552d5e76420779f3f6" kindref="member">RTC_GetFlagStatus</ref>(uint16_t<sp/>RTC_FLAG)</highlight></codeline>
<codeline lineno="256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___r_t_c__interrupts__flags_1ga2126725a0d48f1c40f42566e249620ef" kindref="member">IS_RTC_GET_FLAG</ref>(RTC_FLAG));<sp/></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" kindref="member">RTC</ref>-&gt;CRL<sp/>&amp;<sp/>RTC_FLAG)<sp/>!=<sp/>(uint16_t)<ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" kindref="member">SET</ref>;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bitstatus;</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="group___r_t_c___private___functions_1gacefb05730a77ffaa273c1ac3ade1a22f" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___r_t_c___private___functions_1gacefb05730a77ffaa273c1ac3ade1a22f" kindref="member">RTC_ClearFlag</ref>(uint16_t<sp/>RTC_FLAG)</highlight></codeline>
<codeline lineno="285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___r_t_c__interrupts__flags_1ga5f8a9327a258f16f29703fa3e3cc8af7" kindref="member">IS_RTC_CLEAR_FLAG</ref>(RTC_FLAG));<sp/></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>corresponding<sp/>RTC<sp/>flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><ref refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" kindref="member">RTC</ref>-&gt;CRL<sp/>&amp;=<sp/>(uint16_t)~RTC_FLAG;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="group___r_t_c___private___functions_1ga23274ad8aa28e86d5b0d58eee295db21" refkind="member"><highlight class="normal"><ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref><sp/><ref refid="group___r_t_c___private___functions_1ga23274ad8aa28e86d5b0d58eee295db21" kindref="member">RTC_GetITStatus</ref>(uint16_t<sp/>RTC_IT)</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___r_t_c__interrupts__define_1ga2e10d8ccb2aa398ac14bde526f98dbc9" kindref="member">IS_RTC_GET_IT</ref>(RTC_IT));<sp/></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/>bitstatus<sp/>=<sp/>(<ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref>)(<ref refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" kindref="member">RTC</ref>-&gt;CRL<sp/>&amp;<sp/>RTC_IT);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((<ref refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" kindref="member">RTC</ref>-&gt;CRH<sp/>&amp;<sp/>RTC_IT)<sp/>!=<sp/>(uint16_t)<ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>)<sp/>&amp;&amp;<sp/>(bitstatus<sp/>!=<sp/>(uint16_t)RESET))</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" kindref="member">SET</ref>;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bitstatus;</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="group___r_t_c___private___functions_1ga62b9a04d89a11f28db7dcfd50d9ee768" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___r_t_c___private___functions_1ga62b9a04d89a11f28db7dcfd50d9ee768" kindref="member">RTC_ClearITPendingBit</ref>(uint16_t<sp/>RTC_IT)</highlight></codeline>
<codeline lineno="330"><highlight class="normal">{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___r_t_c__interrupts__define_1ga5c941995b804ce4c7ef62e28e0133a83" kindref="member">IS_RTC_IT</ref>(RTC_IT));<sp/><sp/></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>corresponding<sp/>RTC<sp/>pending<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><ref refid="group___peripheral__declaration_1ga5359a088f5d8b20ce74d920e46059304" kindref="member">RTC</ref>-&gt;CRL<sp/>&amp;=<sp/>(uint16_t)~RTC_IT;</highlight></codeline>
<codeline lineno="336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="comment">/*******************<sp/>(C)<sp/>COPYRIGHT<sp/>2011<sp/>STMicroelectronics<sp/>*****END<sp/>OF<sp/>FILE****/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_rtc.c"/>
  </compounddef>
</doxygen>
