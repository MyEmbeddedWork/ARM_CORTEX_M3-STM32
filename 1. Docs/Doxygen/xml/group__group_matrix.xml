<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__group_matrix" kind="group">
    <compoundname>groupMatrix</compoundname>
    <title>Matrix Functions</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This set of functions provides basic matrix math operations. The functions operate on matrix data structures. For example, the type definition for the floating-point matrix structure is shown below: <preformatted>
    typedef struct
    {
      uint16_t numRows;     // number of rows of the matrix.
      uint16_t numCols;     // number of columns of the matrix.
      float32_t *pData;     // points to the data of the matrix.
    } <ref refid="structarm__matrix__instance__f32" kindref="compound">arm_matrix_instance_f32</ref>;
</preformatted> There are similar definitions for Q15 and Q31 data types.</para><para>The structure specifies the size of the matrix and then points to an array of data. The array is of size <computeroutput>numRows X numCols</computeroutput> and the values are arranged in row order. That is, the matrix element (i, j) is stored at: <preformatted>
    pData[i*numCols + j]
</preformatted></para><para><simplesect kind="par"><title>Init Functions</title><para>There is an associated initialization function for each type of matrix data structure. The initialization function sets the values of the internal structure fields. Refer to the function <computeroutput><ref refid="arm__math_8h_1a11e3dc41592a6401c13182fef9416a27" kindref="member">arm_mat_init_f32()</ref></computeroutput>, <computeroutput><ref refid="arm__math_8h_1a48a5e5d37e1f062cc57fcfaf683343cc" kindref="member">arm_mat_init_q31()</ref></computeroutput> and <computeroutput><ref refid="arm__math_8h_1a31a7c2b991803d49719393eb2d53dc26" kindref="member">arm_mat_init_q15()</ref></computeroutput> for floating-point, Q31 and Q15 types, respectively.</para></simplesect>
<simplesect kind="par"><title></title><para>Use of the initialization function is optional. However, if initialization function is used then the instance structure cannot be placed into a const data section. To place the instance structure in a const data section, manually initialize the data structure. For example: <preformatted>
<computeroutput><ref refid="structarm__matrix__instance__f32" kindref="compound">arm_matrix_instance_f32</ref> S = {nRows, nColumns, pData};</computeroutput>
<computeroutput><ref refid="structarm__matrix__instance__q31" kindref="compound">arm_matrix_instance_q31</ref> S = {nRows, nColumns, pData};</computeroutput>
<computeroutput><ref refid="structarm__matrix__instance__q15" kindref="compound">arm_matrix_instance_q15</ref> S = {nRows, nColumns, pData};</computeroutput>
</preformatted> where <computeroutput>nRows</computeroutput> specifies the number of rows, <computeroutput>nColumns</computeroutput> specifies the number of columns, and <computeroutput>pData</computeroutput> points to the data array.</para></simplesect>
<simplesect kind="par"><title>Size Checking</title><para>By default all of the matrix functions perform size checking on the input and output matrices. For example, the matrix addition function verifies that the two input matrices and the output matrix all have the same number of rows and columns. If the size check fails the functions return: <preformatted>
    ARM_MATH_SIZE_MISMATCH
</preformatted> Otherwise the functions return <preformatted>
    ARM_MATH_SUCCESS
</preformatted> There is some overhead associated with this matrix size checking. The matrix size checking is enabled via the #define <preformatted>
    ARM_MATH_MATRIX_CHECK
</preformatted> within the library project settings. By default this macro is defined and size checking is enabled. By changing the project settings and undefining this macro size checking is eliminated and the functions run a bit faster. With size checking disabled the functions always return <computeroutput>ARM_MATH_SUCCESS</computeroutput>. </para></simplesect>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
