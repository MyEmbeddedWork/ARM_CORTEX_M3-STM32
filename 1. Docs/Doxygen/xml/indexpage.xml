<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>CMSIS DSP Software Library</title>
    <detaileddescription>
<para><heading level="2">Introduction </heading>
</para><para>This user manual describes the CMSIS DSP software library, a suite of common signal processing functions for use on Cortex-M processor based devices.</para><para>The library is divided into a number of functions each covering a specific category:<itemizedlist>
<listitem><para>Basic math functions</para></listitem><listitem><para>Fast math functions</para></listitem><listitem><para>Complex math functions</para></listitem><listitem><para>Filters</para></listitem><listitem><para>Matrix functions</para></listitem><listitem><para>Transforms</para></listitem><listitem><para>Motor control functions</para></listitem><listitem><para>Statistical functions</para></listitem><listitem><para>Support functions</para></listitem><listitem><para>Interpolation functions</para></listitem></itemizedlist>
</para><para>The library has separate functions for operating on 8-bit integers, 16-bit integers, 32-bit integer and 32-bit floating-point values.</para><para><heading level="2">Using the Library </heading>
</para><para>The library installer contains prebuilt versions of the libraries in the <computeroutput>Lib</computeroutput> folder.<itemizedlist>
<listitem><para>arm_cortexM7lfdp_math.lib (Little endian and Double Precision Floating Point Unit on Cortex-M7)</para></listitem><listitem><para>arm_cortexM7bfdp_math.lib (Big endian and Double Precision Floating Point Unit on Cortex-M7)</para></listitem><listitem><para>arm_cortexM7lfsp_math.lib (Little endian and Single Precision Floating Point Unit on Cortex-M7)</para></listitem><listitem><para>arm_cortexM7bfsp_math.lib (Big endian and Single Precision Floating Point Unit on Cortex-M7)</para></listitem><listitem><para>arm_cortexM7l_math.lib (Little endian on Cortex-M7)</para></listitem><listitem><para>arm_cortexM7b_math.lib (Big endian on Cortex-M7)</para></listitem><listitem><para>arm_cortexM4lf_math.lib (Little endian and Floating Point Unit on Cortex-M4)</para></listitem><listitem><para>arm_cortexM4bf_math.lib (Big endian and Floating Point Unit on Cortex-M4)</para></listitem><listitem><para>arm_cortexM4l_math.lib (Little endian on Cortex-M4)</para></listitem><listitem><para>arm_cortexM4b_math.lib (Big endian on Cortex-M4)</para></listitem><listitem><para>arm_cortexM3l_math.lib (Little endian on Cortex-M3)</para></listitem><listitem><para>arm_cortexM3b_math.lib (Big endian on Cortex-M3)</para></listitem><listitem><para>arm_cortexM0l_math.lib (Little endian on Cortex-M0 / CortexM0+)</para></listitem><listitem><para>arm_cortexM0b_math.lib (Big endian on Cortex-M0 / CortexM0+)</para></listitem></itemizedlist>
</para><para>The library functions are declared in the public file <computeroutput><ref refid="arm__math_8h" kindref="compound">arm_math.h</ref></computeroutput> which is placed in the <computeroutput>Include</computeroutput> folder. Simply include this file and link the appropriate library in the application and begin calling the library functions. The Library supports single public header file <computeroutput> <ref refid="arm__math_8h" kindref="compound">arm_math.h</ref></computeroutput> for Cortex-M7/M4/M3/M0/M0+ with little endian and big endian. Same header file will be used for floating point unit(FPU) variants. Define the appropriate pre processor MACRO ARM_MATH_CM7 or ARM_MATH_CM4 or ARM_MATH_CM3 or ARM_MATH_CM0 or ARM_MATH_CM0PLUS depending on the target processor in the application.</para><para><heading level="2">Examples </heading>
</para><para>The library ships with a number of examples which demonstrate how to use the library functions.</para><para><heading level="2">Toolchain Support </heading>
</para><para>The library has been developed and tested with MDK-ARM version 5.14.0.0 The library is being tested in GCC and IAR toolchains and updates on this activity will be made available shortly.</para><para><heading level="2">Building the Library </heading>
</para><para>The library installer contains a project file to re build libraries on MDK-ARM Tool chain in the <computeroutput>CMSIS\DSP_Lib\Source\ARM</computeroutput> folder.<itemizedlist>
<listitem><para>arm_cortexM_math.uvprojx</para></listitem></itemizedlist>
</para><para>The libraries can be built by opening the arm_cortexM_math.uvprojx project in MDK-ARM, selecting a specific target, and defining the optional pre processor MACROs detailed above.</para><para><heading level="2">Pre-processor Macros </heading>
</para><para>Each library project have differant pre-processor macros.</para><para><itemizedlist>
<listitem><para>UNALIGNED_SUPPORT_DISABLE:</para></listitem></itemizedlist>
</para><para>Define macro UNALIGNED_SUPPORT_DISABLE, If the silicon does not support unaligned memory access</para><para><itemizedlist>
<listitem><para>ARM_MATH_BIG_ENDIAN:</para></listitem></itemizedlist>
</para><para>Define macro ARM_MATH_BIG_ENDIAN to build the library for big endian targets. By default library builds for little endian targets.</para><para><itemizedlist>
<listitem><para>ARM_MATH_MATRIX_CHECK:</para></listitem></itemizedlist>
</para><para>Define macro ARM_MATH_MATRIX_CHECK for checking on the input and output sizes of matrices</para><para><itemizedlist>
<listitem><para>ARM_MATH_ROUNDING:</para></listitem></itemizedlist>
</para><para>Define macro ARM_MATH_ROUNDING for rounding on support functions</para><para><itemizedlist>
<listitem><para>ARM_MATH_CMx:</para></listitem></itemizedlist>
</para><para>Define macro ARM_MATH_CM4 for building the library on Cortex-M4 target, ARM_MATH_CM3 for building library on Cortex-M3 target and ARM_MATH_CM0 for building library on Cortex-M0 target, ARM_MATH_CM0PLUS for building library on Cortex-M0+ target, and ARM_MATH_CM7 for building the library on cortex-M7.</para><para><itemizedlist>
<listitem><para>__FPU_PRESENT:</para></listitem></itemizedlist>
</para><para>Initialize macro __FPU_PRESENT = 1 when building on FPU supported Targets. Enable this macro for M4bf and M4lf libraries</para><para><hruler/>
 <heading level="2">CMSIS-DSP in ARM::CMSIS Pack </heading>
</para><para>The following files relevant to CMSIS-DSP are present in the <bold>ARM::CMSIS</bold> Pack directories: <table rows="5" cols="2"><row>
<entry thead="yes"><para>File/Folder </para></entry><entry thead="yes"><para>Content  </para></entry></row>
<row>
<entry thead="no"><para><bold>CMSIS\Documentation\DSP</bold> </para></entry><entry thead="no"><para>This documentation </para></entry></row>
<row>
<entry thead="no"><para><bold>CMSIS\DSP_Lib</bold> </para></entry><entry thead="no"><para>Software license agreement (license.txt) </para></entry></row>
<row>
<entry thead="no"><para><bold>CMSIS\DSP_Lib\Examples</bold> </para></entry><entry thead="no"><para>Example projects demonstrating the usage of the library functions </para></entry></row>
<row>
<entry thead="no"><para><bold>CMSIS\DSP_Lib\Source</bold> </para></entry><entry thead="no"><para>Source files for rebuilding the library </para></entry></row>
</table>
<hruler/>
 <heading level="2">Revision History of CMSIS-DSP </heading>
</para><para>Please refer to ChangeLog_pg.</para><para><heading level="2">Copyright Notice </heading>
</para><para>Copyright (C) 2010-2015 ARM Limited. All rights reserved. </para>    </detaileddescription>
  </compounddef>
</doxygen>
