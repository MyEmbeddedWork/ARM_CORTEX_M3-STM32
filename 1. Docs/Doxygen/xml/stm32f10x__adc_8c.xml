<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="stm32f10x__adc_8c" kind="file" language="C++">
    <compoundname>stm32f10x_adc.c</compoundname>
    <includes refid="stm32f10x__adc_8h" local="yes">stm32f10x_adc.h</includes>
    <includes refid="stm32f10x__rcc_8h" local="yes">stm32f10x_rcc.h</includes>
    <incdepgraph>
      <node id="846">
        <label>system_stm32f10x.h</label>
        <link refid="system__stm32f10x_8h"/>
      </node>
      <node id="839">
        <label>C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c</label>
        <link refid="stm32f10x__adc_8c"/>
        <childnode refid="840" relation="include">
        </childnode>
        <childnode refid="847" relation="include">
        </childnode>
      </node>
      <node id="843">
        <label>stdint.h</label>
      </node>
      <node id="842">
        <label>core_cm3.h</label>
        <link refid="core__cm3_8h"/>
        <childnode refid="843" relation="include">
        </childnode>
        <childnode refid="844" relation="include">
        </childnode>
        <childnode refid="845" relation="include">
        </childnode>
      </node>
      <node id="845">
        <label>core_cmFunc.h</label>
        <link refid="core__cm_func_8h"/>
      </node>
      <node id="840">
        <label>stm32f10x_adc.h</label>
        <link refid="stm32f10x__adc_8h"/>
        <childnode refid="841" relation="include">
        </childnode>
      </node>
      <node id="847">
        <label>stm32f10x_rcc.h</label>
        <link refid="stm32f10x__rcc_8h"/>
        <childnode refid="841" relation="include">
        </childnode>
      </node>
      <node id="844">
        <label>core_cmInstr.h</label>
        <link refid="core__cm_instr_8h"/>
      </node>
      <node id="841">
        <label>stm32f10x.h</label>
        <link refid="stm32f10x_8h"/>
        <childnode refid="842" relation="include">
        </childnode>
        <childnode refid="846" relation="include">
        </childnode>
        <childnode refid="843" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga88cecf0c336d950115d7a52d599de816" prot="public" static="no">
        <name>CR1_DISCNUM_Reset</name>
        <initializer>((uint32_t)0xFFFF1FFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="54" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga95f4f653adde3407c116919c2b7d9c74" prot="public" static="no">
        <name>CR1_DISCEN_Set</name>
        <initializer>((uint32_t)0x00000800)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="57" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga959f617e77853bff85ca5e8d6fba6611" prot="public" static="no">
        <name>CR1_DISCEN_Reset</name>
        <initializer>((uint32_t)0xFFFFF7FF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="58" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1gaa8478f12e212738e249a7fafb69d4dd4" prot="public" static="no">
        <name>CR1_JAUTO_Set</name>
        <initializer>((uint32_t)0x00000400)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="61" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1gab6c4a9f0a661bf7c5add35ea3a90b756" prot="public" static="no">
        <name>CR1_JAUTO_Reset</name>
        <initializer>((uint32_t)0xFFFFFBFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="62" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1gafef4d16c890bf5e6eb381ad01c829309" prot="public" static="no">
        <name>CR1_JDISCEN_Set</name>
        <initializer>((uint32_t)0x00001000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="65" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1gab6ffba92495342bd5f0a8b1fa216526b" prot="public" static="no">
        <name>CR1_JDISCEN_Reset</name>
        <initializer>((uint32_t)0xFFFFEFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="66" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1gabe7e68383d281e58707a1cd749a3374e" prot="public" static="no">
        <name>CR1_AWDCH_Reset</name>
        <initializer>((uint32_t)0xFFFFFFE0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="69" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1gae53703f0c718ecc5b3e1a69c60af3697" prot="public" static="no">
        <name>CR1_AWDMode_Reset</name>
        <initializer>((uint32_t)0xFF3FFDFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="72" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga67f7dd35ea3d1296677e5fc50b88fa90" prot="public" static="no">
        <name>CR1_CLEAR_Mask</name>
        <initializer>((uint32_t)0xFFF0FEFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="75" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga21779759f3d5d1389b114d7a1bb6fca1" prot="public" static="no">
        <name>CR2_ADON_Set</name>
        <initializer>((uint32_t)0x00000001)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="78" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1gaa3eb5d77998387159508a57d7e09f459" prot="public" static="no">
        <name>CR2_ADON_Reset</name>
        <initializer>((uint32_t)0xFFFFFFFE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="79" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga7fa8ba27f5b249dd7cb0b6e53a25d6e2" prot="public" static="no">
        <name>CR2_DMA_Set</name>
        <initializer>((uint32_t)0x00000100)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="82" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga8e674886185af86bc17d9266ddbdca7c" prot="public" static="no">
        <name>CR2_DMA_Reset</name>
        <initializer>((uint32_t)0xFFFFFEFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="83" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1gaf256d4606fbe82d7e4cdc8d177653b53" prot="public" static="no">
        <name>CR2_RSTCAL_Set</name>
        <initializer>((uint32_t)0x00000008)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="86" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga6705aae168367a2d961e64dd9137ae3a" prot="public" static="no">
        <name>CR2_CAL_Set</name>
        <initializer>((uint32_t)0x00000004)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="89" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1gac40733c6a8918c16cd52fcade75a6de6" prot="public" static="no">
        <name>CR2_SWSTART_Set</name>
        <initializer>((uint32_t)0x00400000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="92" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1gaf39824995dbcbabf76697cd7116352d6" prot="public" static="no">
        <name>CR2_EXTTRIG_Set</name>
        <initializer>((uint32_t)0x00100000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="95" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga8a96cb9aac77bab199f3dff54da230a6" prot="public" static="no">
        <name>CR2_EXTTRIG_Reset</name>
        <initializer>((uint32_t)0xFFEFFFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="96" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1gad9bed838631a650428d2318694a66094" prot="public" static="no">
        <name>CR2_EXTTRIG_SWSTART_Set</name>
        <initializer>((uint32_t)0x00500000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="99" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1gad0a6e5cf09868318178434340ade2fe1" prot="public" static="no">
        <name>CR2_EXTTRIG_SWSTART_Reset</name>
        <initializer>((uint32_t)0xFFAFFFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="100" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1gafa78c11893aa39ad2c0117414ae1704d" prot="public" static="no">
        <name>CR2_JEXTSEL_Reset</name>
        <initializer>((uint32_t)0xFFFF8FFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="103" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga20a54958799c567e9efaa0635aa18a99" prot="public" static="no">
        <name>CR2_JEXTTRIG_Set</name>
        <initializer>((uint32_t)0x00008000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="106" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga94404d5a0103c5e2d7ffa45956356931" prot="public" static="no">
        <name>CR2_JEXTTRIG_Reset</name>
        <initializer>((uint32_t)0xFFFF7FFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="107" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga5292617782f3327f2e1ed0bd9461704e" prot="public" static="no">
        <name>CR2_JSWSTART_Set</name>
        <initializer>((uint32_t)0x00200000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="110" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1gaac5989ccf10d806f2f6a70f925d6b130" prot="public" static="no">
        <name>CR2_JEXTTRIG_JSWSTART_Set</name>
        <initializer>((uint32_t)0x00208000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="113" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1gaaa2fb01c1649fde61115602559942ee2" prot="public" static="no">
        <name>CR2_JEXTTRIG_JSWSTART_Reset</name>
        <initializer>((uint32_t)0xFFDF7FFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="114" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga7f5e0f807edebbfcef4883f3ec42b9e8" prot="public" static="no">
        <name>CR2_TSVREFE_Set</name>
        <initializer>((uint32_t)0x00800000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="117" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1gaa207bc0eeed8b546dc9536b02df633b5" prot="public" static="no">
        <name>CR2_TSVREFE_Reset</name>
        <initializer>((uint32_t)0xFF7FFFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="118" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga49192361afb92aee0e3f1124ef1131a0" prot="public" static="no">
        <name>CR2_CLEAR_Mask</name>
        <initializer>((uint32_t)0xFFF1F7FD)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="121" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga8a04f115021dc5261562b4dc04c01109" prot="public" static="no">
        <name>SQR3_SQ_Set</name>
        <initializer>((uint32_t)0x0000001F)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="124" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga2329f779aee00e5990d6430a01de8cb0" prot="public" static="no">
        <name>SQR2_SQ_Set</name>
        <initializer>((uint32_t)0x0000001F)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="125" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga91fb5f63b765a543dfa419ea0219351b" prot="public" static="no">
        <name>SQR1_SQ_Set</name>
        <initializer>((uint32_t)0x0000001F)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="126" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga6e3e238f38d7ff17939cbd5417fc51cc" prot="public" static="no">
        <name>SQR1_CLEAR_Mask</name>
        <initializer>((uint32_t)0xFF0FFFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="129" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga5d460390dbe3b400b5e0fdf1e94929f0" prot="public" static="no">
        <name>JSQR_JSQ_Set</name>
        <initializer>((uint32_t)0x0000001F)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="132" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga46af9e738702305be0127f6c15c4f7b0" prot="public" static="no">
        <name>JSQR_JL_Set</name>
        <initializer>((uint32_t)0x00300000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="135" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1gac8d1173791ea10bac7c53a368d593a16" prot="public" static="no">
        <name>JSQR_JL_Reset</name>
        <initializer>((uint32_t)0xFFCFFFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="136" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga244048ec3ba9461a6609942def9a15ba" prot="public" static="no">
        <name>SMPR1_SMP_Set</name>
        <initializer>((uint32_t)0x00000007)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="139" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga6555beb1970c42125678d80530bba4d3" prot="public" static="no">
        <name>SMPR2_SMP_Set</name>
        <initializer>((uint32_t)0x00000007)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="140" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga5671a68d6f0d01c6c465ee7a3a8f3eea" prot="public" static="no">
        <name>JDR_Offset</name>
        <initializer>((uint8_t)0x28)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="143" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_c___private___defines_1ga35ecb1c96cfae175f5f00490e5e91e88" prot="public" static="no">
        <name>DR_ADDRESS</name>
        <initializer>((uint32_t)0x4001244C)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="146" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="146" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___a_d_c___private___functions_1ga31fa6bc09de17125e9db2830ce77c09b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_DeInit</definition>
        <argsstring>(ADC_TypeDef *ADCx)</argsstring>
        <name>ADC_DeInit</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <briefdescription>
<para>Deinitializes the ADCx peripheral registers to their default reset values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="185" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="185" bodyend="214"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___peripheral__declaration_1ga90d2d5c526ce5c0a551f533eccbee71a" compoundref="stm32f10x_8h" startline="1415">ADC1</references>
        <references refid="group___r_c_c___exported___functions_1gad94553850ac07106a27ee85fec37efdf" compoundref="stm32f10x__rcc_8c" startline="1185" endline="1198">RCC_APB2PeriphResetCmd</references>
        <references refid="group___a_p_b2__peripheral_1gacd24acb2cd5ca208652157f6c13d3145" compoundref="stm32f10x__rcc_8h" startline="505">RCC_APB2Periph_ADC1</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" compoundref="stm32f10x_8h" startline="521">ENABLE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="group___peripheral__declaration_1gac5503ae96c26b4475226f96715a1bf1e" compoundref="stm32f10x_8h" startline="1416">ADC2</references>
        <references refid="group___a_p_b2__peripheral_1ga4fd76e573e827702568d6064e33448b5" compoundref="stm32f10x__rcc_8h" startline="506">RCC_APB2Periph_ADC2</references>
        <references refid="group___peripheral__declaration_1gae917784606daf6b04c9b7b96b40c2f74" compoundref="stm32f10x_8h" startline="1421">ADC3</references>
        <references refid="group___a_p_b2__peripheral_1ga371d55bbf17bf965a213c59f2d276d72" compoundref="stm32f10x__rcc_8h" startline="511">RCC_APB2Periph_ADC3</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1gabbab6038cf8691404350625e477254f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_Init</definition>
        <argsstring>(ADC_TypeDef *ADCx, ADC_InitTypeDef *ADC_InitStruct)</argsstring>
        <name>ADC_Init</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type><ref refid="struct_a_d_c___init_type_def" kindref="compound">ADC_InitTypeDef</ref> *</type>
          <declname>ADC_InitStruct</declname>
        </param>
        <briefdescription>
<para>Initializes the ADCx peripheral according to the specified parameters in the ADC_InitStruct. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADC_InitStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an <ref refid="struct_a_d_c___init_type_def" kindref="compound">ADC_InitTypeDef</ref> structure that contains the configuration information for the specified ADC peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="224" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="224" bodyend="274"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___a_d_c__mode_1ga4abf4c7de28a42d7b124c9e403a6e537" compoundref="stm32f10x__adc_8h" startline="111">IS_ADC_MODE</references>
        <references refid="struct_a_d_c___init_type_def_1a0f9ec17ad585d66a54625213062c9260" compoundref="stm32f10x__adc_8h" startline="58">ADC_InitTypeDef::ADC_Mode</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="struct_a_d_c___init_type_def_1aaf44f54f22ab40bf8fae01f075aa4c87" compoundref="stm32f10x__adc_8h" startline="62">ADC_InitTypeDef::ADC_ScanConvMode</references>
        <references refid="struct_a_d_c___init_type_def_1a2149036a332281e70a36879a2396b8d1" compoundref="stm32f10x__adc_8h" startline="66">ADC_InitTypeDef::ADC_ContinuousConvMode</references>
        <references refid="group___a_d_c__external__trigger__sources__for__regular__channels__conversion_1gac74e6054adbedd72822cacde69105318" compoundref="stm32f10x__adc_8h" startline="146">IS_ADC_EXT_TRIG</references>
        <references refid="struct_a_d_c___init_type_def_1ae5d0c48e70c2a39355b7ab0cc1df8310" compoundref="stm32f10x__adc_8h" startline="70">ADC_InitTypeDef::ADC_ExternalTrigConv</references>
        <references refid="group___a_d_c__data__align_1ga2903b620e3c61dc47ed8c0fbf4197801" compoundref="stm32f10x__adc_8h" startline="170">IS_ADC_DATA_ALIGN</references>
        <references refid="struct_a_d_c___init_type_def_1a622e89d8fba3900f20aaf40d5560ab7b" compoundref="stm32f10x__adc_8h" startline="74">ADC_InitTypeDef::ADC_DataAlign</references>
        <references refid="group___a_d_c__regular__length_1ga1ea82167f6dccdef1d160675f4534584" compoundref="stm32f10x__adc_8h" startline="393">IS_ADC_REGULAR_LENGTH</references>
        <references refid="struct_a_d_c___init_type_def_1ad6f39a12ac32a2767085ac94e9338bc3" compoundref="stm32f10x__adc_8h" startline="77">ADC_InitTypeDef::ADC_NbrOfChannel</references>
        <references refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" compoundref="stm32f10x_8h" startline="545">ADC_TypeDef::CR1</references>
        <references refid="group___a_d_c___private___defines_1ga67f7dd35ea3d1296677e5fc50b88fa90" compoundref="stm32f10x__adc_8c" startline="75">CR1_CLEAR_Mask</references>
        <references refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" compoundref="stm32f10x_8h" startline="546">ADC_TypeDef::CR2</references>
        <references refid="group___a_d_c___private___defines_1ga49192361afb92aee0e3f1124ef1131a0" compoundref="stm32f10x__adc_8c" startline="121">CR2_CLEAR_Mask</references>
        <references refid="struct_a_d_c___type_def_1a0185aa54962ba987f192154fb7a2d673" compoundref="stm32f10x_8h" startline="555">ADC_TypeDef::SQR1</references>
        <references refid="group___a_d_c___private___defines_1ga6e3e238f38d7ff17939cbd5417fc51cc" compoundref="stm32f10x__adc_8c" startline="129">SQR1_CLEAR_Mask</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1ga6c6e754d1d0a98d56e465efaf73272ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_StructInit</definition>
        <argsstring>(ADC_InitTypeDef *ADC_InitStruct)</argsstring>
        <name>ADC_StructInit</name>
        <param>
          <type><ref refid="struct_a_d_c___init_type_def" kindref="compound">ADC_InitTypeDef</ref> *</type>
          <declname>ADC_InitStruct</declname>
        </param>
        <briefdescription>
<para>Fills each ADC_InitStruct member with its default value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADC_InitStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to an <ref refid="struct_a_d_c___init_type_def" kindref="compound">ADC_InitTypeDef</ref> structure which will be initialized. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="281" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="281" bodyend="296"/>
        <references refid="struct_a_d_c___init_type_def_1a0f9ec17ad585d66a54625213062c9260" compoundref="stm32f10x__adc_8h" startline="58">ADC_InitTypeDef::ADC_Mode</references>
        <references refid="group___a_d_c__mode_1ga2754d3a35559dc10e3d6a7d920e83432" compoundref="stm32f10x__adc_8h" startline="100">ADC_Mode_Independent</references>
        <references refid="struct_a_d_c___init_type_def_1aaf44f54f22ab40bf8fae01f075aa4c87" compoundref="stm32f10x__adc_8h" startline="62">ADC_InitTypeDef::ADC_ScanConvMode</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_a_d_c___init_type_def_1a2149036a332281e70a36879a2396b8d1" compoundref="stm32f10x__adc_8h" startline="66">ADC_InitTypeDef::ADC_ContinuousConvMode</references>
        <references refid="struct_a_d_c___init_type_def_1ae5d0c48e70c2a39355b7ab0cc1df8310" compoundref="stm32f10x__adc_8h" startline="70">ADC_InitTypeDef::ADC_ExternalTrigConv</references>
        <references refid="group___a_d_c__external__trigger__sources__for__regular__channels__conversion_1ga303f24361ea930f8214e9e68b63b244e" compoundref="stm32f10x__adc_8h" startline="129">ADC_ExternalTrigConv_T1_CC1</references>
        <references refid="struct_a_d_c___init_type_def_1a622e89d8fba3900f20aaf40d5560ab7b" compoundref="stm32f10x__adc_8h" startline="74">ADC_InitTypeDef::ADC_DataAlign</references>
        <references refid="group___a_d_c__data__align_1ga80b5d2f2b6b058bc498f58e0a92ad035" compoundref="stm32f10x__adc_8h" startline="168">ADC_DataAlign_Right</references>
        <references refid="struct_a_d_c___init_type_def_1ad6f39a12ac32a2767085ac94e9338bc3" compoundref="stm32f10x__adc_8h" startline="77">ADC_InitTypeDef::ADC_NbrOfChannel</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1ga40882d399e3371755ed610c1134e634e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_Cmd</definition>
        <argsstring>(ADC_TypeDef *ADCx, FunctionalState NewState)</argsstring>
        <name>ADC_Cmd</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified ADC peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the ADCx peripheral. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="305" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="305" bodyend="320"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" compoundref="stm32f10x_8h" startline="546">ADC_TypeDef::CR2</references>
        <references refid="group___a_d_c___private___defines_1ga21779759f3d5d1389b114d7a1bb6fca1" compoundref="stm32f10x__adc_8c" startline="78">CR2_ADON_Set</references>
        <references refid="group___a_d_c___private___defines_1gaa3eb5d77998387159508a57d7e09f459" compoundref="stm32f10x__adc_8c" startline="79">CR2_ADON_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1gac5881d5995818001584b27b137a8dbcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_DMACmd</definition>
        <argsstring>(ADC_TypeDef *ADCx, FunctionalState NewState)</argsstring>
        <name>ADC_DMACmd</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified ADC DMA request. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 3 to select the ADC peripheral. Note: ADC2 hasn&apos;t a DMA capability. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the selected ADC DMA transfer. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="330" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="330" bodyend="345"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1ga56ce1703cee9a93969fc507b985ee949" compoundref="stm32f10x__adc_8h" startline="93">IS_ADC_DMA_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" compoundref="stm32f10x_8h" startline="546">ADC_TypeDef::CR2</references>
        <references refid="group___a_d_c___private___defines_1ga7fa8ba27f5b249dd7cb0b6e53a25d6e2" compoundref="stm32f10x__adc_8c" startline="82">CR2_DMA_Set</references>
        <references refid="group___a_d_c___private___defines_1ga8e674886185af86bc17d9266ddbdca7c" compoundref="stm32f10x__adc_8c" startline="83">CR2_DMA_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1gad4c84b54b539944f555488bf979f82b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_ITConfig</definition>
        <argsstring>(ADC_TypeDef *ADCx, uint16_t ADC_IT, FunctionalState NewState)</argsstring>
        <name>ADC_ITConfig</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>ADC_IT</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified ADC interrupts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADC_IT</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the ADC interrupt sources to be enabled or disabled. This parameter can be any combination of the following values: <itemizedlist>
<listitem><para>ADC_IT_EOC: End of conversion interrupt mask </para></listitem>
<listitem><para>ADC_IT_AWD: Analog watchdog interrupt mask </para></listitem>
<listitem><para>ADC_IT_JEOC: End of injected conversion interrupt mask </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the specified ADC interrupts. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="359" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="359" bodyend="378"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___a_d_c__interrupts__definition_1gaf5f8d35930becff402eeb8220641432f" compoundref="stm32f10x__adc_8h" startline="323">IS_ADC_IT</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" compoundref="stm32f10x_8h" startline="545">ADC_TypeDef::CR1</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1ga3d542020ba28c1d16238a0defbee6d8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_ResetCalibration</definition>
        <argsstring>(ADC_TypeDef *ADCx)</argsstring>
        <name>ADC_ResetCalibration</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <briefdescription>
<para>Resets the selected ADC calibration registers. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="385" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="385" bodyend="391"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" compoundref="stm32f10x_8h" startline="546">ADC_TypeDef::CR2</references>
        <references refid="group___a_d_c___private___defines_1gaf256d4606fbe82d7e4cdc8d177653b53" compoundref="stm32f10x__adc_8c" startline="86">CR2_RSTCAL_Set</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1ga113be9fe25add8d7496bed659c68e02b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref></type>
        <definition>FlagStatus ADC_GetResetCalibrationStatus</definition>
        <argsstring>(ADC_TypeDef *ADCx)</argsstring>
        <name>ADC_GetResetCalibrationStatus</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <briefdescription>
<para>Gets the selected ADC reset calibration registers status. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of ADC reset calibration registers (SET or RESET). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="398" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="398" bodyend="416"/>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" compoundref="stm32f10x_8h" startline="546">ADC_TypeDef::CR2</references>
        <references refid="group___a_d_c___private___defines_1gaf256d4606fbe82d7e4cdc8d177653b53" compoundref="stm32f10x__adc_8c" startline="86">CR2_RSTCAL_Set</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" compoundref="stm32f10x_8h" startline="519">SET</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1gadcba6341124a6aabfd2dd885ca8e5f14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_StartCalibration</definition>
        <argsstring>(ADC_TypeDef *ADCx)</argsstring>
        <name>ADC_StartCalibration</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <briefdescription>
<para>Starts the selected ADC calibration process. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="423" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="423" bodyend="429"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" compoundref="stm32f10x_8h" startline="546">ADC_TypeDef::CR2</references>
        <references refid="group___a_d_c___private___defines_1ga6705aae168367a2d961e64dd9137ae3a" compoundref="stm32f10x__adc_8c" startline="89">CR2_CAL_Set</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1ga7a728f699b487c7fa1694d7424967122" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref></type>
        <definition>FlagStatus ADC_GetCalibrationStatus</definition>
        <argsstring>(ADC_TypeDef *ADCx)</argsstring>
        <name>ADC_GetCalibrationStatus</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <briefdescription>
<para>Gets the selected ADC calibration status. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of ADC calibration (SET or RESET). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="436" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="436" bodyend="454"/>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" compoundref="stm32f10x_8h" startline="546">ADC_TypeDef::CR2</references>
        <references refid="group___a_d_c___private___defines_1ga6705aae168367a2d961e64dd9137ae3a" compoundref="stm32f10x__adc_8c" startline="89">CR2_CAL_Set</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" compoundref="stm32f10x_8h" startline="519">SET</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1ga694130a8d1ad3c8877b7eddb29611b30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_SoftwareStartConvCmd</definition>
        <argsstring>(ADC_TypeDef *ADCx, FunctionalState NewState)</argsstring>
        <name>ADC_SoftwareStartConvCmd</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the selected ADC software start conversion . </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the selected ADC software start conversion. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="463" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="463" bodyend="480"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" compoundref="stm32f10x_8h" startline="546">ADC_TypeDef::CR2</references>
        <references refid="group___a_d_c___private___defines_1gad9bed838631a650428d2318694a66094" compoundref="stm32f10x__adc_8c" startline="99">CR2_EXTTRIG_SWSTART_Set</references>
        <references refid="group___a_d_c___private___defines_1gad0a6e5cf09868318178434340ade2fe1" compoundref="stm32f10x__adc_8c" startline="100">CR2_EXTTRIG_SWSTART_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1gaf1119583782ecbcec380efcb7eb74883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref></type>
        <definition>FlagStatus ADC_GetSoftwareStartConvStatus</definition>
        <argsstring>(ADC_TypeDef *ADCx)</argsstring>
        <name>ADC_GetSoftwareStartConvStatus</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <briefdescription>
<para>Gets the selected ADC Software start conversion Status. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of ADC software start conversion (SET or RESET). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="487" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="487" bodyend="505"/>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" compoundref="stm32f10x_8h" startline="546">ADC_TypeDef::CR2</references>
        <references refid="group___a_d_c___private___defines_1gac40733c6a8918c16cd52fcade75a6de6" compoundref="stm32f10x__adc_8c" startline="92">CR2_SWSTART_Set</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" compoundref="stm32f10x_8h" startline="519">SET</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1ga6eb241ba82d67d1371136c9132083937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_DiscModeChannelCountConfig</definition>
        <argsstring>(ADC_TypeDef *ADCx, uint8_t Number)</argsstring>
        <name>ADC_DiscModeChannelCountConfig</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>Number</declname>
        </param>
        <briefdescription>
<para>Configures the discontinuous mode for the selected ADC regular group channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Number</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the discontinuous mode regular channel count value. This number must be between 1 and 8. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="515" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="515" bodyend="531"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___a_d_c__regular__discontinuous__mode__number_1gab8dfaacb2f25e65ca755de71050ff270" compoundref="stm32f10x__adc_8h" startline="412">IS_ADC_REGULAR_DISC_NUMBER</references>
        <references refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" compoundref="stm32f10x_8h" startline="545">ADC_TypeDef::CR1</references>
        <references refid="group___a_d_c___private___defines_1ga88cecf0c336d950115d7a52d599de816" compoundref="stm32f10x__adc_8c" startline="54">CR1_DISCNUM_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1ga1909649d10253ce88d986ffbb94a4be6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_DiscModeCmd</definition>
        <argsstring>(ADC_TypeDef *ADCx, FunctionalState NewState)</argsstring>
        <name>ADC_DiscModeCmd</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the discontinuous mode on regular group channel for the specified ADC. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the selected ADC discontinuous mode on regular group channel. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="542" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="542" bodyend="557"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" compoundref="stm32f10x_8h" startline="545">ADC_TypeDef::CR1</references>
        <references refid="group___a_d_c___private___defines_1ga95f4f653adde3407c116919c2b7d9c74" compoundref="stm32f10x__adc_8c" startline="57">CR1_DISCEN_Set</references>
        <references refid="group___a_d_c___private___defines_1ga959f617e77853bff85ca5e8d6fba6611" compoundref="stm32f10x__adc_8c" startline="58">CR1_DISCEN_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1gac531adb577b648d4bb8881f2ed627d52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_RegularChannelConfig</definition>
        <argsstring>(ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)</argsstring>
        <name>ADC_RegularChannelConfig</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ADC_Channel</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>Rank</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ADC_SampleTime</declname>
        </param>
        <briefdescription>
<para>Configures for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADC_Channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the ADC channel to configure. This parameter can be one of the following values: <itemizedlist>
<listitem><para>ADC_Channel_0: ADC Channel0 selected </para></listitem>
<listitem><para>ADC_Channel_1: ADC Channel1 selected </para></listitem>
<listitem><para>ADC_Channel_2: ADC Channel2 selected </para></listitem>
<listitem><para>ADC_Channel_3: ADC Channel3 selected </para></listitem>
<listitem><para>ADC_Channel_4: ADC Channel4 selected </para></listitem>
<listitem><para>ADC_Channel_5: ADC Channel5 selected </para></listitem>
<listitem><para>ADC_Channel_6: ADC Channel6 selected </para></listitem>
<listitem><para>ADC_Channel_7: ADC Channel7 selected </para></listitem>
<listitem><para>ADC_Channel_8: ADC Channel8 selected </para></listitem>
<listitem><para>ADC_Channel_9: ADC Channel9 selected </para></listitem>
<listitem><para>ADC_Channel_10: ADC Channel10 selected </para></listitem>
<listitem><para>ADC_Channel_11: ADC Channel11 selected </para></listitem>
<listitem><para>ADC_Channel_12: ADC Channel12 selected </para></listitem>
<listitem><para>ADC_Channel_13: ADC Channel13 selected </para></listitem>
<listitem><para>ADC_Channel_14: ADC Channel14 selected </para></listitem>
<listitem><para>ADC_Channel_15: ADC Channel15 selected </para></listitem>
<listitem><para>ADC_Channel_16: ADC Channel16 selected </para></listitem>
<listitem><para>ADC_Channel_17: ADC Channel17 selected </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Rank</parametername>
</parameternamelist>
<parameterdescription>
<para>The rank in the regular group sequencer. This parameter must be between 1 to 16. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADC_SampleTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The sample time value to be set for the selected channel. This parameter can be one of the following values: <itemizedlist>
<listitem><para>ADC_SampleTime_1Cycles5: Sample time equal to 1.5 cycles </para></listitem>
<listitem><para>ADC_SampleTime_7Cycles5: Sample time equal to 7.5 cycles </para></listitem>
<listitem><para>ADC_SampleTime_13Cycles5: Sample time equal to 13.5 cycles </para></listitem>
<listitem><para>ADC_SampleTime_28Cycles5: Sample time equal to 28.5 cycles </para></listitem>
<listitem><para>ADC_SampleTime_41Cycles5: Sample time equal to 41.5 cycles </para></listitem>
<listitem><para>ADC_SampleTime_55Cycles5: Sample time equal to 55.5 cycles </para></listitem>
<listitem><para>ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles </para></listitem>
<listitem><para>ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="596" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="596" bodyend="683"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___a_d_c__channels_1gaba41910dcb2b449c613a5ef638862e77" compoundref="stm32f10x__adc_8h" startline="202">IS_ADC_CHANNEL</references>
        <references refid="group___a_d_c__regular__rank_1ga5928a1e9315f798e27220b91f1bae7f2" compoundref="stm32f10x__adc_8h" startline="402">IS_ADC_REGULAR_RANK</references>
        <references refid="group___a_d_c__sampling__time_1ga30e0307fa009e1c383d3047b48e94644" compoundref="stm32f10x__adc_8h" startline="227">IS_ADC_SAMPLE_TIME</references>
        <references refid="group___a_d_c__channels_1ga01a61c428be0cb69327e428e32a42aa1" compoundref="stm32f10x__adc_8h" startline="189">ADC_Channel_9</references>
        <references refid="struct_a_d_c___type_def_1a73009a8122fcc628f467a4e997109347" compoundref="stm32f10x_8h" startline="547">ADC_TypeDef::SMPR1</references>
        <references refid="group___a_d_c___private___defines_1ga244048ec3ba9461a6609942def9a15ba" compoundref="stm32f10x__adc_8c" startline="139">SMPR1_SMP_Set</references>
        <references refid="struct_a_d_c___type_def_1a9e68fe36c4c8fbbac294b5496ccf7130" compoundref="stm32f10x_8h" startline="548">ADC_TypeDef::SMPR2</references>
        <references refid="group___a_d_c___private___defines_1ga6555beb1970c42125678d80530bba4d3" compoundref="stm32f10x__adc_8c" startline="140">SMPR2_SMP_Set</references>
        <references refid="struct_a_d_c___type_def_1a51dbdba74c4d3559157392109af68fc6" compoundref="stm32f10x_8h" startline="557">ADC_TypeDef::SQR3</references>
        <references refid="group___a_d_c___private___defines_1ga8a04f115021dc5261562b4dc04c01109" compoundref="stm32f10x__adc_8c" startline="124">SQR3_SQ_Set</references>
        <references refid="struct_a_d_c___type_def_1a6b6e55e6c667042e5a46a76518b73d5a" compoundref="stm32f10x_8h" startline="556">ADC_TypeDef::SQR2</references>
        <references refid="group___a_d_c___private___defines_1ga2329f779aee00e5990d6430a01de8cb0" compoundref="stm32f10x__adc_8c" startline="125">SQR2_SQ_Set</references>
        <references refid="struct_a_d_c___type_def_1a0185aa54962ba987f192154fb7a2d673" compoundref="stm32f10x_8h" startline="555">ADC_TypeDef::SQR1</references>
        <references refid="group___a_d_c___private___defines_1ga91fb5f63b765a543dfa419ea0219351b" compoundref="stm32f10x__adc_8c" startline="126">SQR1_SQ_Set</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1ga3ae92d7940a16c898223374a5857f509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_ExternalTrigConvCmd</definition>
        <argsstring>(ADC_TypeDef *ADCx, FunctionalState NewState)</argsstring>
        <name>ADC_ExternalTrigConvCmd</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the ADCx conversion through external trigger. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the selected ADC external trigger start of conversion. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="692" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="692" bodyend="707"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" compoundref="stm32f10x_8h" startline="546">ADC_TypeDef::CR2</references>
        <references refid="group___a_d_c___private___defines_1gaf39824995dbcbabf76697cd7116352d6" compoundref="stm32f10x__adc_8c" startline="95">CR2_EXTTRIG_Set</references>
        <references refid="group___a_d_c___private___defines_1ga8a96cb9aac77bab199f3dff54da230a6" compoundref="stm32f10x__adc_8c" startline="96">CR2_EXTTRIG_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1gaaf74221c285ec5dab5e66baf7bec6bd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t ADC_GetConversionValue</definition>
        <argsstring>(ADC_TypeDef *ADCx)</argsstring>
        <name>ADC_GetConversionValue</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <briefdescription>
<para>Returns the last ADCx conversion result data for regular channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>Data conversion value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="714" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="714" bodyend="720"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="struct_a_d_c___type_def_1a84114accead82bd11a0e12a429cdfed9" compoundref="stm32f10x_8h" startline="563">ADC_TypeDef::DR</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1gac5a4792dc29ef7ff6bfbce9f37e8a668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t ADC_GetDualModeConversionValue</definition>
        <argsstring>(void)</argsstring>
        <name>ADC_GetDualModeConversionValue</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Returns the last ADC1 and ADC2 conversion result data in dual mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>Data conversion value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="726" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="726" bodyend="730"/>
        <references refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" compoundref="core__cm0_8h" startline="221">__IO</references>
        <references refid="group___a_d_c___private___defines_1ga35ecb1c96cfae175f5f00490e5e91e88" compoundref="stm32f10x__adc_8c" startline="146">DR_ADDRESS</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1ga1ff9c3b8e4bbdd2addfd227f1a506a66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_AutoInjectedConvCmd</definition>
        <argsstring>(ADC_TypeDef *ADCx, FunctionalState NewState)</argsstring>
        <name>ADC_AutoInjectedConvCmd</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the selected ADC automatic injected group conversion after regular one. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the selected ADC auto injected conversion This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="740" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="740" bodyend="755"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" compoundref="stm32f10x_8h" startline="545">ADC_TypeDef::CR1</references>
        <references refid="group___a_d_c___private___defines_1gaa8478f12e212738e249a7fafb69d4dd4" compoundref="stm32f10x__adc_8c" startline="61">CR1_JAUTO_Set</references>
        <references refid="group___a_d_c___private___defines_1gab6c4a9f0a661bf7c5add35ea3a90b756" compoundref="stm32f10x__adc_8c" startline="62">CR1_JAUTO_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1ga0b583b94183fa4ff287177b9ee808092" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_InjectedDiscModeCmd</definition>
        <argsstring>(ADC_TypeDef *ADCx, FunctionalState NewState)</argsstring>
        <name>ADC_InjectedDiscModeCmd</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the discontinuous mode for injected group channel for the specified ADC. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the selected ADC discontinuous mode on injected group channel. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="766" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="766" bodyend="781"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" compoundref="stm32f10x_8h" startline="545">ADC_TypeDef::CR1</references>
        <references refid="group___a_d_c___private___defines_1gafef4d16c890bf5e6eb381ad01c829309" compoundref="stm32f10x__adc_8c" startline="65">CR1_JDISCEN_Set</references>
        <references refid="group___a_d_c___private___defines_1gab6ffba92495342bd5f0a8b1fa216526b" compoundref="stm32f10x__adc_8c" startline="66">CR1_JDISCEN_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1gafc02ce1e84e96b692adf085f61a0bca6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_ExternalTrigInjectedConvConfig</definition>
        <argsstring>(ADC_TypeDef *ADCx, uint32_t ADC_ExternalTrigInjecConv)</argsstring>
        <name>ADC_ExternalTrigInjectedConvConfig</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ADC_ExternalTrigInjecConv</declname>
        </param>
        <briefdescription>
<para>Configures the ADCx external trigger for injected channels conversion. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADC_ExternalTrigInjecConv</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the ADC trigger to start injected conversion. This parameter can be one of the following values: <itemizedlist>
<listitem><para>ADC_ExternalTrigInjecConv_T1_TRGO: Timer1 TRGO event selected (for ADC1, ADC2 and ADC3) </para></listitem>
<listitem><para>ADC_ExternalTrigInjecConv_T1_CC4: Timer1 capture compare4 selected (for ADC1, ADC2 and ADC3) </para></listitem>
<listitem><para>ADC_ExternalTrigInjecConv_T2_TRGO: Timer2 TRGO event selected (for ADC1 and ADC2) </para></listitem>
<listitem><para>ADC_ExternalTrigInjecConv_T2_CC1: Timer2 capture compare1 selected (for ADC1 and ADC2) </para></listitem>
<listitem><para>ADC_ExternalTrigInjecConv_T3_CC4: Timer3 capture compare4 selected (for ADC1 and ADC2) </para></listitem>
<listitem><para>ADC_ExternalTrigInjecConv_T4_TRGO: Timer4 TRGO event selected (for ADC1 and ADC2) </para></listitem>
<listitem><para>ADC_ExternalTrigInjecConv_Ext_IT15_TIM8_CC4: External interrupt line 15 or Timer8 capture compare4 event selected (for ADC1 and ADC2) </para></listitem>
<listitem><para>ADC_ExternalTrigInjecConv_T4_CC3: Timer4 capture compare3 selected (for ADC3 only) </para></listitem>
<listitem><para>ADC_ExternalTrigInjecConv_T8_CC2: Timer8 capture compare2 selected (for ADC3 only) </para></listitem>
<listitem><para>ADC_ExternalTrigInjecConv_T8_CC4: Timer8 capture compare4 selected (for ADC3 only) </para></listitem>
<listitem><para>ADC_ExternalTrigInjecConv_T5_TRGO: Timer5 TRGO event selected (for ADC3 only) </para></listitem>
<listitem><para>ADC_ExternalTrigInjecConv_T5_CC4: Timer5 capture compare4 selected (for ADC3 only) </para></listitem>
<listitem><para>ADC_ExternalTrigInjecConv_None: Injected conversion started by software and not by external trigger (for ADC1, ADC2 and ADC3) </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="805" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="805" bodyend="819"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___a_d_c__external__trigger__sources__for__injected__channels__conversion_1ga3cb8cadbff46e432b5e000c3a7489a0b" compoundref="stm32f10x__adc_8h" startline="259">IS_ADC_EXT_INJEC_TRIG</references>
        <references refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" compoundref="stm32f10x_8h" startline="546">ADC_TypeDef::CR2</references>
        <references refid="group___a_d_c___private___defines_1gafa78c11893aa39ad2c0117414ae1704d" compoundref="stm32f10x__adc_8c" startline="103">CR2_JEXTSEL_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1gad81d134c083d8f407c819e6f4722d553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_ExternalTrigInjectedConvCmd</definition>
        <argsstring>(ADC_TypeDef *ADCx, FunctionalState NewState)</argsstring>
        <name>ADC_ExternalTrigInjectedConvCmd</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the ADCx injected channels conversion through external trigger. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the selected ADC external trigger start of injected conversion. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="830" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="830" bodyend="845"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" compoundref="stm32f10x_8h" startline="546">ADC_TypeDef::CR2</references>
        <references refid="group___a_d_c___private___defines_1ga20a54958799c567e9efaa0635aa18a99" compoundref="stm32f10x__adc_8c" startline="106">CR2_JEXTTRIG_Set</references>
        <references refid="group___a_d_c___private___defines_1ga94404d5a0103c5e2d7ffa45956356931" compoundref="stm32f10x__adc_8c" startline="107">CR2_JEXTTRIG_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1ga5b141d5dbf5f417a11dfa622c8c149d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_SoftwareStartInjectedConvCmd</definition>
        <argsstring>(ADC_TypeDef *ADCx, FunctionalState NewState)</argsstring>
        <name>ADC_SoftwareStartInjectedConvCmd</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the selected ADC start of the injected channels conversion. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the selected ADC software start injected conversion. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="855" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="855" bodyend="872"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" compoundref="stm32f10x_8h" startline="546">ADC_TypeDef::CR2</references>
        <references refid="group___a_d_c___private___defines_1gaac5989ccf10d806f2f6a70f925d6b130" compoundref="stm32f10x__adc_8c" startline="113">CR2_JEXTTRIG_JSWSTART_Set</references>
        <references refid="group___a_d_c___private___defines_1gaaa2fb01c1649fde61115602559942ee2" compoundref="stm32f10x__adc_8c" startline="114">CR2_JEXTTRIG_JSWSTART_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1ga8765f8835b8cfed13dce3d8d71767dcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref></type>
        <definition>FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus</definition>
        <argsstring>(ADC_TypeDef *ADCx)</argsstring>
        <name>ADC_GetSoftwareStartInjectedConvCmdStatus</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <briefdescription>
<para>Gets the selected ADC Software start injected conversion Status. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of ADC software start injected conversion (SET or RESET). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="879" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="879" bodyend="897"/>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" compoundref="stm32f10x_8h" startline="546">ADC_TypeDef::CR2</references>
        <references refid="group___a_d_c___private___defines_1ga5292617782f3327f2e1ed0bd9461704e" compoundref="stm32f10x__adc_8c" startline="110">CR2_JSWSTART_Set</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" compoundref="stm32f10x_8h" startline="519">SET</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1gae2b44bff080184e1cf6f2cb6b9bb3e59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_InjectedChannelConfig</definition>
        <argsstring>(ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)</argsstring>
        <name>ADC_InjectedChannelConfig</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ADC_Channel</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>Rank</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ADC_SampleTime</declname>
        </param>
        <briefdescription>
<para>Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADC_Channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the ADC channel to configure. This parameter can be one of the following values: <itemizedlist>
<listitem><para>ADC_Channel_0: ADC Channel0 selected </para></listitem>
<listitem><para>ADC_Channel_1: ADC Channel1 selected </para></listitem>
<listitem><para>ADC_Channel_2: ADC Channel2 selected </para></listitem>
<listitem><para>ADC_Channel_3: ADC Channel3 selected </para></listitem>
<listitem><para>ADC_Channel_4: ADC Channel4 selected </para></listitem>
<listitem><para>ADC_Channel_5: ADC Channel5 selected </para></listitem>
<listitem><para>ADC_Channel_6: ADC Channel6 selected </para></listitem>
<listitem><para>ADC_Channel_7: ADC Channel7 selected </para></listitem>
<listitem><para>ADC_Channel_8: ADC Channel8 selected </para></listitem>
<listitem><para>ADC_Channel_9: ADC Channel9 selected </para></listitem>
<listitem><para>ADC_Channel_10: ADC Channel10 selected </para></listitem>
<listitem><para>ADC_Channel_11: ADC Channel11 selected </para></listitem>
<listitem><para>ADC_Channel_12: ADC Channel12 selected </para></listitem>
<listitem><para>ADC_Channel_13: ADC Channel13 selected </para></listitem>
<listitem><para>ADC_Channel_14: ADC Channel14 selected </para></listitem>
<listitem><para>ADC_Channel_15: ADC Channel15 selected </para></listitem>
<listitem><para>ADC_Channel_16: ADC Channel16 selected </para></listitem>
<listitem><para>ADC_Channel_17: ADC Channel17 selected </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Rank</parametername>
</parameternamelist>
<parameterdescription>
<para>The rank in the injected group sequencer. This parameter must be between 1 and 4. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADC_SampleTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The sample time value to be set for the selected channel. This parameter can be one of the following values: <itemizedlist>
<listitem><para>ADC_SampleTime_1Cycles5: Sample time equal to 1.5 cycles </para></listitem>
<listitem><para>ADC_SampleTime_7Cycles5: Sample time equal to 7.5 cycles </para></listitem>
<listitem><para>ADC_SampleTime_13Cycles5: Sample time equal to 13.5 cycles </para></listitem>
<listitem><para>ADC_SampleTime_28Cycles5: Sample time equal to 28.5 cycles </para></listitem>
<listitem><para>ADC_SampleTime_41Cycles5: Sample time equal to 41.5 cycles </para></listitem>
<listitem><para>ADC_SampleTime_55Cycles5: Sample time equal to 55.5 cycles </para></listitem>
<listitem><para>ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles </para></listitem>
<listitem><para>ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="936" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="936" bodyend="990"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___a_d_c__channels_1gaba41910dcb2b449c613a5ef638862e77" compoundref="stm32f10x__adc_8h" startline="202">IS_ADC_CHANNEL</references>
        <references refid="group___a_d_c__injected__rank_1ga63f95f9a45f4d718aabc9e429d860e9d" compoundref="stm32f10x__adc_8h" startline="382">IS_ADC_INJECTED_RANK</references>
        <references refid="group___a_d_c__sampling__time_1ga30e0307fa009e1c383d3047b48e94644" compoundref="stm32f10x__adc_8h" startline="227">IS_ADC_SAMPLE_TIME</references>
        <references refid="group___a_d_c__channels_1ga01a61c428be0cb69327e428e32a42aa1" compoundref="stm32f10x__adc_8h" startline="189">ADC_Channel_9</references>
        <references refid="struct_a_d_c___type_def_1a73009a8122fcc628f467a4e997109347" compoundref="stm32f10x_8h" startline="547">ADC_TypeDef::SMPR1</references>
        <references refid="group___a_d_c___private___defines_1ga244048ec3ba9461a6609942def9a15ba" compoundref="stm32f10x__adc_8c" startline="139">SMPR1_SMP_Set</references>
        <references refid="struct_a_d_c___type_def_1a9e68fe36c4c8fbbac294b5496ccf7130" compoundref="stm32f10x_8h" startline="548">ADC_TypeDef::SMPR2</references>
        <references refid="group___a_d_c___private___defines_1ga6555beb1970c42125678d80530bba4d3" compoundref="stm32f10x__adc_8c" startline="140">SMPR2_SMP_Set</references>
        <references refid="struct_a_d_c___type_def_1a5438a76a93ac1bd2526e92ef298dc193" compoundref="stm32f10x_8h" startline="558">ADC_TypeDef::JSQR</references>
        <references refid="group___a_d_c___private___defines_1ga46af9e738702305be0127f6c15c4f7b0" compoundref="stm32f10x__adc_8c" startline="135">JSQR_JL_Set</references>
        <references refid="group___a_d_c___private___defines_1ga5d460390dbe3b400b5e0fdf1e94929f0" compoundref="stm32f10x__adc_8c" startline="132">JSQR_JSQ_Set</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1ga24eba90bc3ee955e07659a605011710d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_InjectedSequencerLengthConfig</definition>
        <argsstring>(ADC_TypeDef *ADCx, uint8_t Length)</argsstring>
        <name>ADC_InjectedSequencerLengthConfig</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>Length</declname>
        </param>
        <briefdescription>
<para>Configures the sequencer length for injected channels. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Length</parametername>
</parameternamelist>
<parameterdescription>
<para>The sequencer length. This parameter must be a number between 1 to 4. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="999" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="999" bodyend="1016"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___a_d_c__injected__length_1gaecdddab7424a697722683296ca70e176" compoundref="stm32f10x__adc_8h" startline="372">IS_ADC_INJECTED_LENGTH</references>
        <references refid="struct_a_d_c___type_def_1a5438a76a93ac1bd2526e92ef298dc193" compoundref="stm32f10x_8h" startline="558">ADC_TypeDef::JSQR</references>
        <references refid="group___a_d_c___private___defines_1gac8d1173791ea10bac7c53a368d593a16" compoundref="stm32f10x__adc_8c" startline="136">JSQR_JL_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1ga07a942613088ab3ecfc3d97a20475920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_SetInjectedOffset</definition>
        <argsstring>(ADC_TypeDef *ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)</argsstring>
        <name>ADC_SetInjectedOffset</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ADC_InjectedChannel</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>Offset</declname>
        </param>
        <briefdescription>
<para>Set the injected channels conversion value offset. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADC_InjectedChannel</parametername>
</parameternamelist>
<parameterdescription>
<para>the ADC injected channel to set its offset. This parameter can be one of the following values: <itemizedlist>
<listitem><para>ADC_InjectedChannel_1: Injected Channel1 selected </para></listitem>
<listitem><para>ADC_InjectedChannel_2: Injected Channel2 selected </para></listitem>
<listitem><para>ADC_InjectedChannel_3: Injected Channel3 selected </para></listitem>
<listitem><para>ADC_InjectedChannel_4: Injected Channel4 selected </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset value for the selected ADC injected channel This parameter must be a 12bit value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="1031" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="1031" bodyend="1045"/>
        <references refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" compoundref="core__cm0_8h" startline="221">__IO</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___a_d_c__injected__channel__selection_1gae0bbfb5dbad0fbac8b672db6f63cf8d0" compoundref="stm32f10x__adc_8h" startline="284">IS_ADC_INJECTED_CHANNEL</references>
        <references refid="group___a_d_c__injected__offset_1ga252eaf5d2552f0d11b1bcca7dc48950a" compoundref="stm32f10x__adc_8h" startline="362">IS_ADC_OFFSET</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1ga1dea5ed24571a2e0ce4cbd41c9c1ec46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t ADC_GetInjectedConversionValue</definition>
        <argsstring>(ADC_TypeDef *ADCx, uint8_t ADC_InjectedChannel)</argsstring>
        <name>ADC_GetInjectedConversionValue</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ADC_InjectedChannel</declname>
        </param>
        <briefdescription>
<para>Returns the ADC injected channel conversion result. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADC_InjectedChannel</parametername>
</parameternamelist>
<parameterdescription>
<para>the converted ADC injected channel. This parameter can be one of the following values: <itemizedlist>
<listitem><para>ADC_InjectedChannel_1: Injected Channel1 selected </para></listitem>
<listitem><para>ADC_InjectedChannel_2: Injected Channel2 selected </para></listitem>
<listitem><para>ADC_InjectedChannel_3: Injected Channel3 selected </para></listitem>
<listitem><para>ADC_InjectedChannel_4: Injected Channel4 selected </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>Data conversion value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="1058" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="1058" bodyend="1071"/>
        <references refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" compoundref="core__cm0_8h" startline="221">__IO</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___a_d_c__injected__channel__selection_1gae0bbfb5dbad0fbac8b672db6f63cf8d0" compoundref="stm32f10x__adc_8h" startline="284">IS_ADC_INJECTED_CHANNEL</references>
        <references refid="group___a_d_c___private___defines_1ga5671a68d6f0d01c6c465ee7a3a8f3eea" compoundref="stm32f10x__adc_8c" startline="143">JDR_Offset</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1gad017d69bec6e497afd35ba25ea22d86e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_AnalogWatchdogCmd</definition>
        <argsstring>(ADC_TypeDef *ADCx, uint32_t ADC_AnalogWatchdog)</argsstring>
        <name>ADC_AnalogWatchdogCmd</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>ADC_AnalogWatchdog</declname>
        </param>
        <briefdescription>
<para>Enables or disables the analog watchdog on single/all regular or injected channels. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADC_AnalogWatchdog</parametername>
</parameternamelist>
<parameterdescription>
<para>the ADC analog watchdog configuration. This parameter can be one of the following values: <itemizedlist>
<listitem><para>ADC_AnalogWatchdog_SingleRegEnable: Analog watchdog on a single regular channel </para></listitem>
<listitem><para>ADC_AnalogWatchdog_SingleInjecEnable: Analog watchdog on a single injected channel </para></listitem>
<listitem><para>ADC_AnalogWatchdog_SingleRegOrInjecEnable: Analog watchdog on a single regular or injected channel </para></listitem>
<listitem><para>ADC_AnalogWatchdog_AllRegEnable: Analog watchdog on all regular channel </para></listitem>
<listitem><para>ADC_AnalogWatchdog_AllInjecEnable: Analog watchdog on all injected channel </para></listitem>
<listitem><para>ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels </para></listitem>
<listitem><para>ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="1088" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="1088" bodyend="1102"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___a_d_c__analog__watchdog__selection_1ga53ffa30f756569194342bfba80165544" compoundref="stm32f10x__adc_8h" startline="304">IS_ADC_ANALOG_WATCHDOG</references>
        <references refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" compoundref="stm32f10x_8h" startline="545">ADC_TypeDef::CR1</references>
        <references refid="group___a_d_c___private___defines_1gae53703f0c718ecc5b3e1a69c60af3697" compoundref="stm32f10x__adc_8c" startline="72">CR1_AWDMode_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1ga79588d02aa8e4147f21cb90a4708366d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_AnalogWatchdogThresholdsConfig</definition>
        <argsstring>(ADC_TypeDef *ADCx, uint16_t HighThreshold, uint16_t LowThreshold)</argsstring>
        <name>ADC_AnalogWatchdogThresholdsConfig</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>HighThreshold</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>LowThreshold</declname>
        </param>
        <briefdescription>
<para>Configures the high and low thresholds of the analog watchdog. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>HighThreshold</parametername>
</parameternamelist>
<parameterdescription>
<para>the ADC analog watchdog High threshold value. This parameter must be a 12bit value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>LowThreshold</parametername>
</parameternamelist>
<parameterdescription>
<para>the ADC analog watchdog Low threshold value. This parameter must be a 12bit value. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="1113" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="1113" bodyend="1124"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___a_d_c__thresholds_1gaa71cdff6dafddfccff8a7e88768bfb54" compoundref="stm32f10x__adc_8h" startline="352">IS_ADC_THRESHOLD</references>
        <references refid="struct_a_d_c___type_def_1a297ac2d83a1837bfdc0333474b977de0" compoundref="stm32f10x_8h" startline="553">ADC_TypeDef::HTR</references>
        <references refid="struct_a_d_c___type_def_1afdaf8050fb01739206a92c9ad610f396" compoundref="stm32f10x_8h" startline="554">ADC_TypeDef::LTR</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1ga03cef3d12292ffa2b8520524d5b0226c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_AnalogWatchdogSingleChannelConfig</definition>
        <argsstring>(ADC_TypeDef *ADCx, uint8_t ADC_Channel)</argsstring>
        <name>ADC_AnalogWatchdogSingleChannelConfig</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ADC_Channel</declname>
        </param>
        <briefdescription>
<para>Configures the analog watchdog guarded single channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADC_Channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the ADC channel to configure for the analog watchdog. This parameter can be one of the following values: <itemizedlist>
<listitem><para>ADC_Channel_0: ADC Channel0 selected </para></listitem>
<listitem><para>ADC_Channel_1: ADC Channel1 selected </para></listitem>
<listitem><para>ADC_Channel_2: ADC Channel2 selected </para></listitem>
<listitem><para>ADC_Channel_3: ADC Channel3 selected </para></listitem>
<listitem><para>ADC_Channel_4: ADC Channel4 selected </para></listitem>
<listitem><para>ADC_Channel_5: ADC Channel5 selected </para></listitem>
<listitem><para>ADC_Channel_6: ADC Channel6 selected </para></listitem>
<listitem><para>ADC_Channel_7: ADC Channel7 selected </para></listitem>
<listitem><para>ADC_Channel_8: ADC Channel8 selected </para></listitem>
<listitem><para>ADC_Channel_9: ADC Channel9 selected </para></listitem>
<listitem><para>ADC_Channel_10: ADC Channel10 selected </para></listitem>
<listitem><para>ADC_Channel_11: ADC Channel11 selected </para></listitem>
<listitem><para>ADC_Channel_12: ADC Channel12 selected </para></listitem>
<listitem><para>ADC_Channel_13: ADC Channel13 selected </para></listitem>
<listitem><para>ADC_Channel_14: ADC Channel14 selected </para></listitem>
<listitem><para>ADC_Channel_15: ADC Channel15 selected </para></listitem>
<listitem><para>ADC_Channel_16: ADC Channel16 selected </para></listitem>
<listitem><para>ADC_Channel_17: ADC Channel17 selected </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="1151" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="1151" bodyend="1165"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___a_d_c__channels_1gaba41910dcb2b449c613a5ef638862e77" compoundref="stm32f10x__adc_8h" startline="202">IS_ADC_CHANNEL</references>
        <references refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" compoundref="stm32f10x_8h" startline="545">ADC_TypeDef::CR1</references>
        <references refid="group___a_d_c___private___defines_1gabe7e68383d281e58707a1cd749a3374e" compoundref="stm32f10x__adc_8c" startline="69">CR1_AWDCH_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1ga848682e2d7d3de9f8cf03ffa4c11f0b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_TempSensorVrefintCmd</definition>
        <argsstring>(FunctionalState NewState)</argsstring>
        <name>ADC_TempSensorVrefintCmd</name>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the temperature sensor and Vrefint channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the temperature sensor. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="1173" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="1173" bodyend="1187"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="group___peripheral__declaration_1ga90d2d5c526ce5c0a551f533eccbee71a" compoundref="stm32f10x_8h" startline="1415">ADC1</references>
        <references refid="group___a_d_c___private___defines_1ga7f5e0f807edebbfcef4883f3ec42b9e8" compoundref="stm32f10x__adc_8c" startline="117">CR2_TSVREFE_Set</references>
        <references refid="group___a_d_c___private___defines_1gaa207bc0eeed8b546dc9536b02df633b5" compoundref="stm32f10x__adc_8c" startline="118">CR2_TSVREFE_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1gaa12546e51ec905c90a3aada432bd4633" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref></type>
        <definition>FlagStatus ADC_GetFlagStatus</definition>
        <argsstring>(ADC_TypeDef *ADCx, uint8_t ADC_FLAG)</argsstring>
        <name>ADC_GetFlagStatus</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ADC_FLAG</declname>
        </param>
        <briefdescription>
<para>Checks whether the specified ADC flag is set or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADC_FLAG</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the flag to check. This parameter can be one of the following values: <itemizedlist>
<listitem><para>ADC_FLAG_AWD: Analog watchdog flag </para></listitem>
<listitem><para>ADC_FLAG_EOC: End of conversion flag </para></listitem>
<listitem><para>ADC_FLAG_JEOC: End of injected group conversion flag </para></listitem>
<listitem><para>ADC_FLAG_JSTRT: Start of injected group conversion flag </para></listitem>
<listitem><para>ADC_FLAG_STRT: Start of regular group conversion flag </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of ADC_FLAG (SET or RESET). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="1201" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="1201" bodyend="1220"/>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___a_d_c__flags__definition_1ga597eb68dfef9dbe0928ed14a1aedc710" compoundref="stm32f10x__adc_8h" startline="341">IS_ADC_GET_FLAG</references>
        <references refid="struct_a_d_c___type_def_1a9745df96e98f3cdc2d05ccefce681f64" compoundref="stm32f10x_8h" startline="544">ADC_TypeDef::SR</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" compoundref="stm32f10x_8h" startline="519">SET</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1gaf34f36798f811b4a41321ea2d12118d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_ClearFlag</definition>
        <argsstring>(ADC_TypeDef *ADCx, uint8_t ADC_FLAG)</argsstring>
        <name>ADC_ClearFlag</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ADC_FLAG</declname>
        </param>
        <briefdescription>
<para>Clears the ADCx&apos;s pending flags. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADC_FLAG</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the flag to clear. This parameter can be any combination of the following values: <itemizedlist>
<listitem><para>ADC_FLAG_AWD: Analog watchdog flag </para></listitem>
<listitem><para>ADC_FLAG_EOC: End of conversion flag </para></listitem>
<listitem><para>ADC_FLAG_JEOC: End of injected group conversion flag </para></listitem>
<listitem><para>ADC_FLAG_JSTRT: Start of injected group conversion flag </para></listitem>
<listitem><para>ADC_FLAG_STRT: Start of regular group conversion flag </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="1234" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="1234" bodyend="1241"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___a_d_c__flags__definition_1gac5b6fb60ec921255b05261ec04573470" compoundref="stm32f10x__adc_8h" startline="340">IS_ADC_CLEAR_FLAG</references>
        <references refid="struct_a_d_c___type_def_1a9745df96e98f3cdc2d05ccefce681f64" compoundref="stm32f10x_8h" startline="544">ADC_TypeDef::SR</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1gaa1d3b910a83dbf14d4f68c8eef058612" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref></type>
        <definition>ITStatus ADC_GetITStatus</definition>
        <argsstring>(ADC_TypeDef *ADCx, uint16_t ADC_IT)</argsstring>
        <name>ADC_GetITStatus</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>ADC_IT</declname>
        </param>
        <briefdescription>
<para>Checks whether the specified ADC interrupt has occurred or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADC_IT</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the ADC interrupt source to check. This parameter can be one of the following values: <itemizedlist>
<listitem><para>ADC_IT_EOC: End of conversion interrupt mask </para></listitem>
<listitem><para>ADC_IT_AWD: Analog watchdog interrupt mask </para></listitem>
<listitem><para>ADC_IT_JEOC: End of injected conversion interrupt mask </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of ADC_IT (SET or RESET). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="1253" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="1253" bodyend="1277"/>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___a_d_c__interrupts__definition_1gacae69f04de1a0033f065864d868c006e" compoundref="stm32f10x__adc_8h" startline="325">IS_ADC_GET_IT</references>
        <references refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" compoundref="stm32f10x_8h" startline="545">ADC_TypeDef::CR1</references>
        <references refid="struct_a_d_c___type_def_1a9745df96e98f3cdc2d05ccefce681f64" compoundref="stm32f10x_8h" startline="544">ADC_TypeDef::SR</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" compoundref="stm32f10x_8h" startline="519">SET</references>
      </memberdef>
      <memberdef kind="function" id="group___a_d_c___private___functions_1ga601c6a67bd883eb631ecc7aa5e999b9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ADC_ClearITPendingBit</definition>
        <argsstring>(ADC_TypeDef *ADCx, uint16_t ADC_IT)</argsstring>
        <name>ADC_ClearITPendingBit</name>
        <param>
          <type><ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref> *</type>
          <declname>ADCx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>ADC_IT</declname>
        </param>
        <briefdescription>
<para>Clears the ADCx&apos;s interrupt pending bits. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ADCx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the ADC peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ADC_IT</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the ADC interrupt pending bit to clear. This parameter can be any combination of the following values: <itemizedlist>
<listitem><para>ADC_IT_EOC: End of conversion interrupt mask </para></listitem>
<listitem><para>ADC_IT_AWD: Analog watchdog interrupt mask </para></listitem>
<listitem><para>ADC_IT_JEOC: End of injected conversion interrupt mask </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" line="1289" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" bodystart="1289" bodyend="1299"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" compoundref="stm32f10x__adc_8h" startline="89">IS_ADC_ALL_PERIPH</references>
        <references refid="group___a_d_c__interrupts__definition_1gaf5f8d35930becff402eeb8220641432f" compoundref="stm32f10x__adc_8h" startline="323">IS_ADC_IT</references>
        <references refid="struct_a_d_c___type_def_1a9745df96e98f3cdc2d05ccefce681f64" compoundref="stm32f10x_8h" startline="544">ADC_TypeDef::SR</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file provides all the ADC firmware functions. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>MCD Application Team </para></simplesect>
<simplesect kind="version"><para>V3.5.0 </para></simplesect>
<simplesect kind="date"><para>11-March-2011 </para></simplesect>
<simplesect kind="attention"><para></para></simplesect>
THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.</para><para><heading level="2"><center><copy/> COPYRIGHT 2011 STMicroelectronics</center></heading>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="22"><highlight class="comment">/*<sp/>Includes<sp/>------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stm32f10x__adc_8h" kindref="compound">stm32f10x_adc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stm32f10x__rcc_8h" kindref="compound">stm32f10x_rcc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[ILG]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(<sp/>__GNUC__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wsign-conversion&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="comment">/*<sp/>ADC<sp/>DISCNUM<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="group___a_d_c___private___defines_1ga88cecf0c336d950115d7a52d599de816" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR1_DISCNUM_Reset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0xFFFF1FFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC<sp/>DISCEN<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="group___a_d_c___private___defines_1ga95f4f653adde3407c116919c2b7d9c74" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR1_DISCEN_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00000800)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="group___a_d_c___private___defines_1ga959f617e77853bff85ca5e8d6fba6611" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR1_DISCEN_Reset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0xFFFFF7FF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC<sp/>JAUTO<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="group___a_d_c___private___defines_1gaa8478f12e212738e249a7fafb69d4dd4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR1_JAUTO_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00000400)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="group___a_d_c___private___defines_1gab6c4a9f0a661bf7c5add35ea3a90b756" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR1_JAUTO_Reset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0xFFFFFBFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC<sp/>JDISCEN<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="group___a_d_c___private___defines_1gafef4d16c890bf5e6eb381ad01c829309" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR1_JDISCEN_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00001000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="group___a_d_c___private___defines_1gab6ffba92495342bd5f0a8b1fa216526b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR1_JDISCEN_Reset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0xFFFFEFFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC<sp/>AWDCH<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="group___a_d_c___private___defines_1gabe7e68383d281e58707a1cd749a3374e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR1_AWDCH_Reset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0xFFFFFFE0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC<sp/>Analog<sp/>watchdog<sp/>enable<sp/>mode<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="group___a_d_c___private___defines_1gae53703f0c718ecc5b3e1a69c60af3697" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR1_AWDMode_Reset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0xFF3FFDFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CR1<sp/>register<sp/>Mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="group___a_d_c___private___defines_1ga67f7dd35ea3d1296677e5fc50b88fa90" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR1_CLEAR_Mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0xFFF0FEFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC<sp/>ADON<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="group___a_d_c___private___defines_1ga21779759f3d5d1389b114d7a1bb6fca1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR2_ADON_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00000001)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="group___a_d_c___private___defines_1gaa3eb5d77998387159508a57d7e09f459" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR2_ADON_Reset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0xFFFFFFFE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC<sp/>DMA<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="group___a_d_c___private___defines_1ga7fa8ba27f5b249dd7cb0b6e53a25d6e2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR2_DMA_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00000100)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="group___a_d_c___private___defines_1ga8e674886185af86bc17d9266ddbdca7c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR2_DMA_Reset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0xFFFFFEFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC<sp/>RSTCAL<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="group___a_d_c___private___defines_1gaf256d4606fbe82d7e4cdc8d177653b53" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR2_RSTCAL_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00000008)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC<sp/>CAL<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="group___a_d_c___private___defines_1ga6705aae168367a2d961e64dd9137ae3a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR2_CAL_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00000004)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC<sp/>SWSTART<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="group___a_d_c___private___defines_1gac40733c6a8918c16cd52fcade75a6de6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR2_SWSTART_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00400000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC<sp/>EXTTRIG<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="group___a_d_c___private___defines_1gaf39824995dbcbabf76697cd7116352d6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR2_EXTTRIG_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00100000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="group___a_d_c___private___defines_1ga8a96cb9aac77bab199f3dff54da230a6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR2_EXTTRIG_Reset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0xFFEFFFFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC<sp/>Software<sp/>start<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="group___a_d_c___private___defines_1gad9bed838631a650428d2318694a66094" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR2_EXTTRIG_SWSTART_Set<sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00500000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="group___a_d_c___private___defines_1gad0a6e5cf09868318178434340ade2fe1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR2_EXTTRIG_SWSTART_Reset<sp/><sp/><sp/>((uint32_t)0xFFAFFFFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC<sp/>JEXTSEL<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="group___a_d_c___private___defines_1gafa78c11893aa39ad2c0117414ae1704d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR2_JEXTSEL_Reset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0xFFFF8FFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC<sp/>JEXTTRIG<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="group___a_d_c___private___defines_1ga20a54958799c567e9efaa0635aa18a99" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR2_JEXTTRIG_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00008000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="group___a_d_c___private___defines_1ga94404d5a0103c5e2d7ffa45956356931" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR2_JEXTTRIG_Reset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0xFFFF7FFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC<sp/>JSWSTART<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="group___a_d_c___private___defines_1ga5292617782f3327f2e1ed0bd9461704e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR2_JSWSTART_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00200000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC<sp/>injected<sp/>software<sp/>start<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="group___a_d_c___private___defines_1gaac5989ccf10d806f2f6a70f925d6b130" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR2_JEXTTRIG_JSWSTART_Set<sp/><sp/><sp/>((uint32_t)0x00208000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114" refid="group___a_d_c___private___defines_1gaaa2fb01c1649fde61115602559942ee2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR2_JEXTTRIG_JSWSTART_Reset<sp/>((uint32_t)0xFFDF7FFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC<sp/>TSPD<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="group___a_d_c___private___defines_1ga7f5e0f807edebbfcef4883f3ec42b9e8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR2_TSVREFE_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00800000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="group___a_d_c___private___defines_1gaa207bc0eeed8b546dc9536b02df633b5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR2_TSVREFE_Reset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0xFF7FFFFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>CR2<sp/>register<sp/>Mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="group___a_d_c___private___defines_1ga49192361afb92aee0e3f1124ef1131a0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR2_CLEAR_Mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0xFFF1F7FD)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC<sp/>SQx<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="group___a_d_c___private___defines_1ga8a04f115021dc5261562b4dc04c01109" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SQR3_SQ_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x0000001F)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="group___a_d_c___private___defines_1ga2329f779aee00e5990d6430a01de8cb0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SQR2_SQ_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x0000001F)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="group___a_d_c___private___defines_1ga91fb5f63b765a543dfa419ea0219351b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SQR1_SQ_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x0000001F)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>SQR1<sp/>register<sp/>Mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="group___a_d_c___private___defines_1ga6e3e238f38d7ff17939cbd5417fc51cc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SQR1_CLEAR_Mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0xFF0FFFFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC<sp/>JSQx<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="group___a_d_c___private___defines_1ga5d460390dbe3b400b5e0fdf1e94929f0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JSQR_JSQ_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x0000001F)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC<sp/>JL<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="group___a_d_c___private___defines_1ga46af9e738702305be0127f6c15c4f7b0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JSQR_JL_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00300000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="group___a_d_c___private___defines_1gac8d1173791ea10bac7c53a368d593a16" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JSQR_JL_Reset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0xFFCFFFFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC<sp/>SMPx<sp/>mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="group___a_d_c___private___defines_1ga244048ec3ba9461a6609942def9a15ba" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SMPR1_SMP_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00000007)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="group___a_d_c___private___defines_1ga6555beb1970c42125678d80530bba4d3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SMPR2_SMP_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00000007)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC<sp/>JDRx<sp/>registers<sp/>offset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="group___a_d_c___private___defines_1ga5671a68d6f0d01c6c465ee7a3a8f3eea" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JDR_Offset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint8_t)0x28)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>ADC1<sp/>DR<sp/>register<sp/>base<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="group___a_d_c___private___defines_1ga35ecb1c96cfae175f5f00490e5e91e88" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DR_ADDRESS<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x4001244C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="group___a_d_c___private___functions_1ga31fa6bc09de17125e9db2830ce77c09b" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1ga31fa6bc09de17125e9db2830ce77c09b" kindref="member">ADC_DeInit</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx)</highlight></codeline>
<codeline lineno="186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ADCx<sp/>==<sp/><ref refid="group___peripheral__declaration_1ga90d2d5c526ce5c0a551f533eccbee71a" kindref="member">ADC1</ref>)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>ADC1<sp/>reset<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_c_c___exported___functions_1gad94553850ac07106a27ee85fec37efdf" kindref="member">RCC_APB2PeriphResetCmd</ref>(<ref refid="group___a_p_b2__peripheral_1gacd24acb2cd5ca208652157f6c13d3145" kindref="member">RCC_APB2Periph_ADC1</ref>,<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" kindref="member">ENABLE</ref>);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>ADC1<sp/>from<sp/>reset<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_c_c___exported___functions_1gad94553850ac07106a27ee85fec37efdf" kindref="member">RCC_APB2PeriphResetCmd</ref>(<ref refid="group___a_p_b2__peripheral_1gacd24acb2cd5ca208652157f6c13d3145" kindref="member">RCC_APB2Periph_ADC1</ref>,<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ADCx<sp/>==<sp/><ref refid="group___peripheral__declaration_1gac5503ae96c26b4475226f96715a1bf1e" kindref="member">ADC2</ref>)</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>ADC2<sp/>reset<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_c_c___exported___functions_1gad94553850ac07106a27ee85fec37efdf" kindref="member">RCC_APB2PeriphResetCmd</ref>(<ref refid="group___a_p_b2__peripheral_1ga4fd76e573e827702568d6064e33448b5" kindref="member">RCC_APB2Periph_ADC2</ref>,<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" kindref="member">ENABLE</ref>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>ADC2<sp/>from<sp/>reset<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_c_c___exported___functions_1gad94553850ac07106a27ee85fec37efdf" kindref="member">RCC_APB2PeriphResetCmd</ref>(<ref refid="group___a_p_b2__peripheral_1ga4fd76e573e827702568d6064e33448b5" kindref="member">RCC_APB2Periph_ADC2</ref>,<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ADCx<sp/>==<sp/><ref refid="group___peripheral__declaration_1gae917784606daf6b04c9b7b96b40c2f74" kindref="member">ADC3</ref>)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>ADC3<sp/>reset<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_c_c___exported___functions_1gad94553850ac07106a27ee85fec37efdf" kindref="member">RCC_APB2PeriphResetCmd</ref>(<ref refid="group___a_p_b2__peripheral_1ga371d55bbf17bf965a213c59f2d276d72" kindref="member">RCC_APB2Periph_ADC3</ref>,<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" kindref="member">ENABLE</ref>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>ADC3<sp/>from<sp/>reset<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_c_c___exported___functions_1gad94553850ac07106a27ee85fec37efdf" kindref="member">RCC_APB2PeriphResetCmd</ref>(<ref refid="group___a_p_b2__peripheral_1ga371d55bbf17bf965a213c59f2d276d72" kindref="member">RCC_APB2Periph_ADC3</ref>,<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="group___a_d_c___private___functions_1gabbab6038cf8691404350625e477254f9" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1gabbab6038cf8691404350625e477254f9" kindref="member">ADC_Init</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/><ref refid="struct_a_d_c___init_type_def" kindref="compound">ADC_InitTypeDef</ref>*<sp/>ADC_InitStruct)</highlight></codeline>
<codeline lineno="225"><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>uint32_t<sp/>tmpreg1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>uint8_t<sp/>tmpreg2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__mode_1ga4abf4c7de28a42d7b124c9e403a6e537" kindref="member">IS_ADC_MODE</ref>(ADC_InitStruct-&gt;<ref refid="struct_a_d_c___init_type_def_1a0f9ec17ad585d66a54625213062c9260" kindref="member">ADC_Mode</ref>));</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(ADC_InitStruct-&gt;<ref refid="struct_a_d_c___init_type_def_1aaf44f54f22ab40bf8fae01f075aa4c87" kindref="member">ADC_ScanConvMode</ref>));</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(ADC_InitStruct-&gt;<ref refid="struct_a_d_c___init_type_def_1a2149036a332281e70a36879a2396b8d1" kindref="member">ADC_ContinuousConvMode</ref>));</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__external__trigger__sources__for__regular__channels__conversion_1gac74e6054adbedd72822cacde69105318" kindref="member">IS_ADC_EXT_TRIG</ref>(ADC_InitStruct-&gt;<ref refid="struct_a_d_c___init_type_def_1ae5d0c48e70c2a39355b7ab0cc1df8310" kindref="member">ADC_ExternalTrigConv</ref>));<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__data__align_1ga2903b620e3c61dc47ed8c0fbf4197801" kindref="member">IS_ADC_DATA_ALIGN</ref>(ADC_InitStruct-&gt;<ref refid="struct_a_d_c___init_type_def_1a622e89d8fba3900f20aaf40d5560ab7b" kindref="member">ADC_DataAlign</ref>));<sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__regular__length_1ga1ea82167f6dccdef1d160675f4534584" kindref="member">IS_ADC_REGULAR_LENGTH</ref>(ADC_InitStruct-&gt;<ref refid="struct_a_d_c___init_type_def_1ad6f39a12ac32a2767085ac94e9338bc3" kindref="member">ADC_NbrOfChannel</ref>));</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*----------------------------<sp/>ADCx<sp/>CR1<sp/>Configuration<sp/>-----------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>ADCx<sp/>CR1<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>tmpreg1<sp/>=<sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" kindref="member">CR1</ref>;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>DUALMOD<sp/>and<sp/>SCAN<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>tmpreg1<sp/>&amp;=<sp/><ref refid="group___a_d_c___private___defines_1ga67f7dd35ea3d1296677e5fc50b88fa90" kindref="member">CR1_CLEAR_Mask</ref>;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>ADCx:<sp/>Dual<sp/>mode<sp/>and<sp/>scan<sp/>conversion<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>DUALMOD<sp/>bits<sp/>according<sp/>to<sp/>ADC_Mode<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>SCAN<sp/>bit<sp/>according<sp/>to<sp/>ADC_ScanConvMode<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>tmpreg1<sp/>|=<sp/>(uint32_t)(ADC_InitStruct-&gt;<ref refid="struct_a_d_c___init_type_def_1a0f9ec17ad585d66a54625213062c9260" kindref="member">ADC_Mode</ref><sp/>|<sp/>((uint32_t)ADC_InitStruct-&gt;<ref refid="struct_a_d_c___init_type_def_1aaf44f54f22ab40bf8fae01f075aa4c87" kindref="member">ADC_ScanConvMode</ref><sp/>&lt;&lt;<sp/>8));</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>to<sp/>ADCx<sp/>CR1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" kindref="member">CR1</ref><sp/>=<sp/>tmpreg1;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*----------------------------<sp/>ADCx<sp/>CR2<sp/>Configuration<sp/>-----------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>ADCx<sp/>CR2<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>tmpreg1<sp/>=<sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" kindref="member">CR2</ref>;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>CONT,<sp/>ALIGN<sp/>and<sp/>EXTSEL<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/>tmpreg1<sp/>&amp;=<sp/><ref refid="group___a_d_c___private___defines_1ga49192361afb92aee0e3f1124ef1131a0" kindref="member">CR2_CLEAR_Mask</ref>;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>ADCx:<sp/>external<sp/>trigger<sp/>event<sp/>and<sp/>continuous<sp/>conversion<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>ALIGN<sp/>bit<sp/>according<sp/>to<sp/>ADC_DataAlign<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>EXTSEL<sp/>bits<sp/>according<sp/>to<sp/>ADC_ExternalTrigConv<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>CONT<sp/>bit<sp/>according<sp/>to<sp/>ADC_ContinuousConvMode<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>tmpreg1<sp/>|=<sp/>(uint32_t)(ADC_InitStruct-&gt;<ref refid="struct_a_d_c___init_type_def_1a622e89d8fba3900f20aaf40d5560ab7b" kindref="member">ADC_DataAlign</ref><sp/>|<sp/>ADC_InitStruct-&gt;<ref refid="struct_a_d_c___init_type_def_1ae5d0c48e70c2a39355b7ab0cc1df8310" kindref="member">ADC_ExternalTrigConv</ref><sp/>|</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)ADC_InitStruct-&gt;<ref refid="struct_a_d_c___init_type_def_1a2149036a332281e70a36879a2396b8d1" kindref="member">ADC_ContinuousConvMode</ref><sp/>&lt;&lt;<sp/>1));</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>to<sp/>ADCx<sp/>CR2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" kindref="member">CR2</ref><sp/>=<sp/>tmpreg1;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*----------------------------<sp/>ADCx<sp/>SQR1<sp/>Configuration<sp/>-----------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>ADCx<sp/>SQR1<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>tmpreg1<sp/>=<sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a0185aa54962ba987f192154fb7a2d673" kindref="member">SQR1</ref>;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>L<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>tmpreg1<sp/>&amp;=<sp/><ref refid="group___a_d_c___private___defines_1ga6e3e238f38d7ff17939cbd5417fc51cc" kindref="member">SQR1_CLEAR_Mask</ref>;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>ADCx:<sp/>regular<sp/>channel<sp/>sequence<sp/>length<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>L<sp/>bits<sp/>according<sp/>to<sp/>ADC_NbrOfChannel<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>tmpreg2<sp/>|=<sp/>(uint8_t)<sp/>(ADC_InitStruct-&gt;<ref refid="struct_a_d_c___init_type_def_1ad6f39a12ac32a2767085ac94e9338bc3" kindref="member">ADC_NbrOfChannel</ref><sp/>-<sp/>(uint8_t)1);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>tmpreg1<sp/>|=<sp/>(uint32_t)tmpreg2<sp/>&lt;&lt;<sp/>20;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>to<sp/>ADCx<sp/>SQR1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a0185aa54962ba987f192154fb7a2d673" kindref="member">SQR1</ref><sp/>=<sp/>tmpreg1;</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="group___a_d_c___private___functions_1ga6c6e754d1d0a98d56e465efaf73272ec" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1ga6c6e754d1d0a98d56e465efaf73272ec" kindref="member">ADC_StructInit</ref>(<ref refid="struct_a_d_c___init_type_def" kindref="compound">ADC_InitTypeDef</ref>*<sp/>ADC_InitStruct)</highlight></codeline>
<codeline lineno="282"><highlight class="normal">{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>ADC<sp/>init<sp/>structure<sp/>parameters<sp/>values<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>ADC_Mode<sp/>member<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>ADC_InitStruct-&gt;<ref refid="struct_a_d_c___init_type_def_1a0f9ec17ad585d66a54625213062c9260" kindref="member">ADC_Mode</ref><sp/>=<sp/><ref refid="group___a_d_c__mode_1ga2754d3a35559dc10e3d6a7d920e83432" kindref="member">ADC_Mode_Independent</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>initialize<sp/>the<sp/>ADC_ScanConvMode<sp/>member<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>ADC_InitStruct-&gt;<ref refid="struct_a_d_c___init_type_def_1aaf44f54f22ab40bf8fae01f075aa4c87" kindref="member">ADC_ScanConvMode</ref><sp/>=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>ADC_ContinuousConvMode<sp/>member<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>ADC_InitStruct-&gt;<ref refid="struct_a_d_c___init_type_def_1a2149036a332281e70a36879a2396b8d1" kindref="member">ADC_ContinuousConvMode</ref><sp/>=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>ADC_ExternalTrigConv<sp/>member<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>ADC_InitStruct-&gt;<ref refid="struct_a_d_c___init_type_def_1ae5d0c48e70c2a39355b7ab0cc1df8310" kindref="member">ADC_ExternalTrigConv</ref><sp/>=<sp/><ref refid="group___a_d_c__external__trigger__sources__for__regular__channels__conversion_1ga303f24361ea930f8214e9e68b63b244e" kindref="member">ADC_ExternalTrigConv_T1_CC1</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>ADC_DataAlign<sp/>member<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>ADC_InitStruct-&gt;<ref refid="struct_a_d_c___init_type_def_1a622e89d8fba3900f20aaf40d5560ab7b" kindref="member">ADC_DataAlign</ref><sp/>=<sp/><ref refid="group___a_d_c__data__align_1ga80b5d2f2b6b058bc498f58e0a92ad035" kindref="member">ADC_DataAlign_Right</ref>;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>ADC_NbrOfChannel<sp/>member<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>ADC_InitStruct-&gt;<ref refid="struct_a_d_c___init_type_def_1ad6f39a12ac32a2767085ac94e9338bc3" kindref="member">ADC_NbrOfChannel</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="296"><highlight class="normal">}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="group___a_d_c___private___functions_1ga40882d399e3371755ed610c1134e634e" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1ga40882d399e3371755ed610c1134e634e" kindref="member">ADC_Cmd</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>ADON<sp/>bit<sp/>to<sp/>wake<sp/>up<sp/>the<sp/>ADC<sp/>from<sp/>power<sp/>down<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" kindref="member">CR2</ref><sp/>|=<sp/><ref refid="group___a_d_c___private___defines_1ga21779759f3d5d1389b114d7a1bb6fca1" kindref="member">CR2_ADON_Set</ref>;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>selected<sp/>ADC<sp/>peripheral<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" kindref="member">CR2</ref><sp/>&amp;=<sp/><ref refid="group___a_d_c___private___defines_1gaa3eb5d77998387159508a57d7e09f459" kindref="member">CR2_ADON_Reset</ref>;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="330" refid="group___a_d_c___private___functions_1gac5881d5995818001584b27b137a8dbcb" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1gac5881d5995818001584b27b137a8dbcb" kindref="member">ADC_DMACmd</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="331"><highlight class="normal">{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1ga56ce1703cee9a93969fc507b985ee949" kindref="member">IS_ADC_DMA_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>selected<sp/>ADC<sp/>DMA<sp/>request<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" kindref="member">CR2</ref><sp/>|=<sp/><ref refid="group___a_d_c___private___defines_1ga7fa8ba27f5b249dd7cb0b6e53a25d6e2" kindref="member">CR2_DMA_Set</ref>;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>selected<sp/>ADC<sp/>DMA<sp/>request<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" kindref="member">CR2</ref><sp/>&amp;=<sp/><ref refid="group___a_d_c___private___defines_1ga8e674886185af86bc17d9266ddbdca7c" kindref="member">CR2_DMA_Reset</ref>;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="359" refid="group___a_d_c___private___functions_1gad4c84b54b539944f555488bf979f82b6" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1gad4c84b54b539944f555488bf979f82b6" kindref="member">ADC_ITConfig</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/>uint16_t<sp/>ADC_IT,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>uint8_t<sp/>itmask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__interrupts__definition_1gaf5f8d35930becff402eeb8220641432f" kindref="member">IS_ADC_IT</ref>(ADC_IT));</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>ADC<sp/>IT<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/>itmask<sp/>=<sp/>(uint8_t)ADC_IT;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>selected<sp/>ADC<sp/>interrupts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" kindref="member">CR1</ref><sp/>|=<sp/>itmask;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>selected<sp/>ADC<sp/>interrupts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" kindref="member">CR1</ref><sp/>&amp;=<sp/>(~(uint32_t)itmask);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="385" refid="group___a_d_c___private___functions_1ga3d542020ba28c1d16238a0defbee6d8f" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1ga3d542020ba28c1d16238a0defbee6d8f" kindref="member">ADC_ResetCalibration</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx)</highlight></codeline>
<codeline lineno="386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Resets<sp/>the<sp/>selected<sp/>ADC<sp/>calibration<sp/>registers<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" kindref="member">CR2</ref><sp/>|=<sp/><ref refid="group___a_d_c___private___defines_1gaf256d4606fbe82d7e4cdc8d177653b53" kindref="member">CR2_RSTCAL_Set</ref>;</highlight></codeline>
<codeline lineno="391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="398" refid="group___a_d_c___private___functions_1ga113be9fe25add8d7496bed659c68e02b" refkind="member"><highlight class="normal"><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref><sp/><ref refid="group___a_d_c___private___functions_1ga113be9fe25add8d7496bed659c68e02b" kindref="member">ADC_GetResetCalibrationStatus</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx)</highlight></codeline>
<codeline lineno="399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>status<sp/>of<sp/>RSTCAL<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" kindref="member">CR2</ref><sp/>&amp;<sp/><ref refid="group___a_d_c___private___defines_1gaf256d4606fbe82d7e4cdc8d177653b53" kindref="member">CR2_RSTCAL_Set</ref>)<sp/>!=<sp/>(uint32_t)<ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RSTCAL<sp/>bit<sp/>is<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" kindref="member">SET</ref>;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RSTCAL<sp/>bit<sp/>is<sp/>reset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>RSTCAL<sp/>bit<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>bitstatus;</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="423" refid="group___a_d_c___private___functions_1gadcba6341124a6aabfd2dd885ca8e5f14" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1gadcba6341124a6aabfd2dd885ca8e5f14" kindref="member">ADC_StartCalibration</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx)</highlight></codeline>
<codeline lineno="424"><highlight class="normal">{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>selected<sp/>ADC<sp/>calibration<sp/>process<sp/>*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" kindref="member">CR2</ref><sp/>|=<sp/><ref refid="group___a_d_c___private___defines_1ga6705aae168367a2d961e64dd9137ae3a" kindref="member">CR2_CAL_Set</ref>;</highlight></codeline>
<codeline lineno="429"><highlight class="normal">}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="436" refid="group___a_d_c___private___functions_1ga7a728f699b487c7fa1694d7424967122" refkind="member"><highlight class="normal"><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref><sp/><ref refid="group___a_d_c___private___functions_1ga7a728f699b487c7fa1694d7424967122" kindref="member">ADC_GetCalibrationStatus</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx)</highlight></codeline>
<codeline lineno="437"><highlight class="normal">{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>status<sp/>of<sp/>CAL<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" kindref="member">CR2</ref><sp/>&amp;<sp/><ref refid="group___a_d_c___private___defines_1ga6705aae168367a2d961e64dd9137ae3a" kindref="member">CR2_CAL_Set</ref>)<sp/>!=<sp/>(uint32_t)<ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>)</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CAL<sp/>bit<sp/>is<sp/>set:<sp/>calibration<sp/>on<sp/>going<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" kindref="member">SET</ref>;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>CAL<sp/>bit<sp/>is<sp/>reset:<sp/>end<sp/>of<sp/>calibration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>CAL<sp/>bit<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>bitstatus;</highlight></codeline>
<codeline lineno="454"><highlight class="normal">}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="463" refid="group___a_d_c___private___functions_1ga694130a8d1ad3c8877b7eddb29611b30" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1ga694130a8d1ad3c8877b7eddb29611b30" kindref="member">ADC_SoftwareStartConvCmd</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="464"><highlight class="normal">{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>selected<sp/>ADC<sp/>conversion<sp/>on<sp/>external<sp/>event<sp/>and<sp/>start<sp/>the<sp/>selected</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADC<sp/>conversion<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" kindref="member">CR2</ref><sp/>|=<sp/><ref refid="group___a_d_c___private___defines_1gad9bed838631a650428d2318694a66094" kindref="member">CR2_EXTTRIG_SWSTART_Set</ref>;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>selected<sp/>ADC<sp/>conversion<sp/>on<sp/>external<sp/>event<sp/>and<sp/>stop<sp/>the<sp/>selected</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADC<sp/>conversion<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" kindref="member">CR2</ref><sp/>&amp;=<sp/><ref refid="group___a_d_c___private___defines_1gad0a6e5cf09868318178434340ade2fe1" kindref="member">CR2_EXTTRIG_SWSTART_Reset</ref>;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="487" refid="group___a_d_c___private___functions_1gaf1119583782ecbcec380efcb7eb74883" refkind="member"><highlight class="normal"><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref><sp/><ref refid="group___a_d_c___private___functions_1gaf1119583782ecbcec380efcb7eb74883" kindref="member">ADC_GetSoftwareStartConvStatus</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx)</highlight></codeline>
<codeline lineno="488"><highlight class="normal">{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>status<sp/>of<sp/>SWSTART<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" kindref="member">CR2</ref><sp/>&amp;<sp/><ref refid="group___a_d_c___private___defines_1gac40733c6a8918c16cd52fcade75a6de6" kindref="member">CR2_SWSTART_Set</ref>)<sp/>!=<sp/>(uint32_t)<ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>SWSTART<sp/>bit<sp/>is<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" kindref="member">SET</ref>;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>SWSTART<sp/>bit<sp/>is<sp/>reset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>SWSTART<sp/>bit<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>bitstatus;</highlight></codeline>
<codeline lineno="505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="515" refid="group___a_d_c___private___functions_1ga6eb241ba82d67d1371136c9132083937" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1ga6eb241ba82d67d1371136c9132083937" kindref="member">ADC_DiscModeChannelCountConfig</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/>uint8_t<sp/>Number)</highlight></codeline>
<codeline lineno="516"><highlight class="normal">{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>uint32_t<sp/>tmpreg1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>uint32_t<sp/>tmpreg2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__regular__discontinuous__mode__number_1gab8dfaacb2f25e65ca755de71050ff270" kindref="member">IS_ADC_REGULAR_DISC_NUMBER</ref>(Number));</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>old<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/>tmpreg1<sp/>=<sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" kindref="member">CR1</ref>;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>old<sp/>discontinuous<sp/>mode<sp/>channel<sp/>count<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>tmpreg1<sp/>&amp;=<sp/><ref refid="group___a_d_c___private___defines_1ga88cecf0c336d950115d7a52d599de816" kindref="member">CR1_DISCNUM_Reset</ref>;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>discontinuous<sp/>mode<sp/>channel<sp/>count<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>tmpreg2<sp/>=<sp/>Number<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/>tmpreg1<sp/>|=<sp/>tmpreg2<sp/>&lt;&lt;<sp/>13;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>new<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" kindref="member">CR1</ref><sp/>=<sp/>tmpreg1;</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="542" refid="group___a_d_c___private___functions_1ga1909649d10253ce88d986ffbb94a4be6" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1ga1909649d10253ce88d986ffbb94a4be6" kindref="member">ADC_DiscModeCmd</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="543"><highlight class="normal">{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>selected<sp/>ADC<sp/>regular<sp/>discontinuous<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" kindref="member">CR1</ref><sp/>|=<sp/><ref refid="group___a_d_c___private___defines_1ga95f4f653adde3407c116919c2b7d9c74" kindref="member">CR1_DISCEN_Set</ref>;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>selected<sp/>ADC<sp/>regular<sp/>discontinuous<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" kindref="member">CR1</ref><sp/>&amp;=<sp/><ref refid="group___a_d_c___private___defines_1ga959f617e77853bff85ca5e8d6fba6611" kindref="member">CR1_DISCEN_Reset</ref>;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal">}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="596" refid="group___a_d_c___private___functions_1gac531adb577b648d4bb8881f2ed627d52" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1gac531adb577b648d4bb8881f2ed627d52" kindref="member">ADC_RegularChannelConfig</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/>uint8_t<sp/>ADC_Channel,<sp/>uint8_t<sp/>Rank,<sp/>uint8_t<sp/>ADC_SampleTime)</highlight></codeline>
<codeline lineno="597"><highlight class="normal">{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/>uint32_t<sp/>tmpreg1<sp/>=<sp/>0,<sp/>tmpreg2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__channels_1gaba41910dcb2b449c613a5ef638862e77" kindref="member">IS_ADC_CHANNEL</ref>(ADC_Channel));</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__regular__rank_1ga5928a1e9315f798e27220b91f1bae7f2" kindref="member">IS_ADC_REGULAR_RANK</ref>(Rank));</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__sampling__time_1ga30e0307fa009e1c383d3047b48e94644" kindref="member">IS_ADC_SAMPLE_TIME</ref>(ADC_SampleTime));</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>ADC_Channel_10<sp/>...<sp/>ADC_Channel_17<sp/>is<sp/>selected<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ADC_Channel<sp/>&gt;<sp/><ref refid="group___a_d_c__channels_1ga01a61c428be0cb69327e428e32a42aa1" kindref="member">ADC_Channel_9</ref>)</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>old<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg1<sp/>=<sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a73009a8122fcc628f467a4e997109347" kindref="member">SMPR1</ref>;</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>mask<sp/>to<sp/>clear<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg2<sp/>=<sp/><ref refid="group___a_d_c___private___defines_1ga244048ec3ba9461a6609942def9a15ba" kindref="member">SMPR1_SMP_Set</ref><sp/>&lt;&lt;<sp/>(3<sp/>*<sp/>(ADC_Channel<sp/>-<sp/>10));</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>old<sp/>channel<sp/>sample<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg1<sp/>&amp;=<sp/>~tmpreg2;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>mask<sp/>to<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg2<sp/>=<sp/>(uint32_t)ADC_SampleTime<sp/>&lt;&lt;<sp/>(3<sp/>*<sp/>(ADC_Channel<sp/>-<sp/>10));</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>new<sp/>channel<sp/>sample<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg1<sp/>|=<sp/>tmpreg2;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>new<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a73009a8122fcc628f467a4e997109347" kindref="member">SMPR1</ref><sp/>=<sp/>tmpreg1;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>ADC_Channel<sp/>include<sp/>in<sp/>ADC_Channel_[0..9]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>old<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg1<sp/>=<sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a9e68fe36c4c8fbbac294b5496ccf7130" kindref="member">SMPR2</ref>;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>mask<sp/>to<sp/>clear<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg2<sp/>=<sp/><ref refid="group___a_d_c___private___defines_1ga6555beb1970c42125678d80530bba4d3" kindref="member">SMPR2_SMP_Set</ref><sp/>&lt;&lt;<sp/>(3<sp/>*<sp/>ADC_Channel);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>old<sp/>channel<sp/>sample<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg1<sp/>&amp;=<sp/>~tmpreg2;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>mask<sp/>to<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg2<sp/>=<sp/>(uint32_t)ADC_SampleTime<sp/>&lt;&lt;<sp/>(3<sp/>*<sp/>ADC_Channel);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>new<sp/>channel<sp/>sample<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg1<sp/>|=<sp/>tmpreg2;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>new<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a9e68fe36c4c8fbbac294b5496ccf7130" kindref="member">SMPR2</ref><sp/>=<sp/>tmpreg1;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>Rank<sp/>1<sp/>to<sp/>6<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rank<sp/>&lt;<sp/>7)</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>old<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg1<sp/>=<sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a51dbdba74c4d3559157392109af68fc6" kindref="member">SQR3</ref>;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>mask<sp/>to<sp/>clear<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg2<sp/>=<sp/><ref refid="group___a_d_c___private___defines_1ga8a04f115021dc5261562b4dc04c01109" kindref="member">SQR3_SQ_Set</ref><sp/>&lt;&lt;<sp/>(5<sp/>*<sp/>(Rank<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>old<sp/>SQx<sp/>bits<sp/>for<sp/>the<sp/>selected<sp/>rank<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg1<sp/>&amp;=<sp/>~tmpreg2;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>mask<sp/>to<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg2<sp/>=<sp/>(uint32_t)ADC_Channel<sp/>&lt;&lt;<sp/>(5<sp/>*<sp/>(Rank<sp/>-<sp/>1));</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>SQx<sp/>bits<sp/>for<sp/>the<sp/>selected<sp/>rank<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg1<sp/>|=<sp/>tmpreg2;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>new<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a51dbdba74c4d3559157392109af68fc6" kindref="member">SQR3</ref><sp/>=<sp/>tmpreg1;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>Rank<sp/>7<sp/>to<sp/>12<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Rank<sp/>&lt;<sp/>13)</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>old<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg1<sp/>=<sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a6b6e55e6c667042e5a46a76518b73d5a" kindref="member">SQR2</ref>;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>mask<sp/>to<sp/>clear<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg2<sp/>=<sp/><ref refid="group___a_d_c___private___defines_1ga2329f779aee00e5990d6430a01de8cb0" kindref="member">SQR2_SQ_Set</ref><sp/>&lt;&lt;<sp/>(5<sp/>*<sp/>(Rank<sp/>-<sp/>7));</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>old<sp/>SQx<sp/>bits<sp/>for<sp/>the<sp/>selected<sp/>rank<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg1<sp/>&amp;=<sp/>~tmpreg2;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>mask<sp/>to<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg2<sp/>=<sp/>(uint32_t)ADC_Channel<sp/>&lt;&lt;<sp/>(5<sp/>*<sp/>(Rank<sp/>-<sp/>7));</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>SQx<sp/>bits<sp/>for<sp/>the<sp/>selected<sp/>rank<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg1<sp/>|=<sp/>tmpreg2;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>new<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a6b6e55e6c667042e5a46a76518b73d5a" kindref="member">SQR2</ref><sp/>=<sp/>tmpreg1;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>Rank<sp/>13<sp/>to<sp/>16<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>old<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg1<sp/>=<sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a0185aa54962ba987f192154fb7a2d673" kindref="member">SQR1</ref>;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>mask<sp/>to<sp/>clear<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg2<sp/>=<sp/><ref refid="group___a_d_c___private___defines_1ga91fb5f63b765a543dfa419ea0219351b" kindref="member">SQR1_SQ_Set</ref><sp/>&lt;&lt;<sp/>(5<sp/>*<sp/>(Rank<sp/>-<sp/>13));</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>old<sp/>SQx<sp/>bits<sp/>for<sp/>the<sp/>selected<sp/>rank<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg1<sp/>&amp;=<sp/>~tmpreg2;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>mask<sp/>to<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg2<sp/>=<sp/>(uint32_t)ADC_Channel<sp/>&lt;&lt;<sp/>(5<sp/>*<sp/>(Rank<sp/>-<sp/>13));</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>SQx<sp/>bits<sp/>for<sp/>the<sp/>selected<sp/>rank<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg1<sp/>|=<sp/>tmpreg2;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>new<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a0185aa54962ba987f192154fb7a2d673" kindref="member">SQR1</ref><sp/>=<sp/>tmpreg1;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal">}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="692" refid="group___a_d_c___private___functions_1ga3ae92d7940a16c898223374a5857f509" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1ga3ae92d7940a16c898223374a5857f509" kindref="member">ADC_ExternalTrigConvCmd</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="693"><highlight class="normal">{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>selected<sp/>ADC<sp/>conversion<sp/>on<sp/>external<sp/>event<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" kindref="member">CR2</ref><sp/>|=<sp/><ref refid="group___a_d_c___private___defines_1gaf39824995dbcbabf76697cd7116352d6" kindref="member">CR2_EXTTRIG_Set</ref>;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>selected<sp/>ADC<sp/>conversion<sp/>on<sp/>external<sp/>event<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" kindref="member">CR2</ref><sp/>&amp;=<sp/><ref refid="group___a_d_c___private___defines_1ga8a96cb9aac77bab199f3dff54da230a6" kindref="member">CR2_EXTTRIG_Reset</ref>;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="714" refid="group___a_d_c___private___functions_1gaaf74221c285ec5dab5e66baf7bec6bd3" refkind="member"><highlight class="normal">uint16_t<sp/><ref refid="group___a_d_c___private___functions_1gaaf74221c285ec5dab5e66baf7bec6bd3" kindref="member">ADC_GetConversionValue</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx)</highlight></codeline>
<codeline lineno="715"><highlight class="normal">{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>selected<sp/>ADC<sp/>conversion<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)<sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a84114accead82bd11a0e12a429cdfed9" kindref="member">DR</ref>;</highlight></codeline>
<codeline lineno="720"><highlight class="normal">}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="726" refid="group___a_d_c___private___functions_1gac5a4792dc29ef7ff6bfbce9f37e8a668" refkind="member"><highlight class="normal">uint32_t<sp/><ref refid="group___a_d_c___private___functions_1gac5a4792dc29ef7ff6bfbce9f37e8a668" kindref="member">ADC_GetDualModeConversionValue</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="727"><highlight class="normal">{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>dual<sp/>mode<sp/>conversion<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(*(<ref refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" kindref="member">__IO</ref><sp/>uint32_t<sp/>*)<sp/><ref refid="group___a_d_c___private___defines_1ga35ecb1c96cfae175f5f00490e5e91e88" kindref="member">DR_ADDRESS</ref>);</highlight></codeline>
<codeline lineno="730"><highlight class="normal">}</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="740" refid="group___a_d_c___private___functions_1ga1ff9c3b8e4bbdd2addfd227f1a506a66" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1ga1ff9c3b8e4bbdd2addfd227f1a506a66" kindref="member">ADC_AutoInjectedConvCmd</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="741"><highlight class="normal">{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>selected<sp/>ADC<sp/>automatic<sp/>injected<sp/>group<sp/>conversion<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" kindref="member">CR1</ref><sp/>|=<sp/><ref refid="group___a_d_c___private___defines_1gaa8478f12e212738e249a7fafb69d4dd4" kindref="member">CR1_JAUTO_Set</ref>;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>selected<sp/>ADC<sp/>automatic<sp/>injected<sp/>group<sp/>conversion<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" kindref="member">CR1</ref><sp/>&amp;=<sp/><ref refid="group___a_d_c___private___defines_1gab6c4a9f0a661bf7c5add35ea3a90b756" kindref="member">CR1_JAUTO_Reset</ref>;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal">}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="766" refid="group___a_d_c___private___functions_1ga0b583b94183fa4ff287177b9ee808092" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1ga0b583b94183fa4ff287177b9ee808092" kindref="member">ADC_InjectedDiscModeCmd</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="767"><highlight class="normal">{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>selected<sp/>ADC<sp/>injected<sp/>discontinuous<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" kindref="member">CR1</ref><sp/>|=<sp/><ref refid="group___a_d_c___private___defines_1gafef4d16c890bf5e6eb381ad01c829309" kindref="member">CR1_JDISCEN_Set</ref>;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>selected<sp/>ADC<sp/>injected<sp/>discontinuous<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" kindref="member">CR1</ref><sp/>&amp;=<sp/><ref refid="group___a_d_c___private___defines_1gab6ffba92495342bd5f0a8b1fa216526b" kindref="member">CR1_JDISCEN_Reset</ref>;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal">}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="805" refid="group___a_d_c___private___functions_1gafc02ce1e84e96b692adf085f61a0bca6" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1gafc02ce1e84e96b692adf085f61a0bca6" kindref="member">ADC_ExternalTrigInjectedConvConfig</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/>uint32_t<sp/>ADC_ExternalTrigInjecConv)</highlight></codeline>
<codeline lineno="806"><highlight class="normal">{</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>uint32_t<sp/>tmpreg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__external__trigger__sources__for__injected__channels__conversion_1ga3cb8cadbff46e432b5e000c3a7489a0b" kindref="member">IS_ADC_EXT_INJEC_TRIG</ref>(ADC_ExternalTrigInjecConv));</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>old<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>tmpreg<sp/>=<sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" kindref="member">CR2</ref>;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>old<sp/>external<sp/>event<sp/>selection<sp/>for<sp/>injected<sp/>group<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/>tmpreg<sp/>&amp;=<sp/><ref refid="group___a_d_c___private___defines_1gafa78c11893aa39ad2c0117414ae1704d" kindref="member">CR2_JEXTSEL_Reset</ref>;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>external<sp/>event<sp/>selection<sp/>for<sp/>injected<sp/>group<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/>tmpreg<sp/>|=<sp/>ADC_ExternalTrigInjecConv;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>new<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" kindref="member">CR2</ref><sp/>=<sp/>tmpreg;</highlight></codeline>
<codeline lineno="819"><highlight class="normal">}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="830" refid="group___a_d_c___private___functions_1gad81d134c083d8f407c819e6f4722d553" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1gad81d134c083d8f407c819e6f4722d553" kindref="member">ADC_ExternalTrigInjectedConvCmd</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="831"><highlight class="normal">{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>selected<sp/>ADC<sp/>external<sp/>event<sp/>selection<sp/>for<sp/>injected<sp/>group<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" kindref="member">CR2</ref><sp/>|=<sp/><ref refid="group___a_d_c___private___defines_1ga20a54958799c567e9efaa0635aa18a99" kindref="member">CR2_JEXTTRIG_Set</ref>;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>selected<sp/>ADC<sp/>external<sp/>event<sp/>selection<sp/>for<sp/>injected<sp/>group<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" kindref="member">CR2</ref><sp/>&amp;=<sp/><ref refid="group___a_d_c___private___defines_1ga94404d5a0103c5e2d7ffa45956356931" kindref="member">CR2_JEXTTRIG_Reset</ref>;</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="845"><highlight class="normal">}</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="855" refid="group___a_d_c___private___functions_1ga5b141d5dbf5f417a11dfa622c8c149d3" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1ga5b141d5dbf5f417a11dfa622c8c149d3" kindref="member">ADC_SoftwareStartInjectedConvCmd</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="856"><highlight class="normal">{</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>selected<sp/>ADC<sp/>conversion<sp/>for<sp/>injected<sp/>group<sp/>on<sp/>external<sp/>event<sp/>and<sp/>start<sp/>the<sp/>selected</highlight></codeline>
<codeline lineno="863"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADC<sp/>injected<sp/>conversion<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" kindref="member">CR2</ref><sp/>|=<sp/><ref refid="group___a_d_c___private___defines_1gaac5989ccf10d806f2f6a70f925d6b130" kindref="member">CR2_JEXTTRIG_JSWSTART_Set</ref>;</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>selected<sp/>ADC<sp/>conversion<sp/>on<sp/>external<sp/>event<sp/>for<sp/>injected<sp/>group<sp/>and<sp/>stop<sp/>the<sp/>selected</highlight></codeline>
<codeline lineno="869"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADC<sp/>injected<sp/>conversion<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" kindref="member">CR2</ref><sp/>&amp;=<sp/><ref refid="group___a_d_c___private___defines_1gaaa2fb01c1649fde61115602559942ee2" kindref="member">CR2_JEXTTRIG_JSWSTART_Reset</ref>;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal">}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="879" refid="group___a_d_c___private___functions_1ga8765f8835b8cfed13dce3d8d71767dcc" refkind="member"><highlight class="normal"><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref><sp/><ref refid="group___a_d_c___private___functions_1ga8765f8835b8cfed13dce3d8d71767dcc" kindref="member">ADC_GetSoftwareStartInjectedConvCmdStatus</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx)</highlight></codeline>
<codeline lineno="880"><highlight class="normal">{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>status<sp/>of<sp/>JSWSTART<sp/>bit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a1053a65a21af0d27afe1bf9cf7b7aca7" kindref="member">CR2</ref><sp/>&amp;<sp/><ref refid="group___a_d_c___private___defines_1ga5292617782f3327f2e1ed0bd9461704e" kindref="member">CR2_JSWSTART_Set</ref>)<sp/>!=<sp/>(uint32_t)<ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>)</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>JSWSTART<sp/>bit<sp/>is<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" kindref="member">SET</ref>;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>JSWSTART<sp/>bit<sp/>is<sp/>reset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>JSWSTART<sp/>bit<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>bitstatus;</highlight></codeline>
<codeline lineno="897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="936" refid="group___a_d_c___private___functions_1gae2b44bff080184e1cf6f2cb6b9bb3e59" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1gae2b44bff080184e1cf6f2cb6b9bb3e59" kindref="member">ADC_InjectedChannelConfig</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/>uint8_t<sp/>ADC_Channel,<sp/>uint8_t<sp/>Rank,<sp/>uint8_t<sp/>ADC_SampleTime)</highlight></codeline>
<codeline lineno="937"><highlight class="normal">{</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>uint32_t<sp/>tmpreg1<sp/>=<sp/>0,<sp/>tmpreg2<sp/>=<sp/>0,<sp/>tmpreg3<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__channels_1gaba41910dcb2b449c613a5ef638862e77" kindref="member">IS_ADC_CHANNEL</ref>(ADC_Channel));</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__injected__rank_1ga63f95f9a45f4d718aabc9e429d860e9d" kindref="member">IS_ADC_INJECTED_RANK</ref>(Rank));</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__sampling__time_1ga30e0307fa009e1c383d3047b48e94644" kindref="member">IS_ADC_SAMPLE_TIME</ref>(ADC_SampleTime));</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>ADC_Channel_10<sp/>...<sp/>ADC_Channel_17<sp/>is<sp/>selected<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ADC_Channel<sp/>&gt;<sp/><ref refid="group___a_d_c__channels_1ga01a61c428be0cb69327e428e32a42aa1" kindref="member">ADC_Channel_9</ref>)</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>old<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg1<sp/>=<sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a73009a8122fcc628f467a4e997109347" kindref="member">SMPR1</ref>;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>mask<sp/>to<sp/>clear<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg2<sp/>=<sp/><ref refid="group___a_d_c___private___defines_1ga244048ec3ba9461a6609942def9a15ba" kindref="member">SMPR1_SMP_Set</ref><sp/>&lt;&lt;<sp/>(3*(ADC_Channel<sp/>-<sp/>10));</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>old<sp/>channel<sp/>sample<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg1<sp/>&amp;=<sp/>~tmpreg2;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>mask<sp/>to<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg2<sp/>=<sp/>(uint32_t)ADC_SampleTime<sp/>&lt;&lt;<sp/>(3*(ADC_Channel<sp/>-<sp/>10));</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>new<sp/>channel<sp/>sample<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg1<sp/>|=<sp/>tmpreg2;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>new<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a73009a8122fcc628f467a4e997109347" kindref="member">SMPR1</ref><sp/>=<sp/>tmpreg1;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>ADC_Channel<sp/>include<sp/>in<sp/>ADC_Channel_[0..9]<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>old<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg1<sp/>=<sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a9e68fe36c4c8fbbac294b5496ccf7130" kindref="member">SMPR2</ref>;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>mask<sp/>to<sp/>clear<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg2<sp/>=<sp/><ref refid="group___a_d_c___private___defines_1ga6555beb1970c42125678d80530bba4d3" kindref="member">SMPR2_SMP_Set</ref><sp/>&lt;&lt;<sp/>(3<sp/>*<sp/>ADC_Channel);</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>old<sp/>channel<sp/>sample<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg1<sp/>&amp;=<sp/>~tmpreg2;</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>mask<sp/>to<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg2<sp/>=<sp/>(uint32_t)ADC_SampleTime<sp/>&lt;&lt;<sp/>(3<sp/>*<sp/>ADC_Channel);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>new<sp/>channel<sp/>sample<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg1<sp/>|=<sp/>tmpreg2;</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>new<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a9e68fe36c4c8fbbac294b5496ccf7130" kindref="member">SMPR2</ref><sp/>=<sp/>tmpreg1;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Rank<sp/>configuration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>old<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/>tmpreg1<sp/>=<sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a5438a76a93ac1bd2526e92ef298dc193" kindref="member">JSQR</ref>;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>JL<sp/>value:<sp/>Number<sp/>=<sp/>JL+1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>tmpreg3<sp/>=<sp/><sp/>(tmpreg1<sp/>&amp;<sp/><ref refid="group___a_d_c___private___defines_1ga46af9e738702305be0127f6c15c4f7b0" kindref="member">JSQR_JL_Set</ref>)&gt;&gt;<sp/>20;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>mask<sp/>to<sp/>clear:<sp/>((Rank-1)+(4-JL-1))<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>tmpreg2<sp/>=<sp/><ref refid="group___a_d_c___private___defines_1ga5d460390dbe3b400b5e0fdf1e94929f0" kindref="member">JSQR_JSQ_Set</ref><sp/>&lt;&lt;<sp/>(5<sp/>*<sp/>(uint8_t)((Rank<sp/>+<sp/>3)<sp/>-<sp/>(tmpreg3<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>old<sp/>JSQx<sp/>bits<sp/>for<sp/>the<sp/>selected<sp/>rank<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>tmpreg1<sp/>&amp;=<sp/>~tmpreg2;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>mask<sp/>to<sp/>set:<sp/>((Rank-1)+(4-JL-1))<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>tmpreg2<sp/>=<sp/>(uint32_t)ADC_Channel<sp/>&lt;&lt;<sp/>(5<sp/>*<sp/>(uint8_t)((Rank<sp/>+<sp/>3)<sp/>-<sp/>(tmpreg3<sp/>+<sp/>1)));</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>JSQx<sp/>bits<sp/>for<sp/>the<sp/>selected<sp/>rank<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>tmpreg1<sp/>|=<sp/>tmpreg2;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>new<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a5438a76a93ac1bd2526e92ef298dc193" kindref="member">JSQR</ref><sp/>=<sp/>tmpreg1;</highlight></codeline>
<codeline lineno="990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="999" refid="group___a_d_c___private___functions_1ga24eba90bc3ee955e07659a605011710d" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1ga24eba90bc3ee955e07659a605011710d" kindref="member">ADC_InjectedSequencerLengthConfig</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/>uint8_t<sp/>Length)</highlight></codeline>
<codeline lineno="1000"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/>uint32_t<sp/>tmpreg1<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>uint32_t<sp/>tmpreg2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__injected__length_1gaecdddab7424a697722683296ca70e176" kindref="member">IS_ADC_INJECTED_LENGTH</ref>(Length));</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>old<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>tmpreg1<sp/>=<sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a5438a76a93ac1bd2526e92ef298dc193" kindref="member">JSQR</ref>;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>old<sp/>injected<sp/>sequnence<sp/>lenght<sp/>JL<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>tmpreg1<sp/>&amp;=<sp/><ref refid="group___a_d_c___private___defines_1gac8d1173791ea10bac7c53a368d593a16" kindref="member">JSQR_JL_Reset</ref>;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>injected<sp/>sequnence<sp/>lenght<sp/>JL<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>tmpreg2<sp/>=<sp/>Length<sp/>-<sp/>1;<sp/></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>tmpreg1<sp/>|=<sp/>tmpreg2<sp/>&lt;&lt;<sp/>20;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>new<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a5438a76a93ac1bd2526e92ef298dc193" kindref="member">JSQR</ref><sp/>=<sp/>tmpreg1;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031" refid="group___a_d_c___private___functions_1ga07a942613088ab3ecfc3d97a20475920" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1ga07a942613088ab3ecfc3d97a20475920" kindref="member">ADC_SetInjectedOffset</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/>uint8_t<sp/>ADC_InjectedChannel,<sp/>uint16_t<sp/>Offset)</highlight></codeline>
<codeline lineno="1032"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><ref refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" kindref="member">__IO</ref><sp/>uint32_t<sp/>tmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__injected__channel__selection_1gae0bbfb5dbad0fbac8b672db6f63cf8d0" kindref="member">IS_ADC_INJECTED_CHANNEL</ref>(ADC_InjectedChannel));</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__injected__offset_1ga252eaf5d2552f0d11b1bcca7dc48950a" kindref="member">IS_ADC_OFFSET</ref>(Offset));<sp/><sp/></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>(uint32_t)ADCx;</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/>tmp<sp/>+=<sp/>ADC_InjectedChannel;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>selected<sp/>injected<sp/>channel<sp/>data<sp/>offset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/>*(<ref refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" kindref="member">__IO</ref><sp/>uint32_t<sp/>*)<sp/>tmp<sp/>=<sp/>(uint32_t)Offset;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058" refid="group___a_d_c___private___functions_1ga1dea5ed24571a2e0ce4cbd41c9c1ec46" refkind="member"><highlight class="normal">uint16_t<sp/><ref refid="group___a_d_c___private___functions_1ga1dea5ed24571a2e0ce4cbd41c9c1ec46" kindref="member">ADC_GetInjectedConversionValue</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/>uint8_t<sp/>ADC_InjectedChannel)</highlight></codeline>
<codeline lineno="1059"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><ref refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" kindref="member">__IO</ref><sp/>uint32_t<sp/>tmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__injected__channel__selection_1gae0bbfb5dbad0fbac8b672db6f63cf8d0" kindref="member">IS_ADC_INJECTED_CHANNEL</ref>(ADC_InjectedChannel));</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>(uint32_t)ADCx;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/>tmp<sp/>+=<sp/>ADC_InjectedChannel<sp/>+<sp/><ref refid="group___a_d_c___private___defines_1ga5671a68d6f0d01c6c465ee7a3a8f3eea" kindref="member">JDR_Offset</ref>;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>the<sp/>selected<sp/>injected<sp/>channel<sp/>conversion<sp/>data<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)<sp/>(*(<ref refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" kindref="member">__IO</ref><sp/>uint32_t*)<sp/><sp/>tmp);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1071"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088" refid="group___a_d_c___private___functions_1gad017d69bec6e497afd35ba25ea22d86e" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1gad017d69bec6e497afd35ba25ea22d86e" kindref="member">ADC_AnalogWatchdogCmd</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/>uint32_t<sp/>ADC_AnalogWatchdog)</highlight></codeline>
<codeline lineno="1089"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/>uint32_t<sp/>tmpreg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__analog__watchdog__selection_1ga53ffa30f756569194342bfba80165544" kindref="member">IS_ADC_ANALOG_WATCHDOG</ref>(ADC_AnalogWatchdog));</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>old<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/>tmpreg<sp/>=<sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" kindref="member">CR1</ref>;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>AWDEN,<sp/>AWDENJ<sp/>and<sp/>AWDSGL<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/>tmpreg<sp/>&amp;=<sp/><ref refid="group___a_d_c___private___defines_1gae53703f0c718ecc5b3e1a69c60af3697" kindref="member">CR1_AWDMode_Reset</ref>;</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>analog<sp/>watchdog<sp/>enable<sp/>mode<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/>tmpreg<sp/>|=<sp/>ADC_AnalogWatchdog;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>new<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" kindref="member">CR1</ref><sp/>=<sp/>tmpreg;</highlight></codeline>
<codeline lineno="1102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113" refid="group___a_d_c___private___functions_1ga79588d02aa8e4147f21cb90a4708366d" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1ga79588d02aa8e4147f21cb90a4708366d" kindref="member">ADC_AnalogWatchdogThresholdsConfig</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/>uint16_t<sp/>HighThreshold,</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>LowThreshold)</highlight></codeline>
<codeline lineno="1115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__thresholds_1gaa71cdff6dafddfccff8a7e88768bfb54" kindref="member">IS_ADC_THRESHOLD</ref>(HighThreshold));</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__thresholds_1gaa71cdff6dafddfccff8a7e88768bfb54" kindref="member">IS_ADC_THRESHOLD</ref>(LowThreshold));</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>ADCx<sp/>high<sp/>threshold<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a297ac2d83a1837bfdc0333474b977de0" kindref="member">HTR</ref><sp/>=<sp/>HighThreshold;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>ADCx<sp/>low<sp/>threshold<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1afdaf8050fb01739206a92c9ad610f396" kindref="member">LTR</ref><sp/>=<sp/>LowThreshold;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151" refid="group___a_d_c___private___functions_1ga03cef3d12292ffa2b8520524d5b0226c" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1ga03cef3d12292ffa2b8520524d5b0226c" kindref="member">ADC_AnalogWatchdogSingleChannelConfig</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/>uint8_t<sp/>ADC_Channel)</highlight></codeline>
<codeline lineno="1152"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/>uint32_t<sp/>tmpreg<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__channels_1gaba41910dcb2b449c613a5ef638862e77" kindref="member">IS_ADC_CHANNEL</ref>(ADC_Channel));</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>old<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/>tmpreg<sp/>=<sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" kindref="member">CR1</ref>;</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>Analog<sp/>watchdog<sp/>channel<sp/>select<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/>tmpreg<sp/>&amp;=<sp/><ref refid="group___a_d_c___private___defines_1gabe7e68383d281e58707a1cd749a3374e" kindref="member">CR1_AWDCH_Reset</ref>;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>Analog<sp/>watchdog<sp/>channel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/>tmpreg<sp/>|=<sp/>ADC_Channel;</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>new<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" kindref="member">CR1</ref><sp/>=<sp/>tmpreg;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173" refid="group___a_d_c___private___functions_1ga848682e2d7d3de9f8cf03ffa4c11f0b5" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1ga848682e2d7d3de9f8cf03ffa4c11f0b5" kindref="member">ADC_TempSensorVrefintCmd</ref>(<ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="1174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>temperature<sp/>sensor<sp/>and<sp/>Vrefint<sp/>channel*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga90d2d5c526ce5c0a551f533eccbee71a" kindref="member">ADC1</ref>-&gt;CR2<sp/>|=<sp/><ref refid="group___a_d_c___private___defines_1ga7f5e0f807edebbfcef4883f3ec42b9e8" kindref="member">CR2_TSVREFE_Set</ref>;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>temperature<sp/>sensor<sp/>and<sp/>Vrefint<sp/>channel*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga90d2d5c526ce5c0a551f533eccbee71a" kindref="member">ADC1</ref>-&gt;CR2<sp/>&amp;=<sp/><ref refid="group___a_d_c___private___defines_1gaa207bc0eeed8b546dc9536b02df633b5" kindref="member">CR2_TSVREFE_Reset</ref>;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201" refid="group___a_d_c___private___functions_1gaa12546e51ec905c90a3aada432bd4633" refkind="member"><highlight class="normal"><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref><sp/><ref refid="group___a_d_c___private___functions_1gaa12546e51ec905c90a3aada432bd4633" kindref="member">ADC_GetFlagStatus</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/>uint8_t<sp/>ADC_FLAG)</highlight></codeline>
<codeline lineno="1202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__flags__definition_1ga597eb68dfef9dbe0928ed14a1aedc710" kindref="member">IS_ADC_GET_FLAG</ref>(ADC_FLAG));</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>status<sp/>of<sp/>the<sp/>specified<sp/>ADC<sp/>flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a9745df96e98f3cdc2d05ccefce681f64" kindref="member">SR</ref><sp/>&amp;<sp/>ADC_FLAG)<sp/>!=<sp/>(uint8_t)<ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>)</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ADC_FLAG<sp/>is<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" kindref="member">SET</ref>;</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ADC_FLAG<sp/>is<sp/>reset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>ADC_FLAG<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>bitstatus;</highlight></codeline>
<codeline lineno="1220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1234" refid="group___a_d_c___private___functions_1gaf34f36798f811b4a41321ea2d12118d4" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1gaf34f36798f811b4a41321ea2d12118d4" kindref="member">ADC_ClearFlag</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/>uint8_t<sp/>ADC_FLAG)</highlight></codeline>
<codeline lineno="1235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__flags__definition_1gac5b6fb60ec921255b05261ec04573470" kindref="member">IS_ADC_CLEAR_FLAG</ref>(ADC_FLAG));</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>selected<sp/>ADC<sp/>flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a9745df96e98f3cdc2d05ccefce681f64" kindref="member">SR</ref><sp/>=<sp/>~(uint32_t)ADC_FLAG;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253" refid="group___a_d_c___private___functions_1gaa1d3b910a83dbf14d4f68c8eef058612" refkind="member"><highlight class="normal"><ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref><sp/><ref refid="group___a_d_c___private___functions_1gaa1d3b910a83dbf14d4f68c8eef058612" kindref="member">ADC_GetITStatus</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/>uint16_t<sp/>ADC_IT)</highlight></codeline>
<codeline lineno="1254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/>uint32_t<sp/>itmask<sp/>=<sp/>0,<sp/>enablestatus<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__interrupts__definition_1gacae69f04de1a0033f065864d868c006e" kindref="member">IS_ADC_GET_IT</ref>(ADC_IT));</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>ADC<sp/>IT<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/>itmask<sp/>=<sp/>ADC_IT<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>ADC_IT<sp/>enable<sp/>bit<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/>enablestatus<sp/>=<sp/>(ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a89b1ff4376683dd2896ea8b32ded05b2" kindref="member">CR1</ref><sp/>&amp;<sp/>(uint8_t)ADC_IT)<sp/>;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>status<sp/>of<sp/>the<sp/>specified<sp/>ADC<sp/>interrupt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a9745df96e98f3cdc2d05ccefce681f64" kindref="member">SR</ref><sp/>&amp;<sp/>itmask)<sp/>!=<sp/>(uint32_t)<ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>)<sp/>&amp;&amp;<sp/>enablestatus)</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ADC_IT<sp/>is<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" kindref="member">SET</ref>;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ADC_IT<sp/>is<sp/>reset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>ADC_IT<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>bitstatus;</highlight></codeline>
<codeline lineno="1277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight></codeline>
<codeline lineno="1289" refid="group___a_d_c___private___functions_1ga601c6a67bd883eb631ecc7aa5e999b9c" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___a_d_c___private___functions_1ga601c6a67bd883eb631ecc7aa5e999b9c" kindref="member">ADC_ClearITPendingBit</ref>(<ref refid="struct_a_d_c___type_def" kindref="compound">ADC_TypeDef</ref>*<sp/>ADCx,<sp/>uint16_t<sp/>ADC_IT)</highlight></codeline>
<codeline lineno="1290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/>uint8_t<sp/>itmask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c___exported___constants_1gaf5d6bd0153464912e0eaccb1af1aefb2" kindref="member">IS_ADC_ALL_PERIPH</ref>(ADCx));</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___a_d_c__interrupts__definition_1gaf5f8d35930becff402eeb8220641432f" kindref="member">IS_ADC_IT</ref>(ADC_IT));</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>ADC<sp/>IT<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/>itmask<sp/>=<sp/>(uint8_t)(ADC_IT<sp/>&gt;&gt;<sp/>8);</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>selected<sp/>ADC<sp/>interrupt<sp/>pending<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/>ADCx-&gt;<ref refid="struct_a_d_c___type_def_1a9745df96e98f3cdc2d05ccefce681f64" kindref="member">SR</ref><sp/>=<sp/>~(uint32_t)itmask;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[ILG]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(<sp/>__GNUC__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="comment">/*******************<sp/>(C)<sp/>COPYRIGHT<sp/>2011<sp/>STMicroelectronics<sp/>*****END<sp/>OF<sp/>FILE****/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c"/>
  </compounddef>
</doxygen>
