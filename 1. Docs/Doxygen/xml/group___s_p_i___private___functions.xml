<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group___s_p_i___private___functions" kind="group">
    <compoundname>SPI_Private_Functions</compoundname>
    <title>SPI_Private_Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___s_p_i___private___functions_1gabe36880945fa56785283a9c0092124cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SPI_I2S_DeInit</definition>
        <argsstring>(SPI_TypeDef *SPIx)</argsstring>
        <name>SPI_I2S_DeInit</name>
        <param>
          <type><ref refid="struct_s_p_i___type_def" kindref="compound">SPI_TypeDef</ref> *</type>
          <declname>SPIx</declname>
        </param>
        <briefdescription>
<para>Deinitializes the SPIx peripheral registers to their default reset values (Affects also the I2Ss). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SPIx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the SPI peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="119" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="119" bodyend="148"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___s_p_i___exported___constants_1gaf54f84a30a5914b54dbfdc186720d0ba" compoundref="stm32f10x__spi_8h" startline="123">IS_SPI_ALL_PERIPH</references>
        <references refid="group___peripheral__declaration_1gad483be344a28ac800be8f03654a9612f" compoundref="stm32f10x_8h" startline="1418">SPI1</references>
        <references refid="group___r_c_c___exported___functions_1gad94553850ac07106a27ee85fec37efdf" compoundref="stm32f10x__rcc_8c" startline="1185" endline="1198">RCC_APB2PeriphResetCmd</references>
        <references refid="group___a_p_b2__peripheral_1ga289cc086580f4b6a080ea0ed3dd4a7af" compoundref="stm32f10x__rcc_8h" startline="508">RCC_APB2Periph_SPI1</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" compoundref="stm32f10x_8h" startline="521">ENABLE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="group___peripheral__declaration_1gaf2c3d8ce359dcfbb2261e07ed42af72b" compoundref="stm32f10x_8h" startline="1392">SPI2</references>
        <references refid="group___r_c_c___exported___functions_1gab197ae4369c10b92640a733b40ed2801" compoundref="stm32f10x__rcc_8c" startline="1216" endline="1229">RCC_APB1PeriphResetCmd</references>
        <references refid="group___a_p_b1__peripheral_1gaa21f1dfb4fcf241c6f85a048eaca29df" compoundref="stm32f10x__rcc_8h" startline="538">RCC_APB1Periph_SPI2</references>
        <references refid="group___peripheral__declaration_1gab2339cbf25502bf562b19208b1b257fc" compoundref="stm32f10x_8h" startline="1393">SPI3</references>
        <references refid="group___a_p_b1__peripheral_1gabb0b40e839ef7403b086482e89d56f35" compoundref="stm32f10x__rcc_8h" startline="539">RCC_APB1Periph_SPI3</references>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i___private___functions_1ga8dacc1dc48bf08c0f12da409f4889037" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SPI_Init</definition>
        <argsstring>(SPI_TypeDef *SPIx, SPI_InitTypeDef *SPI_InitStruct)</argsstring>
        <name>SPI_Init</name>
        <param>
          <type><ref refid="struct_s_p_i___type_def" kindref="compound">SPI_TypeDef</ref> *</type>
          <declname>SPIx</declname>
        </param>
        <param>
          <type><ref refid="struct_s_p_i___init_type_def" kindref="compound">SPI_InitTypeDef</ref> *</type>
          <declname>SPI_InitStruct</declname>
        </param>
        <briefdescription>
<para>Initializes the SPIx peripheral according to the specified parameters in the SPI_InitStruct. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SPIx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the SPI peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SPI_InitStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <ref refid="struct_s_p_i___init_type_def" kindref="compound">SPI_InitTypeDef</ref> structure that contains the configuration information for the specified SPI peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="158" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="158" bodyend="202"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___s_p_i___exported___constants_1gaf54f84a30a5914b54dbfdc186720d0ba" compoundref="stm32f10x__spi_8h" startline="123">IS_SPI_ALL_PERIPH</references>
        <references refid="group___s_p_i__data__direction_1ga536857c68ce1d9806c04046707448b3e" compoundref="stm32f10x__spi_8h" startline="138">IS_SPI_DIRECTION_MODE</references>
        <references refid="struct_s_p_i___init_type_def_1a8cf0fefa76b9238a41997db14eac62a9" compoundref="stm32f10x__spi_8h" startline="58">SPI_InitTypeDef::SPI_Direction</references>
        <references refid="group___s_p_i__mode_1gad5135300763c75dbb446861536359f12" compoundref="stm32f10x__spi_8h" startline="152">IS_SPI_MODE</references>
        <references refid="struct_s_p_i___init_type_def_1a578435d3b3a17baa5d5ff87447aa697f" compoundref="stm32f10x__spi_8h" startline="61">SPI_InitTypeDef::SPI_Mode</references>
        <references refid="group___s_p_i__data__size_1gab6f9f528f7eb70373b9caf3548e44e67" compoundref="stm32f10x__spi_8h" startline="164">IS_SPI_DATASIZE</references>
        <references refid="struct_s_p_i___init_type_def_1a0e63950d46a6483f9b7048b8c97800b8" compoundref="stm32f10x__spi_8h" startline="64">SPI_InitTypeDef::SPI_DataSize</references>
        <references refid="group___s_p_i___clock___polarity_1gafc1cc5b1ff7e801a409a7a1e6047acf9" compoundref="stm32f10x__spi_8h" startline="176">IS_SPI_CPOL</references>
        <references refid="struct_s_p_i___init_type_def_1a1fe46794d91fd950e06da06b0e488997" compoundref="stm32f10x__spi_8h" startline="67">SPI_InitTypeDef::SPI_CPOL</references>
        <references refid="group___s_p_i___clock___phase_1ga6441f08edf79dd5b243c54b888d3cbf7" compoundref="stm32f10x__spi_8h" startline="188">IS_SPI_CPHA</references>
        <references refid="struct_s_p_i___init_type_def_1acdaac9259c45f137e804f90122edb129" compoundref="stm32f10x__spi_8h" startline="70">SPI_InitTypeDef::SPI_CPHA</references>
        <references refid="group___s_p_i___slave___select__management_1gabbeedf42eccef1bae4f88c606fc3b261" compoundref="stm32f10x__spi_8h" startline="200">IS_SPI_NSS</references>
        <references refid="struct_s_p_i___init_type_def_1a6c1ea4b5e3d147b74799efa42e3903c6" compoundref="stm32f10x__spi_8h" startline="73">SPI_InitTypeDef::SPI_NSS</references>
        <references refid="group___s_p_i___baud_rate___prescaler_1gae79f46ed9f91e39dc1f6912cb25fc716" compoundref="stm32f10x__spi_8h" startline="218">IS_SPI_BAUDRATE_PRESCALER</references>
        <references refid="struct_s_p_i___init_type_def_1adfcf6178b6a117643111c13403f32e71" compoundref="stm32f10x__spi_8h" startline="77">SPI_InitTypeDef::SPI_BaudRatePrescaler</references>
        <references refid="group___s_p_i___m_s_b___l_s_b__transmission_1gabee8e0302741f4a5c41b96af640c63ad" compoundref="stm32f10x__spi_8h" startline="236">IS_SPI_FIRST_BIT</references>
        <references refid="struct_s_p_i___init_type_def_1ace7ca292c290953f8a6ae86f79949f5b" compoundref="stm32f10x__spi_8h" startline="83">SPI_InitTypeDef::SPI_FirstBit</references>
        <references refid="group___s_p_i___c_r_c__polynomial_1ga76eec5bbb44c873aa52966a9cb6c8f8c" compoundref="stm32f10x__spi_8h" startline="431">IS_SPI_CRC_POLYNOMIAL</references>
        <references refid="struct_s_p_i___init_type_def_1aee6460416ade6c4016aac2bd64cae0eb" compoundref="stm32f10x__spi_8h" startline="86">SPI_InitTypeDef::SPI_CRCPolynomial</references>
        <references refid="struct_s_p_i___type_def_1a1e398155ddd013fcdd41309b4bd0bd5f" compoundref="stm32f10x_8h" startline="1162">SPI_TypeDef::CR1</references>
        <references refid="group___s_p_i___private___defines_1ga67f7dd35ea3d1296677e5fc50b88fa90" compoundref="stm32f10x__spi_8c" startline="68">CR1_CLEAR_Mask</references>
        <references refid="struct_s_p_i___type_def_1a20a4775ce461eec0d9a437bed464c0a5" compoundref="stm32f10x_8h" startline="1176">SPI_TypeDef::I2SCFGR</references>
        <references refid="group___s_p_i___private___defines_1ga71da9dd90bf7bfb6ed1748a1e181677a" compoundref="stm32f10x__spi_8c" startline="72">SPI_Mode_Select</references>
        <references refid="struct_s_p_i___type_def_1a353c64e49ec9ae93b950668941f41175" compoundref="stm32f10x_8h" startline="1170">SPI_TypeDef::CRCPR</references>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i___private___functions_1ga53661884ae4a9640df7cbc59187782f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2S_Init</definition>
        <argsstring>(SPI_TypeDef *SPIx, I2S_InitTypeDef *I2S_InitStruct)</argsstring>
        <name>I2S_Init</name>
        <param>
          <type><ref refid="struct_s_p_i___type_def" kindref="compound">SPI_TypeDef</ref> *</type>
          <declname>SPIx</declname>
        </param>
        <param>
          <type><ref refid="struct_i2_s___init_type_def" kindref="compound">I2S_InitTypeDef</ref> *</type>
          <declname>I2S_InitStruct</declname>
        </param>
        <briefdescription>
<para>Initializes the SPIx peripheral according to the specified parameters in the I2S_InitStruct. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SPIx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 2 or 3 to select the SPI peripheral (configured in I2S mode). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I2S_InitStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an <ref refid="struct_i2_s___init_type_def" kindref="compound">I2S_InitTypeDef</ref> structure that contains the configuration information for the specified SPI peripheral configured in I2S mode. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The function calculates the optimal prescaler needed to obtain the most accurate audio frequency (depending on the I2S clock source, the PLL values and the product configuration). But in case the prescaler value is greater than 511, the default value (0x02) will be configured instead. * </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="219" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="219" bodyend="372"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___s_p_i___exported___constants_1gae2222c673a036497587b8791f89428d0" compoundref="stm32f10x__spi_8h" startline="127">IS_SPI_23_PERIPH</references>
        <references refid="group___i2_s___mode_1ga942c37b2c1274c4c5773ddcf8b46d9b5" compoundref="stm32f10x__spi_8h" startline="250">IS_I2S_MODE</references>
        <references refid="struct_i2_s___init_type_def_1aa57e5190eac245c0873a00849b1bd239" compoundref="stm32f10x__spi_8h" startline="96">I2S_InitTypeDef::I2S_Mode</references>
        <references refid="group___i2_s___standard_1ga826b9ddb34520b8fa64c2b65c9bfd528" compoundref="stm32f10x__spi_8h" startline="267">IS_I2S_STANDARD</references>
        <references refid="struct_i2_s___init_type_def_1ae987936e7cb9a962ee388c98f8c872b7" compoundref="stm32f10x__spi_8h" startline="99">I2S_InitTypeDef::I2S_Standard</references>
        <references refid="group___i2_s___data___format_1gac467da829eca4a5c4ce41a6abd2d8e81" compoundref="stm32f10x__spi_8h" startline="284">IS_I2S_DATA_FORMAT</references>
        <references refid="struct_i2_s___init_type_def_1ad5e59034081427fd638983c10f18e833" compoundref="stm32f10x__spi_8h" startline="102">I2S_InitTypeDef::I2S_DataFormat</references>
        <references refid="group___i2_s___m_c_l_k___output_1ga829ae526d1d11f14592e881f800fbb8a" compoundref="stm32f10x__spi_8h" startline="298">IS_I2S_MCLK_OUTPUT</references>
        <references refid="struct_i2_s___init_type_def_1ae7aaf79b7f392d79ac2f7b35a24e5d1a" compoundref="stm32f10x__spi_8h" startline="105">I2S_InitTypeDef::I2S_MCLKOutput</references>
        <references refid="group___i2_s___audio___frequency_1gaf39d917f4a38fd9916ec347fb055391c" compoundref="stm32f10x__spi_8h" startline="319">IS_I2S_AUDIO_FREQ</references>
        <references refid="struct_i2_s___init_type_def_1a87674c5fbccad53b7646565f35d1fc0a" compoundref="stm32f10x__spi_8h" startline="108">I2S_InitTypeDef::I2S_AudioFreq</references>
        <references refid="group___i2_s___clock___polarity_1ga6323375bf0b6fa6e2ee2a9ce6f9ef82f" compoundref="stm32f10x__spi_8h" startline="332">IS_I2S_CPOL</references>
        <references refid="struct_i2_s___init_type_def_1aeb7741728520734ec2eab95d2143778c" compoundref="stm32f10x__spi_8h" startline="111">I2S_InitTypeDef::I2S_CPOL</references>
        <references refid="struct_s_p_i___type_def_1a20a4775ce461eec0d9a437bed464c0a5" compoundref="stm32f10x_8h" startline="1176">SPI_TypeDef::I2SCFGR</references>
        <references refid="group___s_p_i___private___defines_1ga6cd1ac4e83d8de8e32a407d1a7971389" compoundref="stm32f10x__spi_8c" startline="69">I2SCFGR_CLEAR_Mask</references>
        <references refid="struct_s_p_i___type_def_1aecee11b0d2e534b5243e9db6a0e10026" compoundref="stm32f10x_8h" startline="1178">SPI_TypeDef::I2SPR</references>
        <references refid="group___i2_s___audio___frequency_1ga30f78e8214e8a91cdb6d6360c1d3f18d" compoundref="stm32f10x__spi_8h" startline="317">I2S_AudioFreq_Default</references>
        <references refid="group___i2_s___data___format_1gabcd7cb799b68346a735709cc135bd414" compoundref="stm32f10x__spi_8h" startline="280">I2S_DataFormat_16b</references>
        <references refid="group___peripheral__memory__map_1gac3e357b4c25106ed375fb1affab6bb86" compoundref="stm32f10x_8h" startline="1298">SPI2_BASE</references>
        <references refid="group___s_p_i___private___defines_1gae1190efd6dbcd06a9c03f4d499d28e4c" compoundref="stm32f10x__spi_8c" startline="76">I2S2_CLOCK_SRC</references>
        <references refid="group___s_p_i___private___defines_1gabb67971448c15090f3372e3875db3d23" compoundref="stm32f10x__spi_8c" startline="77">I2S3_CLOCK_SRC</references>
        <references refid="group___peripheral__declaration_1ga74944438a086975793d26ae48d5882d4" compoundref="stm32f10x_8h" startline="1443">RCC</references>
        <references refid="group___s_p_i___private___defines_1gaf9cca755995c8e8f7a4012709ca468f2" compoundref="stm32f10x__spi_8c" startline="78">I2S_MUL_MASK</references>
        <references refid="group___s_p_i___private___defines_1ga26cdb43c45ac655c792c5af0a6bbb0bf" compoundref="stm32f10x__spi_8c" startline="79">I2S_DIV_MASK</references>
        <references refid="group___exported__types_1gab12a1abe6dd0001e7a0487a8b175b28c" compoundref="stm32f10x_8h" startline="528">HSE_Value</references>
        <references refid="group___r_c_c___exported___functions_1ga3e9944fd1ed734275222bbb3e3f29993" compoundref="stm32f10x__rcc_8c" startline="908" endline="1031">RCC_GetClocksFreq</references>
        <references refid="struct_r_c_c___clocks_type_def_1a2ba325067f3d464ad7955358932563d8" compoundref="stm32f10x__rcc_8h" startline="48">RCC_ClocksTypeDef::SYSCLK_Frequency</references>
        <references refid="group___i2_s___m_c_l_k___output_1ga99713ee8c824f4d3bb25a9ce7bf5312a" compoundref="stm32f10x__spi_8h" startline="296">I2S_MCLKOutput_Enable</references>
        <references refid="group___s_p_i___private___defines_1ga196b1b58421a7ee7dba0b46fb33c621b" compoundref="stm32f10x__spi_8c" startline="73">I2S_Mode_Select</references>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i___private___functions_1ga9a0116f88cc2c4478c270f05608703f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SPI_StructInit</definition>
        <argsstring>(SPI_InitTypeDef *SPI_InitStruct)</argsstring>
        <name>SPI_StructInit</name>
        <param>
          <type><ref refid="struct_s_p_i___init_type_def" kindref="compound">SPI_InitTypeDef</ref> *</type>
          <declname>SPI_InitStruct</declname>
        </param>
        <briefdescription>
<para>Fills each SPI_InitStruct member with its default value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SPI_InitStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to a <ref refid="struct_s_p_i___init_type_def" kindref="compound">SPI_InitTypeDef</ref> structure which will be initialized. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="379" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="379" bodyend="400"/>
        <references refid="struct_s_p_i___init_type_def_1a8cf0fefa76b9238a41997db14eac62a9" compoundref="stm32f10x__spi_8h" startline="58">SPI_InitTypeDef::SPI_Direction</references>
        <references refid="group___s_p_i__data__direction_1gab6bdb82e315a90210c4425c46bbdf5f1" compoundref="stm32f10x__spi_8h" startline="134">SPI_Direction_2Lines_FullDuplex</references>
        <references refid="struct_s_p_i___init_type_def_1a578435d3b3a17baa5d5ff87447aa697f" compoundref="stm32f10x__spi_8h" startline="61">SPI_InitTypeDef::SPI_Mode</references>
        <references refid="group___s_p_i__mode_1ga84621141413ee07cb2d2dc82da2baa42" compoundref="stm32f10x__spi_8h" startline="151">SPI_Mode_Slave</references>
        <references refid="struct_s_p_i___init_type_def_1a0e63950d46a6483f9b7048b8c97800b8" compoundref="stm32f10x__spi_8h" startline="64">SPI_InitTypeDef::SPI_DataSize</references>
        <references refid="group___s_p_i__data__size_1ga56721814a935922b6ca7c49060509765" compoundref="stm32f10x__spi_8h" startline="163">SPI_DataSize_8b</references>
        <references refid="struct_s_p_i___init_type_def_1a1fe46794d91fd950e06da06b0e488997" compoundref="stm32f10x__spi_8h" startline="67">SPI_InitTypeDef::SPI_CPOL</references>
        <references refid="group___s_p_i___clock___polarity_1ga3dbc0234c4b4e7c37137e7c189f3c085" compoundref="stm32f10x__spi_8h" startline="174">SPI_CPOL_Low</references>
        <references refid="struct_s_p_i___init_type_def_1acdaac9259c45f137e804f90122edb129" compoundref="stm32f10x__spi_8h" startline="70">SPI_InitTypeDef::SPI_CPHA</references>
        <references refid="group___s_p_i___clock___phase_1gaade9d9555fac8a302bde5c94da9c7292" compoundref="stm32f10x__spi_8h" startline="186">SPI_CPHA_1Edge</references>
        <references refid="struct_s_p_i___init_type_def_1a6c1ea4b5e3d147b74799efa42e3903c6" compoundref="stm32f10x__spi_8h" startline="73">SPI_InitTypeDef::SPI_NSS</references>
        <references refid="group___s_p_i___slave___select__management_1ga07c547459d39fb7a6e0322147a60b74a" compoundref="stm32f10x__spi_8h" startline="199">SPI_NSS_Hard</references>
        <references refid="struct_s_p_i___init_type_def_1adfcf6178b6a117643111c13403f32e71" compoundref="stm32f10x__spi_8h" startline="77">SPI_InitTypeDef::SPI_BaudRatePrescaler</references>
        <references refid="group___s_p_i___baud_rate___prescaler_1ga88cd6d416c87b382396dbf4c02e3bd4b" compoundref="stm32f10x__spi_8h" startline="210">SPI_BaudRatePrescaler_2</references>
        <references refid="struct_s_p_i___init_type_def_1ace7ca292c290953f8a6ae86f79949f5b" compoundref="stm32f10x__spi_8h" startline="83">SPI_InitTypeDef::SPI_FirstBit</references>
        <references refid="group___s_p_i___m_s_b___l_s_b__transmission_1ga45e688f93a93b605886240cad23bc2eb" compoundref="stm32f10x__spi_8h" startline="234">SPI_FirstBit_MSB</references>
        <references refid="struct_s_p_i___init_type_def_1aee6460416ade6c4016aac2bd64cae0eb" compoundref="stm32f10x__spi_8h" startline="86">SPI_InitTypeDef::SPI_CRCPolynomial</references>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i___private___functions_1ga7470ec1d0759fdeeb42c7fe71a3b41b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2S_StructInit</definition>
        <argsstring>(I2S_InitTypeDef *I2S_InitStruct)</argsstring>
        <name>I2S_StructInit</name>
        <param>
          <type><ref refid="struct_i2_s___init_type_def" kindref="compound">I2S_InitTypeDef</ref> *</type>
          <declname>I2S_InitStruct</declname>
        </param>
        <briefdescription>
<para>Fills each I2S_InitStruct member with its default value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2S_InitStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to a <ref refid="struct_i2_s___init_type_def" kindref="compound">I2S_InitTypeDef</ref> structure which will be initialized. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="407" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="407" bodyend="427"/>
        <references refid="struct_i2_s___init_type_def_1aa57e5190eac245c0873a00849b1bd239" compoundref="stm32f10x__spi_8h" startline="96">I2S_InitTypeDef::I2S_Mode</references>
        <references refid="group___i2_s___mode_1gadd5b20277198fcdb6aa53ea48e802ae5" compoundref="stm32f10x__spi_8h" startline="246">I2S_Mode_SlaveTx</references>
        <references refid="struct_i2_s___init_type_def_1ae987936e7cb9a962ee388c98f8c872b7" compoundref="stm32f10x__spi_8h" startline="99">I2S_InitTypeDef::I2S_Standard</references>
        <references refid="group___i2_s___standard_1gacdb89d66a2a941924ff4b7a8d14884f9" compoundref="stm32f10x__spi_8h" startline="262">I2S_Standard_Phillips</references>
        <references refid="struct_i2_s___init_type_def_1ad5e59034081427fd638983c10f18e833" compoundref="stm32f10x__spi_8h" startline="102">I2S_InitTypeDef::I2S_DataFormat</references>
        <references refid="group___i2_s___data___format_1gabcd7cb799b68346a735709cc135bd414" compoundref="stm32f10x__spi_8h" startline="280">I2S_DataFormat_16b</references>
        <references refid="struct_i2_s___init_type_def_1ae7aaf79b7f392d79ac2f7b35a24e5d1a" compoundref="stm32f10x__spi_8h" startline="105">I2S_InitTypeDef::I2S_MCLKOutput</references>
        <references refid="group___i2_s___m_c_l_k___output_1gaea09824d7e6359924152277ed3661e7e" compoundref="stm32f10x__spi_8h" startline="297">I2S_MCLKOutput_Disable</references>
        <references refid="struct_i2_s___init_type_def_1a87674c5fbccad53b7646565f35d1fc0a" compoundref="stm32f10x__spi_8h" startline="108">I2S_InitTypeDef::I2S_AudioFreq</references>
        <references refid="group___i2_s___audio___frequency_1ga30f78e8214e8a91cdb6d6360c1d3f18d" compoundref="stm32f10x__spi_8h" startline="317">I2S_AudioFreq_Default</references>
        <references refid="struct_i2_s___init_type_def_1aeb7741728520734ec2eab95d2143778c" compoundref="stm32f10x__spi_8h" startline="111">I2S_InitTypeDef::I2S_CPOL</references>
        <references refid="group___i2_s___clock___polarity_1gae859a63575e4af3e007fc5123fa901ab" compoundref="stm32f10x__spi_8h" startline="330">I2S_CPOL_Low</references>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i___private___functions_1gaa31357879a65ee1ed7223f3b9114dcf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SPI_Cmd</definition>
        <argsstring>(SPI_TypeDef *SPIx, FunctionalState NewState)</argsstring>
        <name>SPI_Cmd</name>
        <param>
          <type><ref refid="struct_s_p_i___type_def" kindref="compound">SPI_TypeDef</ref> *</type>
          <declname>SPIx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified SPI peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SPIx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the SPI peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the SPIx peripheral. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="436" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="436" bodyend="451"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___s_p_i___exported___constants_1gaf54f84a30a5914b54dbfdc186720d0ba" compoundref="stm32f10x__spi_8h" startline="123">IS_SPI_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_s_p_i___type_def_1a1e398155ddd013fcdd41309b4bd0bd5f" compoundref="stm32f10x_8h" startline="1162">SPI_TypeDef::CR1</references>
        <references refid="group___s_p_i___private___defines_1ga74286f403309d32b56fed10aba2ebf91" compoundref="stm32f10x__spi_8c" startline="49">CR1_SPE_Set</references>
        <references refid="group___s_p_i___private___defines_1ga7074d384e7f175968d1497a9275232bf" compoundref="stm32f10x__spi_8c" startline="50">CR1_SPE_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i___private___functions_1gafe061c71bbc5b4224f3f2884dc53739e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2S_Cmd</definition>
        <argsstring>(SPI_TypeDef *SPIx, FunctionalState NewState)</argsstring>
        <name>I2S_Cmd</name>
        <param>
          <type><ref refid="struct_s_p_i___type_def" kindref="compound">SPI_TypeDef</ref> *</type>
          <declname>SPIx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified SPI peripheral (in I2S mode). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SPIx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 2 or 3 to select the SPI peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the SPIx peripheral. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="460" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="460" bodyend="475"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___s_p_i___exported___constants_1gae2222c673a036497587b8791f89428d0" compoundref="stm32f10x__spi_8h" startline="127">IS_SPI_23_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_s_p_i___type_def_1a20a4775ce461eec0d9a437bed464c0a5" compoundref="stm32f10x_8h" startline="1176">SPI_TypeDef::I2SCFGR</references>
        <references refid="group___s_p_i___private___defines_1gaded516c1bc1f0cb578174af3e296621b" compoundref="stm32f10x__spi_8c" startline="53">I2SCFGR_I2SE_Set</references>
        <references refid="group___s_p_i___private___defines_1ga0ba63ca824d68ed9a84eafd6f4d64a3a" compoundref="stm32f10x__spi_8c" startline="54">I2SCFGR_I2SE_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i___private___functions_1ga17f4ef132e8ddbf94cb6b1688d181e41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SPI_I2S_ITConfig</definition>
        <argsstring>(SPI_TypeDef *SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)</argsstring>
        <name>SPI_I2S_ITConfig</name>
        <param>
          <type><ref refid="struct_s_p_i___type_def" kindref="compound">SPI_TypeDef</ref> *</type>
          <declname>SPIx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>SPI_I2S_IT</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified SPI/I2S interrupts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SPIx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be<itemizedlist>
<listitem><para>1, 2 or 3 in SPI mode</para></listitem><listitem><para>2 or 3 in I2S mode </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SPI_I2S_IT</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the SPI/I2S interrupt source to be enabled or disabled. This parameter can be one of the following values: <itemizedlist>
<listitem><para>SPI_I2S_IT_TXE: Tx buffer empty interrupt mask </para></listitem>
<listitem><para>SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask </para></listitem>
<listitem><para>SPI_I2S_IT_ERR: Error interrupt mask </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the specified SPI/I2S interrupt. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="491" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="491" bodyend="526"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___s_p_i___exported___constants_1gaf54f84a30a5914b54dbfdc186720d0ba" compoundref="stm32f10x__spi_8h" startline="123">IS_SPI_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___s_p_i___i2_s__interrupts__definition_1ga3ec2f6950d7ff801f992e65593c3365e" compoundref="stm32f10x__spi_8h" startline="391">IS_SPI_I2S_CONFIG_IT</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_s_p_i___type_def_1ac891e34644b8dc27bacc906cfd18b235" compoundref="stm32f10x_8h" startline="1164">SPI_TypeDef::CR2</references>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i___private___functions_1gabed5b91a8576e6d578f364cc0e807e4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SPI_I2S_DMACmd</definition>
        <argsstring>(SPI_TypeDef *SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)</argsstring>
        <name>SPI_I2S_DMACmd</name>
        <param>
          <type><ref refid="struct_s_p_i___type_def" kindref="compound">SPI_TypeDef</ref> *</type>
          <declname>SPIx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>SPI_I2S_DMAReq</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the SPIx/I2Sx DMA interface. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SPIx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be<itemizedlist>
<listitem><para>1, 2 or 3 in SPI mode</para></listitem><listitem><para>2 or 3 in I2S mode </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SPI_I2S_DMAReq</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the SPI/I2S DMA transfer request to be enabled or disabled. This parameter can be any combination of the following values: <itemizedlist>
<listitem><para>SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request </para></listitem>
<listitem><para>SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the selected SPI/I2S DMA transfer request. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="541" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="541" bodyend="557"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___s_p_i___exported___constants_1gaf54f84a30a5914b54dbfdc186720d0ba" compoundref="stm32f10x__spi_8h" startline="123">IS_SPI_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___s_p_i___i2_s___d_m_a__transfer__requests_1ga6a8f97093494f2331dbdf9295d7c2c6b" compoundref="stm32f10x__spi_8h" startline="344">IS_SPI_I2S_DMAREQ</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_s_p_i___type_def_1ac891e34644b8dc27bacc906cfd18b235" compoundref="stm32f10x_8h" startline="1164">SPI_TypeDef::CR2</references>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i___private___functions_1gad5af40bebe8dbe3fa8bd476489d7e3da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SPI_I2S_SendData</definition>
        <argsstring>(SPI_TypeDef *SPIx, uint16_t Data)</argsstring>
        <name>SPI_I2S_SendData</name>
        <param>
          <type><ref refid="struct_s_p_i___type_def" kindref="compound">SPI_TypeDef</ref> *</type>
          <declname>SPIx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
<para>Transmits a Data through the SPIx/I2Sx peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SPIx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be<itemizedlist>
<listitem><para>1, 2 or 3 in SPI mode</para></listitem><listitem><para>2 or 3 in I2S mode </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>: Data to be transmitted. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="567" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="567" bodyend="574"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___s_p_i___exported___constants_1gaf54f84a30a5914b54dbfdc186720d0ba" compoundref="stm32f10x__spi_8h" startline="123">IS_SPI_ALL_PERIPH</references>
        <references refid="struct_s_p_i___type_def_1ae192c943732b6ab5e5611e860cc05544" compoundref="stm32f10x_8h" startline="1168">SPI_TypeDef::DR</references>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i___private___functions_1gab77de76547f3bff403236b263b070a30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t SPI_I2S_ReceiveData</definition>
        <argsstring>(SPI_TypeDef *SPIx)</argsstring>
        <name>SPI_I2S_ReceiveData</name>
        <param>
          <type><ref refid="struct_s_p_i___type_def" kindref="compound">SPI_TypeDef</ref> *</type>
          <declname>SPIx</declname>
        </param>
        <briefdescription>
<para>Returns the most recent received data by the SPIx/I2Sx peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SPIx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be<itemizedlist>
<listitem><para>1, 2 or 3 in SPI mode</para></listitem><listitem><para>2 or 3 in I2S mode </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the received data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="583" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="583" bodyend="590"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___s_p_i___exported___constants_1gaf54f84a30a5914b54dbfdc186720d0ba" compoundref="stm32f10x__spi_8h" startline="123">IS_SPI_ALL_PERIPH</references>
        <references refid="struct_s_p_i___type_def_1ae192c943732b6ab5e5611e860cc05544" compoundref="stm32f10x_8h" startline="1168">SPI_TypeDef::DR</references>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i___private___functions_1ga56fc508a482f032f9eb80e4c63184126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SPI_NSSInternalSoftwareConfig</definition>
        <argsstring>(SPI_TypeDef *SPIx, uint16_t SPI_NSSInternalSoft)</argsstring>
        <name>SPI_NSSInternalSoftwareConfig</name>
        <param>
          <type><ref refid="struct_s_p_i___type_def" kindref="compound">SPI_TypeDef</ref> *</type>
          <declname>SPIx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>SPI_NSSInternalSoft</declname>
        </param>
        <briefdescription>
<para>Configures internally by software the NSS pin for the selected SPI. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SPIx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the SPI peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SPI_NSSInternalSoft</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the SPI NSS internal state. This parameter can be one of the following values: <itemizedlist>
<listitem><para>SPI_NSSInternalSoft_Set: Set NSS pin internally </para></listitem>
<listitem><para>SPI_NSSInternalSoft_Reset: Reset NSS pin internally </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="601" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="601" bodyend="616"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___s_p_i___exported___constants_1gaf54f84a30a5914b54dbfdc186720d0ba" compoundref="stm32f10x__spi_8h" startline="123">IS_SPI_ALL_PERIPH</references>
        <references refid="group___s_p_i___n_s_s__internal__software__management_1ga7036de442206fb8b365528c115345b36" compoundref="stm32f10x__spi_8h" startline="355">IS_SPI_NSS_INTERNAL</references>
        <references refid="group___s_p_i___n_s_s__internal__software__management_1ga292ec7bc0cd362d61b3b5eed620522c2" compoundref="stm32f10x__spi_8h" startline="354">SPI_NSSInternalSoft_Reset</references>
        <references refid="struct_s_p_i___type_def_1a1e398155ddd013fcdd41309b4bd0bd5f" compoundref="stm32f10x_8h" startline="1162">SPI_TypeDef::CR1</references>
        <references refid="group___s_p_i___n_s_s__internal__software__management_1ga6b2102816167d12140648dba49a192a7" compoundref="stm32f10x__spi_8h" startline="353">SPI_NSSInternalSoft_Set</references>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i___private___functions_1ga4ec54abdedf6cd17403d853a926d91c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SPI_SSOutputCmd</definition>
        <argsstring>(SPI_TypeDef *SPIx, FunctionalState NewState)</argsstring>
        <name>SPI_SSOutputCmd</name>
        <param>
          <type><ref refid="struct_s_p_i___type_def" kindref="compound">SPI_TypeDef</ref> *</type>
          <declname>SPIx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the SS output for the selected SPI. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SPIx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the SPI peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the SPIx SS output. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="625" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="625" bodyend="640"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___s_p_i___exported___constants_1gaf54f84a30a5914b54dbfdc186720d0ba" compoundref="stm32f10x__spi_8h" startline="123">IS_SPI_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_s_p_i___type_def_1ac891e34644b8dc27bacc906cfd18b235" compoundref="stm32f10x_8h" startline="1164">SPI_TypeDef::CR2</references>
        <references refid="group___s_p_i___private___defines_1gaae3c2720c0b63d7cc26046969a45a6c1" compoundref="stm32f10x__spi_8c" startline="64">CR2_SSOE_Set</references>
        <references refid="group___s_p_i___private___defines_1ga475caaaef8732d35e4c6fd3f21dc4e3c" compoundref="stm32f10x__spi_8c" startline="65">CR2_SSOE_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i___private___functions_1gafc82e90841d7879535d655c035709cb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SPI_DataSizeConfig</definition>
        <argsstring>(SPI_TypeDef *SPIx, uint16_t SPI_DataSize)</argsstring>
        <name>SPI_DataSizeConfig</name>
        <param>
          <type><ref refid="struct_s_p_i___type_def" kindref="compound">SPI_TypeDef</ref> *</type>
          <declname>SPIx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>SPI_DataSize</declname>
        </param>
        <briefdescription>
<para>Configures the data size for the selected SPI. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SPIx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the SPI peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SPI_DataSize</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the SPI data size. This parameter can be one of the following values: <itemizedlist>
<listitem><para>SPI_DataSize_16b: Set data frame format to 16bit </para></listitem>
<listitem><para>SPI_DataSize_8b: Set data frame format to 8bit </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="651" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="651" bodyend="660"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___s_p_i___exported___constants_1gaf54f84a30a5914b54dbfdc186720d0ba" compoundref="stm32f10x__spi_8h" startline="123">IS_SPI_ALL_PERIPH</references>
        <references refid="group___s_p_i__data__size_1gab6f9f528f7eb70373b9caf3548e44e67" compoundref="stm32f10x__spi_8h" startline="164">IS_SPI_DATASIZE</references>
        <references refid="struct_s_p_i___type_def_1a1e398155ddd013fcdd41309b4bd0bd5f" compoundref="stm32f10x_8h" startline="1162">SPI_TypeDef::CR1</references>
        <references refid="group___s_p_i__data__size_1ga8af2c8ca5c2162423531ebf560e0a41d" compoundref="stm32f10x__spi_8h" startline="162">SPI_DataSize_16b</references>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i___private___functions_1gace8b1058e09bab150b0dbe5978810273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SPI_TransmitCRC</definition>
        <argsstring>(SPI_TypeDef *SPIx)</argsstring>
        <name>SPI_TransmitCRC</name>
        <param>
          <type><ref refid="struct_s_p_i___type_def" kindref="compound">SPI_TypeDef</ref> *</type>
          <declname>SPIx</declname>
        </param>
        <briefdescription>
<para>Transmit the SPIx CRC value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SPIx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the SPI peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="667" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="667" bodyend="674"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___s_p_i___exported___constants_1gaf54f84a30a5914b54dbfdc186720d0ba" compoundref="stm32f10x__spi_8h" startline="123">IS_SPI_ALL_PERIPH</references>
        <references refid="struct_s_p_i___type_def_1a1e398155ddd013fcdd41309b4bd0bd5f" compoundref="stm32f10x_8h" startline="1162">SPI_TypeDef::CR1</references>
        <references refid="group___s_p_i___private___defines_1gaed3a2181ca4095a6488cf6c0ad7a29c6" compoundref="stm32f10x__spi_8c" startline="57">CR1_CRCNext_Set</references>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i___private___functions_1ga64f7276d119e6cb58afc100f8832adb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SPI_CalculateCRC</definition>
        <argsstring>(SPI_TypeDef *SPIx, FunctionalState NewState)</argsstring>
        <name>SPI_CalculateCRC</name>
        <param>
          <type><ref refid="struct_s_p_i___type_def" kindref="compound">SPI_TypeDef</ref> *</type>
          <declname>SPIx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the CRC value calculation of the transferred bytes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SPIx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the SPI peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the SPIx CRC value calculation. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="683" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="683" bodyend="698"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___s_p_i___exported___constants_1gaf54f84a30a5914b54dbfdc186720d0ba" compoundref="stm32f10x__spi_8h" startline="123">IS_SPI_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_s_p_i___type_def_1a1e398155ddd013fcdd41309b4bd0bd5f" compoundref="stm32f10x_8h" startline="1162">SPI_TypeDef::CR1</references>
        <references refid="group___s_p_i___private___defines_1gae0b545cdda02753c8e8863e883268011" compoundref="stm32f10x__spi_8c" startline="60">CR1_CRCEN_Set</references>
        <references refid="group___s_p_i___private___defines_1gadd72ac04e7b2ff17053db04d240e17b1" compoundref="stm32f10x__spi_8c" startline="61">CR1_CRCEN_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i___private___functions_1ga4c81c193516e82cf0a2fdc149ef20cc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t SPI_GetCRC</definition>
        <argsstring>(SPI_TypeDef *SPIx, uint8_t SPI_CRC)</argsstring>
        <name>SPI_GetCRC</name>
        <param>
          <type><ref refid="struct_s_p_i___type_def" kindref="compound">SPI_TypeDef</ref> *</type>
          <declname>SPIx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>SPI_CRC</declname>
        </param>
        <briefdescription>
<para>Returns the transmit or the receive CRC register value for the specified SPI. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SPIx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the SPI peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SPI_CRC</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the CRC register to be read. This parameter can be one of the following values: <itemizedlist>
<listitem><para>SPI_CRC_Tx: Selects Tx CRC register </para></listitem>
<listitem><para>SPI_CRC_Rx: Selects Rx CRC register </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>selected CRC register value.. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="709" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="709" bodyend="727"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___s_p_i___exported___constants_1gaf54f84a30a5914b54dbfdc186720d0ba" compoundref="stm32f10x__spi_8h" startline="123">IS_SPI_ALL_PERIPH</references>
        <references refid="group___s_p_i___c_r_c___transmit___receive_1ga31fe242594f851558496a93f85def883" compoundref="stm32f10x__spi_8h" startline="367">IS_SPI_CRC</references>
        <references refid="group___s_p_i___c_r_c___transmit___receive_1gaf68380273616efbbc2dc9a420f1c641b" compoundref="stm32f10x__spi_8h" startline="366">SPI_CRC_Rx</references>
        <references refid="struct_s_p_i___type_def_1a3c0c1be66bc0a1846274a7511f4a36f5" compoundref="stm32f10x_8h" startline="1174">SPI_TypeDef::TXCRCR</references>
        <references refid="struct_s_p_i___type_def_1ab53da6fb851d911ae0b1166be2cfe48a" compoundref="stm32f10x_8h" startline="1172">SPI_TypeDef::RXCRCR</references>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i___private___functions_1ga80fb9374cfce670f29128bb78568353f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t SPI_GetCRCPolynomial</definition>
        <argsstring>(SPI_TypeDef *SPIx)</argsstring>
        <name>SPI_GetCRCPolynomial</name>
        <param>
          <type><ref refid="struct_s_p_i___type_def" kindref="compound">SPI_TypeDef</ref> *</type>
          <declname>SPIx</declname>
        </param>
        <briefdescription>
<para>Returns the CRC Polynomial register value for the specified SPI. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SPIx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the SPI peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>CRC Polynomial register value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="734" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="734" bodyend="741"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___s_p_i___exported___constants_1gaf54f84a30a5914b54dbfdc186720d0ba" compoundref="stm32f10x__spi_8h" startline="123">IS_SPI_ALL_PERIPH</references>
        <references refid="struct_s_p_i___type_def_1a353c64e49ec9ae93b950668941f41175" compoundref="stm32f10x_8h" startline="1170">SPI_TypeDef::CRCPR</references>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i___private___functions_1ga166171c421fc51da7714723524d41b45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SPI_BiDirectionalLineConfig</definition>
        <argsstring>(SPI_TypeDef *SPIx, uint16_t SPI_Direction)</argsstring>
        <name>SPI_BiDirectionalLineConfig</name>
        <param>
          <type><ref refid="struct_s_p_i___type_def" kindref="compound">SPI_TypeDef</ref> *</type>
          <declname>SPIx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>SPI_Direction</declname>
        </param>
        <briefdescription>
<para>Selects the data transfer direction in bi-directional mode for the specified SPI. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SPIx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the SPI peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SPI_Direction</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the data transfer direction in bi-directional mode. This parameter can be one of the following values: <itemizedlist>
<listitem><para>SPI_Direction_Tx: Selects Tx transmission direction </para></listitem>
<listitem><para>SPI_Direction_Rx: Selects Rx receive direction </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="752" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="752" bodyend="767"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___s_p_i___exported___constants_1gaf54f84a30a5914b54dbfdc186720d0ba" compoundref="stm32f10x__spi_8h" startline="123">IS_SPI_ALL_PERIPH</references>
        <references refid="group___s_p_i__direction__transmit__receive_1gae96b69403c4206e347cde77b9a30e207" compoundref="stm32f10x__spi_8h" startline="378">IS_SPI_DIRECTION</references>
        <references refid="group___s_p_i__direction__transmit__receive_1gabd76982a7e305c13f7ad8ea1789d3c0c" compoundref="stm32f10x__spi_8h" startline="377">SPI_Direction_Tx</references>
        <references refid="struct_s_p_i___type_def_1a1e398155ddd013fcdd41309b4bd0bd5f" compoundref="stm32f10x_8h" startline="1162">SPI_TypeDef::CR1</references>
        <references refid="group___s_p_i__direction__transmit__receive_1ga9a59d225a8cf42eebafbec6ad95c078c" compoundref="stm32f10x__spi_8h" startline="376">SPI_Direction_Rx</references>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i___private___functions_1ga1bd785d129e09c5734a876c8f2767204" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref></type>
        <definition>FlagStatus SPI_I2S_GetFlagStatus</definition>
        <argsstring>(SPI_TypeDef *SPIx, uint16_t SPI_I2S_FLAG)</argsstring>
        <name>SPI_I2S_GetFlagStatus</name>
        <param>
          <type><ref refid="struct_s_p_i___type_def" kindref="compound">SPI_TypeDef</ref> *</type>
          <declname>SPIx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>SPI_I2S_FLAG</declname>
        </param>
        <briefdescription>
<para>Checks whether the specified SPI/I2S flag is set or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SPIx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be<itemizedlist>
<listitem><para>1, 2 or 3 in SPI mode</para></listitem><listitem><para>2 or 3 in I2S mode </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SPI_I2S_FLAG</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the SPI/I2S flag to check. This parameter can be one of the following values: <itemizedlist>
<listitem><para>SPI_I2S_FLAG_TXE: Transmit buffer empty flag. </para></listitem>
<listitem><para>SPI_I2S_FLAG_RXNE: Receive buffer not empty flag. </para></listitem>
<listitem><para>SPI_I2S_FLAG_BSY: Busy flag. </para></listitem>
<listitem><para>SPI_I2S_FLAG_OVR: Overrun flag. </para></listitem>
<listitem><para>SPI_FLAG_MODF: Mode Fault flag. </para></listitem>
<listitem><para>SPI_FLAG_CRCERR: CRC Error flag. </para></listitem>
<listitem><para>I2S_FLAG_UDR: Underrun Error flag. </para></listitem>
<listitem><para>I2S_FLAG_CHSIDE: Channel Side flag. </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of SPI_I2S_FLAG (SET or RESET). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="786" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="786" bodyend="805"/>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___s_p_i___exported___constants_1gaf54f84a30a5914b54dbfdc186720d0ba" compoundref="stm32f10x__spi_8h" startline="123">IS_SPI_ALL_PERIPH</references>
        <references refid="group___s_p_i___i2_s__flags__definition_1ga1241471a018bc63ed140089ce8334b4f" compoundref="stm32f10x__spi_8h" startline="419">IS_SPI_I2S_GET_FLAG</references>
        <references refid="struct_s_p_i___type_def_1a017d7d54a7bf1925facea6b5e02fec83" compoundref="stm32f10x_8h" startline="1166">SPI_TypeDef::SR</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" compoundref="stm32f10x_8h" startline="519">SET</references>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i___private___functions_1ga3aabd9e2437e213056c0ed9bdfa1a724" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SPI_I2S_ClearFlag</definition>
        <argsstring>(SPI_TypeDef *SPIx, uint16_t SPI_I2S_FLAG)</argsstring>
        <name>SPI_I2S_ClearFlag</name>
        <param>
          <type><ref refid="struct_s_p_i___type_def" kindref="compound">SPI_TypeDef</ref> *</type>
          <declname>SPIx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>SPI_I2S_FLAG</declname>
        </param>
        <briefdescription>
<para>Clears the SPIx CRC Error (CRCERR) flag. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SPIx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be<itemizedlist>
<listitem><para>1, 2 or 3 in SPI mode </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SPI_I2S_FLAG</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the SPI flag to clear. This function clears only CRCERR flag. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>OVR (OverRun error) flag is cleared by software sequence: a read operation to SPI_DR register (<ref refid="group___s_p_i___private___functions_1gab77de76547f3bff403236b263b070a30" kindref="member">SPI_I2S_ReceiveData()</ref>) followed by a read operation to SPI_SR register (<ref refid="group___s_p_i___private___functions_1ga1bd785d129e09c5734a876c8f2767204" kindref="member">SPI_I2S_GetFlagStatus()</ref>).</para></listitem><listitem><para>UDR (UnderRun error) flag is cleared by a read operation to SPI_SR register (<ref refid="group___s_p_i___private___functions_1ga1bd785d129e09c5734a876c8f2767204" kindref="member">SPI_I2S_GetFlagStatus()</ref>).</para></listitem><listitem><para>MODF (Mode Fault) flag is cleared by software sequence: a read/write operation to SPI_SR register (<ref refid="group___s_p_i___private___functions_1ga1bd785d129e09c5734a876c8f2767204" kindref="member">SPI_I2S_GetFlagStatus()</ref>) followed by a write operation to SPI_CR1 register (<ref refid="group___s_p_i___private___functions_1gaa31357879a65ee1ed7223f3b9114dcf3" kindref="member">SPI_Cmd()</ref> to enable the SPI). </para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="824" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="824" bodyend="832"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___s_p_i___exported___constants_1gaf54f84a30a5914b54dbfdc186720d0ba" compoundref="stm32f10x__spi_8h" startline="123">IS_SPI_ALL_PERIPH</references>
        <references refid="group___s_p_i___i2_s__flags__definition_1gab16c7f47712871b8f1b97de43841856f" compoundref="stm32f10x__spi_8h" startline="418">IS_SPI_I2S_CLEAR_FLAG</references>
        <references refid="struct_s_p_i___type_def_1a017d7d54a7bf1925facea6b5e02fec83" compoundref="stm32f10x_8h" startline="1166">SPI_TypeDef::SR</references>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i___private___functions_1ga72decbc1cd79f8fad92a2204beca6bc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref></type>
        <definition>ITStatus SPI_I2S_GetITStatus</definition>
        <argsstring>(SPI_TypeDef *SPIx, uint8_t SPI_I2S_IT)</argsstring>
        <name>SPI_I2S_GetITStatus</name>
        <param>
          <type><ref refid="struct_s_p_i___type_def" kindref="compound">SPI_TypeDef</ref> *</type>
          <declname>SPIx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>SPI_I2S_IT</declname>
        </param>
        <briefdescription>
<para>Checks whether the specified SPI/I2S interrupt has occurred or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SPIx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be<itemizedlist>
<listitem><para>1, 2 or 3 in SPI mode</para></listitem><listitem><para>2 or 3 in I2S mode </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SPI_I2S_IT</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the SPI/I2S interrupt source to check. This parameter can be one of the following values: <itemizedlist>
<listitem><para>SPI_I2S_IT_TXE: Transmit buffer empty interrupt. </para></listitem>
<listitem><para>SPI_I2S_IT_RXNE: Receive buffer not empty interrupt. </para></listitem>
<listitem><para>SPI_I2S_IT_OVR: Overrun interrupt. </para></listitem>
<listitem><para>SPI_IT_MODF: Mode Fault interrupt. </para></listitem>
<listitem><para>SPI_IT_CRCERR: CRC Error interrupt. </para></listitem>
<listitem><para>I2S_IT_UDR: Underrun Error interrupt. </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of SPI_I2S_IT (SET or RESET). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="849" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="849" bodyend="894"/>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___s_p_i___exported___constants_1gaf54f84a30a5914b54dbfdc186720d0ba" compoundref="stm32f10x__spi_8h" startline="123">IS_SPI_ALL_PERIPH</references>
        <references refid="group___s_p_i___i2_s__interrupts__definition_1gacb2949c066a74f1c4ef8c6a0d4e14a0c" compoundref="stm32f10x__spi_8h" startline="399">IS_SPI_I2S_GET_IT</references>
        <references refid="struct_s_p_i___type_def_1ac891e34644b8dc27bacc906cfd18b235" compoundref="stm32f10x_8h" startline="1164">SPI_TypeDef::CR2</references>
        <references refid="struct_s_p_i___type_def_1a017d7d54a7bf1925facea6b5e02fec83" compoundref="stm32f10x_8h" startline="1166">SPI_TypeDef::SR</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" compoundref="stm32f10x_8h" startline="519">SET</references>
      </memberdef>
      <memberdef kind="function" id="group___s_p_i___private___functions_1ga35a524a49ff3d058137060f751e8749f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SPI_I2S_ClearITPendingBit</definition>
        <argsstring>(SPI_TypeDef *SPIx, uint8_t SPI_I2S_IT)</argsstring>
        <name>SPI_I2S_ClearITPendingBit</name>
        <param>
          <type><ref refid="struct_s_p_i___type_def" kindref="compound">SPI_TypeDef</ref> *</type>
          <declname>SPIx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>SPI_I2S_IT</declname>
        </param>
        <briefdescription>
<para>Clears the SPIx CRC Error (CRCERR) interrupt pending bit. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SPIx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be<itemizedlist>
<listitem><para>1, 2 or 3 in SPI mode </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>SPI_I2S_IT</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the SPI interrupt pending bit to clear. This function clears only CRCERR interrupt pending bit. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>OVR (OverRun Error) interrupt pending bit is cleared by software sequence: a read operation to SPI_DR register (<ref refid="group___s_p_i___private___functions_1gab77de76547f3bff403236b263b070a30" kindref="member">SPI_I2S_ReceiveData()</ref>) followed by a read operation to SPI_SR register (<ref refid="group___s_p_i___private___functions_1ga72decbc1cd79f8fad92a2204beca6bc5" kindref="member">SPI_I2S_GetITStatus()</ref>).</para></listitem><listitem><para>UDR (UnderRun Error) interrupt pending bit is cleared by a read operation to SPI_SR register (<ref refid="group___s_p_i___private___functions_1ga72decbc1cd79f8fad92a2204beca6bc5" kindref="member">SPI_I2S_GetITStatus()</ref>).</para></listitem><listitem><para>MODF (Mode Fault) interrupt pending bit is cleared by software sequence: a read/write operation to SPI_SR register (<ref refid="group___s_p_i___private___functions_1ga72decbc1cd79f8fad92a2204beca6bc5" kindref="member">SPI_I2S_GetITStatus()</ref>) followed by a write operation to SPI_CR1 register (<ref refid="group___s_p_i___private___functions_1gaa31357879a65ee1ed7223f3b9114dcf3" kindref="member">SPI_Cmd()</ref> to enable the SPI). </para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" line="914" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_spi.c" bodystart="914" bodyend="935"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___s_p_i___exported___constants_1gaf54f84a30a5914b54dbfdc186720d0ba" compoundref="stm32f10x__spi_8h" startline="123">IS_SPI_ALL_PERIPH</references>
        <references refid="group___s_p_i___i2_s__interrupts__definition_1gabeb917a0a708af0439f753a5f4af4c5e" compoundref="stm32f10x__spi_8h" startline="398">IS_SPI_I2S_CLEAR_IT</references>
        <references refid="struct_s_p_i___type_def_1a017d7d54a7bf1925facea6b5e02fec83" compoundref="stm32f10x_8h" startline="1166">SPI_TypeDef::SR</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
