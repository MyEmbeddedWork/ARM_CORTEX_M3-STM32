<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="__startup_8c" kind="file" language="C++">
    <compoundname>_startup.c</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">sys/types.h</includes>
    <incdepgraph>
      <node id="810">
        <label>stdint.h</label>
      </node>
      <node id="809">
        <label>C:/Users/anilj/Desktop/cmsis/sorc/system/src/newlib/_startup.c</label>
        <link refid="__startup_8c"/>
        <childnode refid="810" relation="include">
        </childnode>
        <childnode refid="811" relation="include">
        </childnode>
      </node>
      <node id="811">
        <label>sys/types.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="__startup_8c_1a1507dad2f28c44dc9361cc34615db7ad" prot="public" static="no">
        <name>OS_INCLUDE_STARTUP_GUARD_CHECKS</name>
        <initializer>(1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/newlib/_startup.c" line="40" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/newlib/_startup.c" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="__startup_8c_1a034a2e962ab1ae5deebdf525ad4ab0e9" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int _sidata</definition>
        <argsstring></argsstring>
        <name>_sidata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/newlib/_startup.c" line="48" column="1"/>
        <referencedby refid="__startup_8c_1adc4b6e73e00d1d61b37d4e2cabdd7971" compoundref="__startup_8c" startline="222" endline="325">__attribute__</referencedby>
      </memberdef>
      <memberdef kind="variable" id="__startup_8c_1a5003b70cf06371aede7f4f2fb51b8d67" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int _sdata</definition>
        <argsstring></argsstring>
        <name>_sdata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/newlib/_startup.c" line="50" column="1"/>
        <referencedby refid="__startup_8c_1adc4b6e73e00d1d61b37d4e2cabdd7971" compoundref="__startup_8c" startline="222" endline="325">__attribute__</referencedby>
      </memberdef>
      <memberdef kind="variable" id="__startup_8c_1aa271d502d9a165bb4896f2e4a0e7921b" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int _edata</definition>
        <argsstring></argsstring>
        <name>_edata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/newlib/_startup.c" line="52" column="1"/>
        <referencedby refid="__startup_8c_1adc4b6e73e00d1d61b37d4e2cabdd7971" compoundref="__startup_8c" startline="222" endline="325">__attribute__</referencedby>
      </memberdef>
      <memberdef kind="variable" id="__startup_8c_1a2431ecc498e90c57e8281de8972c5af8" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int __bss_start__</definition>
        <argsstring></argsstring>
        <name>__bss_start__</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/newlib/_startup.c" line="55" column="1"/>
        <referencedby refid="__startup_8c_1adc4b6e73e00d1d61b37d4e2cabdd7971" compoundref="__startup_8c" startline="222" endline="325">__attribute__</referencedby>
      </memberdef>
      <memberdef kind="variable" id="__startup_8c_1aaf3e997542a737017aa3041cd3c8e06a" prot="public" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int __bss_end__</definition>
        <argsstring></argsstring>
        <name>__bss_end__</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/newlib/_startup.c" line="57" column="1"/>
        <referencedby refid="__startup_8c_1adc4b6e73e00d1d61b37d4e2cabdd7971" compoundref="__startup_8c" startline="222" endline="325">__attribute__</referencedby>
      </memberdef>
      <memberdef kind="variable" id="__startup_8c_1a9ca0f9bb2540c15bace9358dabbc88a1" prot="public" static="no" mutable="no">
        <type>void(*</type>
        <definition>void(* __preinit_array_start[])(void)</definition>
        <argsstring>[])(void)</argsstring>
        <name>__preinit_array_start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/newlib/_startup.c" line="139" column="1"/>
        <referencedby refid="__startup_8c_1a88508855b3ad63797a5059dd81d8041f" compoundref="__startup_8c" startline="128" endline="136">__attribute__</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="__startup_8c_1a3b8874895998f7b1706a1cc6a374324a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void __initialize_args</definition>
        <argsstring>(int *, char ***)</argsstring>
        <name>__initialize_args</name>
        <param>
          <type>int *</type>
        </param>
        <param>
          <type>char ***</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/newlib/_startup.c" line="72" column="1"/>
        <referencedby refid="__startup_8c_1adc4b6e73e00d1d61b37d4e2cabdd7971" compoundref="__startup_8c" startline="222" endline="325">__attribute__</referencedby>
      </memberdef>
      <memberdef kind="function" id="__startup_8c_1a0ddf1224851353fc92bfbff6f499fa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char *argv[])</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>argv</declname>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/newlib/_startup.c" line="79" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/src/main.cpp" bodystart="64" bodyend="98"/>
        <references refid="_trace_8h_1af690ad866f65f64c9ca11ba6722d7974">trace_puts</references>
        <references refid="_trace_8h_1a6a6492d4a967fc866e4825f6146cec37">trace_printf</references>
        <references refid="group___s_t_m32_f10x___system___exported__types_1gaa3cd3e43291e81e795d642b79b6088e6" compoundref="system__stm32f10x_8c" startline="163">SystemCoreClock</references>
        <references refid="class_timer_1abb13e798f6d89b09fdc9182d64c7558b" compoundref="_timer_8h" startline="27" endline="31">Timer::start</references>
        <references refid="class_blink_led_1a38fcbc34c6ff8a1083b64bbbb309a54c" compoundref="_blink_led_8cpp" startline="11" endline="26">BlinkLed::powerUp</references>
        <references refid="class_timer_1ad946179cf9404a33927ec3d33ed270d7" compoundref="_timer_8cpp" startline="22" endline="29">Timer::sleep</references>
        <references refid="class_timer_1afb0566d18137755123193fc239593daa" compoundref="_timer_8h" startline="17">Timer::FREQUENCY_HZ</references>
        <referencedby refid="__startup_8c_1adc4b6e73e00d1d61b37d4e2cabdd7971" compoundref="__startup_8c" startline="222" endline="325">__attribute__</referencedby>
      </memberdef>
      <memberdef kind="function" id="__startup_8c_1a93b9cf91f7623d6d8b100a3693d6d5e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void __attribute__</definition>
        <argsstring>((noreturn))</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(noreturn)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/newlib/_startup.c" line="84" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/newlib/_startup.c" bodystart="84" bodyend="125"/>
        <referencedby refid="__startup_8c_1a88508855b3ad63797a5059dd81d8041f" compoundref="__startup_8c" startline="128" endline="136">__attribute__</referencedby>
      </memberdef>
      <memberdef kind="function" id="__startup_8c_1a88508855b3ad63797a5059dd81d8041f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void __attribute__</definition>
        <argsstring>((always_inline))</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(always_inline)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/newlib/_startup.c" line="128" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/newlib/_startup.c" bodystart="128" bodyend="136"/>
        <references refid="__startup_8c_1a9ca0f9bb2540c15bace9358dabbc88a1">__preinit_array_start</references>
        <references refid="__startup_8c_1a93b9cf91f7623d6d8b100a3693d6d5e4" compoundref="__startup_8c" startline="84" endline="125">__attribute__</references>
      </memberdef>
      <memberdef kind="function" id="__startup_8c_1adc4b6e73e00d1d61b37d4e2cabdd7971" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void __attribute__</definition>
        <argsstring>((section(&quot;.after_vectors&quot;), noreturn, weak))</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(section(&quot;.after_vectors&quot;), noreturn, weak)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/newlib/_startup.c" line="222" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/newlib/_startup.c" bodystart="222" bodyend="325"/>
        <references refid="__initialize__hardware_8c_1a7fc8815552bed9f58a072ed05a4e23d2">__initialize_hardware_early</references>
        <references refid="__startup_8c_1a034a2e962ab1ae5deebdf525ad4ab0e9">_sidata</references>
        <references refid="__startup_8c_1a5003b70cf06371aede7f4f2fb51b8d67">_sdata</references>
        <references refid="__startup_8c_1aa271d502d9a165bb4896f2e4a0e7921b">_edata</references>
        <references refid="__startup_8c_1a2431ecc498e90c57e8281de8972c5af8">__bss_start__</references>
        <references refid="__startup_8c_1aaf3e997542a737017aa3041cd3c8e06a">__bss_end__</references>
        <references refid="__initialize__hardware_8c_1a7cdac479c838de78c7a65a9cce5a5343">__initialize_hardware</references>
        <references refid="__startup_8c_1a3b8874895998f7b1706a1cc6a374324a">__initialize_args</references>
        <references refid="__startup_8c_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="main_8cpp" startline="64" endline="98">main</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>the<sp/>µOS++<sp/>III<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(c)<sp/>2014<sp/>Liviu<sp/>Ionescu.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>module<sp/>contains<sp/>the<sp/>startup<sp/>code<sp/>for<sp/>a<sp/>portable<sp/>embedded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C/C++<sp/>application,<sp/>built<sp/>with<sp/>newlib.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Control<sp/>reaches<sp/>here<sp/>from<sp/>the<sp/>reset<sp/>handler<sp/>via<sp/>jump<sp/>or<sp/>call.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>actual<sp/>steps<sp/>performed<sp/>by<sp/>_start<sp/>are:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>copy<sp/>the<sp/>initialised<sp/>data<sp/>region(s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>clear<sp/>the<sp/>BSS<sp/>region(s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>initialise<sp/>the<sp/>system</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>run<sp/>the<sp/>preinit/init<sp/>array<sp/>(for<sp/>the<sp/>C++<sp/>static<sp/>constructors)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>initialise<sp/>the<sp/>arc/argv</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>branch<sp/>to<sp/>main()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>run<sp/>the<sp/>fini<sp/>array<sp/>(for<sp/>the<sp/>C++<sp/>static<sp/>destructors)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>call<sp/>_exit(),<sp/>directly<sp/>or<sp/>via<sp/>exit()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>OS_INCLUDE_STARTUP_INIT_MULTIPLE_RAM_SECTIONS<sp/>is<sp/>defined,<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>code<sp/>is<sp/>capable<sp/>of<sp/>initialising<sp/>multiple<sp/>regions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>normal<sp/>configuration<sp/>is<sp/>standalone,<sp/>with<sp/>all<sp/>support</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>functions<sp/>implemented<sp/>locally.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>this<sp/>to<sp/>be<sp/>called,<sp/>the<sp/>project<sp/>linker<sp/>must<sp/>be<sp/>configured<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>startup<sp/>sequence<sp/>(-nostartfiles).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(OS_INCLUDE_STARTUP_GUARD_CHECKS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="__startup_8c_1a1507dad2f28c44dc9361cc34615db7ad" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>OS_INCLUDE_STARTUP_GUARD_CHECKS<sp/>(1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(OS_INCLUDE_STARTUP_INIT_MULTIPLE_RAM_SECTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Begin<sp/>address<sp/>for<sp/>the<sp/>initialisation<sp/>values<sp/>of<sp/>the<sp/>.data<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defined<sp/>in<sp/>linker<sp/>script</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="__startup_8c_1a034a2e962ab1ae5deebdf525ad4ab0e9" kindref="member">_sidata</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Begin<sp/>address<sp/>for<sp/>the<sp/>.data<sp/>section;<sp/>defined<sp/>in<sp/>linker<sp/>script</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="__startup_8c_1a5003b70cf06371aede7f4f2fb51b8d67" kindref="member">_sdata</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>End<sp/>address<sp/>for<sp/>the<sp/>.data<sp/>section;<sp/>defined<sp/>in<sp/>linker<sp/>script</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="__startup_8c_1aa271d502d9a165bb4896f2e4a0e7921b" kindref="member">_edata</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Begin<sp/>address<sp/>for<sp/>the<sp/>.bss<sp/>section;<sp/>defined<sp/>in<sp/>linker<sp/>script</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="__startup_8c_1a2431ecc498e90c57e8281de8972c5af8" kindref="member">__bss_start__</ref>;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>End<sp/>address<sp/>for<sp/>the<sp/>.bss<sp/>section;<sp/>defined<sp/>in<sp/>linker<sp/>script</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="__startup_8c_1aaf3e997542a737017aa3041cd3c8e06a" kindref="member">__bss_end__</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>symbols<sp/>are<sp/>constructs<sp/>generated<sp/>by<sp/>the<sp/>linker,<sp/>indicating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>location<sp/>of<sp/>various<sp/>points<sp/>in<sp/>the<sp/>&quot;Memory<sp/>regions<sp/>initialisation<sp/>arrays&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>arrays<sp/>are<sp/>created<sp/>by<sp/>the<sp/>linker<sp/>via<sp/>the<sp/>managed<sp/>linker<sp/>script</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>each<sp/>RW<sp/>data<sp/>mechanism.<sp/>It<sp/>contains<sp/>the<sp/>load<sp/>address,<sp/>execution<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>length<sp/>section<sp/>and<sp/>the<sp/>execution<sp/>and<sp/>length<sp/>of<sp/>each<sp/>BSS<sp/>(zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>initialised)<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__data_regions_array_start;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__data_regions_array_end;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__bss_regions_array_start;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__bss_regions_array_end;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><ref refid="__startup_8c_1a3b8874895998f7b1706a1cc6a374324a" kindref="member">__initialize_args</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">***);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>main()<sp/>is<sp/>the<sp/>entry<sp/>point<sp/>for<sp/>newlib<sp/>based<sp/>applications.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>By<sp/>default,<sp/>there<sp/>are<sp/>no<sp/>arguments,<sp/>but<sp/>this<sp/>can<sp/>be<sp/>customised</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>redefining<sp/>__initialize_args(),<sp/>which<sp/>is<sp/>done<sp/>when<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>semihosting<sp/>configurations<sp/>are<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><ref refid="__startup_8c_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>argv[]);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>implementation<sp/>for<sp/>the<sp/>exit<sp/>routine;<sp/>for<sp/>embedded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>applications,<sp/>a<sp/>system<sp/>reset<sp/>will<sp/>be<sp/>performed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="__startup_8c_1a93b9cf91f7623d6d8b100a3693d6d5e4" refkind="member"><highlight class="normal"><ref refid="__startup_8c_1a93b9cf91f7623d6d8b100a3693d6d5e4" kindref="member">__attribute__</ref>((noreturn))</highlight></codeline>
<codeline lineno="85"><highlight class="normal">_exit<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward<sp/>declarations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">_start<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">__initialize_data<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>from,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>region_begin,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>region_end);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal">__initialize_bss<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>region_begin,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>region_end);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal">__run_init_array<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal">__run_fini_array<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><ref refid="__initialize__hardware_8c_1a7fc8815552bed9f58a072ed05a4e23d2" kindref="member">__initialize_hardware_early</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><ref refid="__initialize__hardware_8c_1a7cdac479c838de78c7a65a9cce5a5343" kindref="member">__initialize_hardware</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><ref refid="__startup_8c_1a93b9cf91f7623d6d8b100a3693d6d5e4" kindref="member">__attribute__</ref>((always_inline))</highlight></codeline>
<codeline lineno="117"><highlight class="normal">__initialize_data<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>from,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>region_begin,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>region_end)</highlight></codeline>
<codeline lineno="119"><highlight class="normal">{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>and<sp/>copy<sp/>word<sp/>by<sp/>word.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>assumed<sp/>that<sp/>the<sp/>pointers<sp/>are<sp/>word<sp/>aligned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>region_begin;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>&lt;<sp/>region_end)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>*from++;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="__startup_8c_1a88508855b3ad63797a5059dd81d8041f" refkind="member"><highlight class="normal"><ref refid="__startup_8c_1a93b9cf91f7623d6d8b100a3693d6d5e4" kindref="member">__attribute__</ref>((always_inline))</highlight></codeline>
<codeline lineno="129"><highlight class="normal">__initialize_bss<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>region_begin,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>region_end)</highlight></codeline>
<codeline lineno="130"><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>and<sp/>clear<sp/>word<sp/>by<sp/>word.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>assumed<sp/>that<sp/>the<sp/>pointers<sp/>are<sp/>word<sp/>aligned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>region_begin;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(p<sp/>&lt;<sp/>region_end)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="136"><highlight class="normal">}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>magic<sp/>symbols<sp/>are<sp/>provided<sp/>by<sp/>the<sp/>linker.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>void</highlight></codeline>
<codeline lineno="140"><highlight class="normal">(*<ref refid="__startup_8c_1a9ca0f9bb2540c15bace9358dabbc88a1" kindref="member">__preinit_array_start</ref>[])<sp/>(void)<sp/><ref refid="__startup_8c_1a93b9cf91f7623d6d8b100a3693d6d5e4" kindref="member">__attribute__</ref>((weak));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>void</highlight></codeline>
<codeline lineno="142"><highlight class="normal">(*__preinit_array_end[])<sp/>(void)<sp/><ref refid="__startup_8c_1a93b9cf91f7623d6d8b100a3693d6d5e4" kindref="member">__attribute__</ref>((weak));</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>void</highlight></codeline>
<codeline lineno="144"><highlight class="normal">(*__init_array_start[])<sp/>(void)<sp/><ref refid="__startup_8c_1a93b9cf91f7623d6d8b100a3693d6d5e4" kindref="member">__attribute__</ref>((weak));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>void</highlight></codeline>
<codeline lineno="146"><highlight class="normal">(*__init_array_end[])<sp/>(void)<sp/><ref refid="__startup_8c_1a93b9cf91f7623d6d8b100a3693d6d5e4" kindref="member">__attribute__</ref>((weak));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>void</highlight></codeline>
<codeline lineno="148"><highlight class="normal">(*__fini_array_start[])<sp/>(void)<sp/><ref refid="__startup_8c_1a93b9cf91f7623d6d8b100a3693d6d5e4" kindref="member">__attribute__</ref>((weak));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>void</highlight></codeline>
<codeline lineno="150"><highlight class="normal">(*__fini_array_end[])<sp/>(void)<sp/><ref refid="__startup_8c_1a93b9cf91f7623d6d8b100a3693d6d5e4" kindref="member">__attribute__</ref>((weak));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Iterate<sp/>over<sp/>all<sp/>the<sp/>preinit/init<sp/>routines<sp/>(mainly<sp/>static<sp/>constructors).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><ref refid="__startup_8c_1a93b9cf91f7623d6d8b100a3693d6d5e4" kindref="member">__attribute__</ref>((always_inline))</highlight></codeline>
<codeline lineno="155"><highlight class="normal">__run_init_array<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="156"><highlight class="normal">{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>__preinit_array_end<sp/>-<sp/><ref refid="__startup_8c_1a9ca0f9bb2540c15bace9358dabbc88a1" kindref="member">__preinit_array_start</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>__preinit_array_start[i]<sp/>();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>need<sp/>to<sp/>run<sp/>the<sp/>code<sp/>in<sp/>the<sp/>.init<sp/>section,<sp/>please<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>startup<sp/>files,<sp/>since<sp/>this<sp/>requires<sp/>the<sp/>code<sp/>in<sp/>crti.o<sp/>and<sp/>crtn.o</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>add<sp/>the<sp/>function<sp/>prologue/epilogue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//_init();<sp/>//<sp/>DO<sp/>NOT<sp/>ENABE<sp/>THIS!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>__init_array_end<sp/>-<sp/>__init_array_start;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>count;<sp/>i++)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>__init_array_start[i]<sp/>();</highlight></codeline>
<codeline lineno="172"><highlight class="normal">}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Run<sp/>all<sp/>the<sp/>cleanup<sp/>routines<sp/>(mainly<sp/>static<sp/>destructors).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><ref refid="__startup_8c_1a93b9cf91f7623d6d8b100a3693d6d5e4" kindref="member">__attribute__</ref>((always_inline))</highlight></codeline>
<codeline lineno="177"><highlight class="normal">__run_fini_array<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>count<sp/>=<sp/>__fini_array_end<sp/>-<sp/>__fini_array_start;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>count;<sp/>i<sp/>&gt;<sp/>0;<sp/>i--)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>__fini_array_start[i<sp/>-<sp/>1]<sp/>();</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>need<sp/>to<sp/>run<sp/>the<sp/>code<sp/>in<sp/>the<sp/>.fini<sp/>section,<sp/>please<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>startup<sp/>files,<sp/>since<sp/>this<sp/>requires<sp/>the<sp/>code<sp/>in<sp/>crti.o<sp/>and<sp/>crtn.o</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>add<sp/>the<sp/>function<sp/>prologue/epilogue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//_fini();<sp/>//<sp/>DO<sp/>NOT<sp/>ENABE<sp/>THIS!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DEBUG)<sp/>&amp;&amp;<sp/>(OS_INCLUDE_STARTUP_GUARD_CHECKS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>definitions<sp/>are<sp/>used<sp/>to<sp/>check<sp/>if<sp/>the<sp/>routines<sp/>used<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clear<sp/>the<sp/>BSS<sp/>and<sp/>to<sp/>copy<sp/>the<sp/>initialised<sp/>DATA<sp/>perform<sp/>correctly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BSS_GUARD_BAD_VALUE<sp/>(0xCADEBABA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="__startup_8c_1a93b9cf91f7623d6d8b100a3693d6d5e4" kindref="member">__attribute__</ref><sp/>((section(</highlight><highlight class="stringliteral">&quot;.bss_begin&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="200"><highlight class="normal">__bss_begin_guard;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="__startup_8c_1a93b9cf91f7623d6d8b100a3693d6d5e4" kindref="member">__attribute__</ref><sp/>((section(</highlight><highlight class="stringliteral">&quot;.bss_end&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="202"><highlight class="normal">__bss_end_guard;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DATA_GUARD_BAD_VALUE<sp/>(0xCADEBABA)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DATA_BEGIN_GUARD_VALUE<sp/>(0x12345678)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DATA_END_GUARD_VALUE<sp/>(0x98765432)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="__startup_8c_1a93b9cf91f7623d6d8b100a3693d6d5e4" kindref="member">__attribute__</ref><sp/>((section(</highlight><highlight class="stringliteral">&quot;.data_begin&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="209"><highlight class="normal">__data_begin_guard<sp/>=<sp/>DATA_BEGIN_GUARD_VALUE;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="__startup_8c_1a93b9cf91f7623d6d8b100a3693d6d5e4" kindref="member">__attribute__</ref><sp/>((section(</highlight><highlight class="stringliteral">&quot;.data_end&quot;</highlight><highlight class="normal">)))</highlight></codeline>
<codeline lineno="212"><highlight class="normal">__data_end_guard<sp/>=<sp/>DATA_END_GUARD_VALUE;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>defined(DEBUG)<sp/>&amp;&amp;<sp/>(OS_INCLUDE_STARTUP_GUARD_CHECKS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>the<sp/>place<sp/>where<sp/>Cortex-M<sp/>core<sp/>will<sp/>go<sp/>immediately<sp/>after<sp/>reset,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>via<sp/>a<sp/>call<sp/>or<sp/>jump<sp/>from<sp/>the<sp/>Reset_Handler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>the<sp/>call<sp/>to<sp/>work,<sp/>and<sp/>for<sp/>the<sp/>call<sp/>to<sp/>__initialize_hardware_early()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>work,<sp/>the<sp/>reset<sp/>stack<sp/>must<sp/>point<sp/>to<sp/>a<sp/>valid<sp/>internal<sp/>RAM<sp/>area.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="__startup_8c_1adc4b6e73e00d1d61b37d4e2cabdd7971" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="__startup_8c_1a93b9cf91f7623d6d8b100a3693d6d5e4" kindref="member">__attribute__</ref><sp/>((section(</highlight><highlight class="stringliteral">&quot;.after_vectors&quot;</highlight><highlight class="normal">),noreturn,weak))</highlight></codeline>
<codeline lineno="223"><highlight class="normal">_start<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>hardware<sp/>right<sp/>after<sp/>reset,<sp/>to<sp/>switch<sp/>clock<sp/>to<sp/>higher</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>frequency<sp/>and<sp/>have<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>initialisations<sp/>run<sp/>faster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mandatory<sp/>on<sp/>platforms<sp/>like<sp/>Kinetis,<sp/>which<sp/>start<sp/>with<sp/>the<sp/>watch<sp/>dog</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>enabled<sp/>and<sp/>require<sp/>an<sp/>early<sp/>sequence<sp/>to<sp/>disable<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>useful<sp/>on<sp/>platform<sp/>with<sp/>external<sp/>RAM,<sp/>that<sp/>need<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialised<sp/>before<sp/>filling<sp/>the<sp/>BSS<sp/>section.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><ref refid="__initialize__hardware_8c_1a7fc8815552bed9f58a072ed05a4e23d2" kindref="member">__initialize_hardware_early</ref><sp/>();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>Old<sp/>Style<sp/>DATA<sp/>and<sp/>BSS<sp/>section<sp/>initialisation,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>will<sp/>manage<sp/>a<sp/>single<sp/>BSS<sp/>sections.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DEBUG)<sp/>&amp;&amp;<sp/>(OS_INCLUDE_STARTUP_GUARD_CHECKS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>__data_begin_guard<sp/>=<sp/>DATA_GUARD_BAD_VALUE;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>__data_end_guard<sp/>=<sp/>DATA_GUARD_BAD_VALUE;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(OS_INCLUDE_STARTUP_INIT_MULTIPLE_RAM_SECTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>DATA<sp/>segment<sp/>from<sp/>Flash<sp/>to<sp/>RAM<sp/>(inlined).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>__initialize_data(&amp;<ref refid="__startup_8c_1a034a2e962ab1ae5deebdf525ad4ab0e9" kindref="member">_sidata</ref>,<sp/>&amp;<ref refid="__startup_8c_1a5003b70cf06371aede7f4f2fb51b8d67" kindref="member">_sdata</ref>,<sp/>&amp;<ref refid="__startup_8c_1aa271d502d9a165bb4896f2e4a0e7921b" kindref="member">_edata</ref>);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>the<sp/>data<sp/>sections<sp/>from<sp/>flash<sp/>to<sp/>SRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>&amp;__data_regions_array_start;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>&lt;<sp/>&amp;__data_regions_array_end;)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>from<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>(*p++);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>region_begin<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>(*p++);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>region_end<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*)<sp/>(*p++);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__initialize_data<sp/>(from,<sp/>region_begin,<sp/>region_end);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DEBUG)<sp/>&amp;&amp;<sp/>(OS_INCLUDE_STARTUP_GUARD_CHECKS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((__data_begin_guard<sp/>!=<sp/>DATA_BEGIN_GUARD_VALUE)</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(__data_end_guard<sp/>!=<sp/>DATA_END_GUARD_VALUE))</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DEBUG)<sp/>&amp;&amp;<sp/>(OS_INCLUDE_STARTUP_GUARD_CHECKS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>__bss_begin_guard<sp/>=<sp/>BSS_GUARD_BAD_VALUE;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>__bss_end_guard<sp/>=<sp/>BSS_GUARD_BAD_VALUE;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(OS_INCLUDE_STARTUP_INIT_MULTIPLE_RAM_SECTIONS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Zero<sp/>fill<sp/>the<sp/>BSS<sp/>section<sp/>(inlined).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>__initialize_bss(&amp;<ref refid="__startup_8c_1a2431ecc498e90c57e8281de8972c5af8" kindref="member">__bss_start__</ref>,<sp/>&amp;<ref refid="__startup_8c_1aaf3e997542a737017aa3041cd3c8e06a" kindref="member">__bss_end__</ref>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Zero<sp/>fill<sp/>all<sp/>bss<sp/>segments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*p<sp/>=<sp/>&amp;__bss_regions_array_start;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>&lt;<sp/>&amp;__bss_regions_array_end;)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>region_begin<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)<sp/>(*p++);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>region_end<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)<sp/>(*p++);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>__initialize_bss<sp/>(region_begin,<sp/>region_end);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(DEBUG)<sp/>&amp;&amp;<sp/>(OS_INCLUDE_STARTUP_GUARD_CHECKS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((__bss_begin_guard<sp/>!=<sp/>0)<sp/>||<sp/>(__bss_end_guard<sp/>!=<sp/>0))</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Hook<sp/>to<sp/>continue<sp/>the<sp/>initialisations.<sp/>Usually<sp/>compute<sp/>and<sp/>store<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clock<sp/>frequency<sp/>in<sp/>the<sp/>global<sp/>CMSIS<sp/>variable,<sp/>cleared<sp/>above.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><ref refid="__initialize__hardware_8c_1a7cdac479c838de78c7a65a9cce5a5343" kindref="member">__initialize_hardware</ref><sp/>();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>argc/argv<sp/>(useful<sp/>in<sp/>semihosting<sp/>configurations).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>argc;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><ref refid="__startup_8c_1a3b8874895998f7b1706a1cc6a374324a" kindref="member">__initialize_args</ref><sp/>(&amp;argc,<sp/>&amp;argv);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>the<sp/>standard<sp/>library<sp/>initialisation<sp/>(mandatory<sp/>for<sp/>C++<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>execute<sp/>the<sp/>constructors<sp/>for<sp/>the<sp/>static<sp/>objects).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>__run_init_array<sp/>();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Call<sp/>the<sp/>main<sp/>entry<sp/>point,<sp/>and<sp/>save<sp/>the<sp/>exit<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>code<sp/>=<sp/><ref refid="__startup_8c_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref><sp/>(argc,<sp/>argv);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Run<sp/>the<sp/>C++<sp/>static<sp/>destructors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>__run_fini_array<sp/>();</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>_exit<sp/>(code);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Should<sp/>never<sp/>reach<sp/>this,<sp/>_exit()<sp/>should<sp/>have<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>performed<sp/>a<sp/>reset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/newlib/_startup.c"/>
  </compounddef>
</doxygen>
