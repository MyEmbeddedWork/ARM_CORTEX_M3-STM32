<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="stm32f10x__usart_8c" kind="file" language="C++">
    <compoundname>stm32f10x_usart.c</compoundname>
    <includes refid="stm32f10x__usart_8h" local="yes">stm32f10x_usart.h</includes>
    <includes refid="stm32f10x__rcc_8h" local="yes">stm32f10x_rcc.h</includes>
    <incdepgraph>
      <node id="1039">
        <label>system_stm32f10x.h</label>
        <link refid="system__stm32f10x_8h"/>
      </node>
      <node id="1036">
        <label>stdint.h</label>
      </node>
      <node id="1035">
        <label>core_cm3.h</label>
        <link refid="core__cm3_8h"/>
        <childnode refid="1036" relation="include">
        </childnode>
        <childnode refid="1037" relation="include">
        </childnode>
        <childnode refid="1038" relation="include">
        </childnode>
      </node>
      <node id="1038">
        <label>core_cmFunc.h</label>
        <link refid="core__cm_func_8h"/>
      </node>
      <node id="1040">
        <label>stm32f10x_rcc.h</label>
        <link refid="stm32f10x__rcc_8h"/>
        <childnode refid="1034" relation="include">
        </childnode>
      </node>
      <node id="1037">
        <label>core_cmInstr.h</label>
        <link refid="core__cm_instr_8h"/>
      </node>
      <node id="1034">
        <label>stm32f10x.h</label>
        <link refid="stm32f10x_8h"/>
        <childnode refid="1035" relation="include">
        </childnode>
        <childnode refid="1039" relation="include">
        </childnode>
        <childnode refid="1036" relation="include">
        </childnode>
      </node>
      <node id="1032">
        <label>C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c</label>
        <link refid="stm32f10x__usart_8c"/>
        <childnode refid="1033" relation="include">
        </childnode>
        <childnode refid="1040" relation="include">
        </childnode>
      </node>
      <node id="1033">
        <label>stm32f10x_usart.h</label>
        <link refid="stm32f10x__usart_8h"/>
        <childnode refid="1034" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1ga95f5821be56b1a5dbfdd38fdb37ed54c" prot="public" static="no">
        <name>CR1_UE_Set</name>
        <initializer>((uint16_t)0x2000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART Enable Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="47" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1ga9c75a44192cb3dbbbf509cddfc47481c" prot="public" static="no">
        <name>CR1_UE_Reset</name>
        <initializer>((uint16_t)0xDFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART Disable Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="48" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1gae4045dea092c3cbfe07d14fef39195ce" prot="public" static="no">
        <name>CR1_WAKE_Mask</name>
        <initializer>((uint16_t)0xF7FF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART WakeUp Method Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="50" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1ga5cb566b7c5e126e5ef11dd25bba50ffa" prot="public" static="no">
        <name>CR1_RWU_Set</name>
        <initializer>((uint16_t)0x0002)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART mute mode Enable Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="52" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1ga064a46d19ffffddd410e969798d335ee" prot="public" static="no">
        <name>CR1_RWU_Reset</name>
        <initializer>((uint16_t)0xFFFD)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART mute mode Enable Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="53" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1ga2813b7fa1263aecfeefa48f8a55938b9" prot="public" static="no">
        <name>CR1_SBK_Set</name>
        <initializer>((uint16_t)0x0001)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART Break Character send Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="54" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1ga67f7dd35ea3d1296677e5fc50b88fa90" prot="public" static="no">
        <name>CR1_CLEAR_Mask</name>
        <initializer>((uint16_t)0xE9F3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART CR1 Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="55" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1ga080c343a5a95d4419789b94405c27764" prot="public" static="no">
        <name>CR2_Address_Mask</name>
        <initializer>((uint16_t)0xFFF0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART address Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="56" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1gabc3f2b022d70a11fd0605e58cb23023f" prot="public" static="no">
        <name>CR2_LINEN_Set</name>
        <initializer>((uint16_t)0x4000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART LIN Enable Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="58" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1ga7b8fbe7be4c85c16ea1c1e3c9fa95b05" prot="public" static="no">
        <name>CR2_LINEN_Reset</name>
        <initializer>((uint16_t)0xBFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART LIN Disable Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="59" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1ga9b365a89de44809a52895090e9050646" prot="public" static="no">
        <name>CR2_LBDL_Mask</name>
        <initializer>((uint16_t)0xFFDF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART LIN Break detection Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="61" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1ga8a2294276016f30cb361a7f54ad07cd4" prot="public" static="no">
        <name>CR2_STOP_CLEAR_Mask</name>
        <initializer>((uint16_t)0xCFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART CR2 STOP Bits Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="62" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1ga846e1873279b2b0798cc34d76bd80592" prot="public" static="no">
        <name>CR2_CLOCK_CLEAR_Mask</name>
        <initializer>((uint16_t)0xF0FF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART CR2 Clock Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="63" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1gab47df7b36b4f1315953f6aa45de2fb61" prot="public" static="no">
        <name>CR3_SCEN_Set</name>
        <initializer>((uint16_t)0x0020)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART SC Enable Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="65" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1ga294c473dc7f8ff3e9cbaa0675c8c75f3" prot="public" static="no">
        <name>CR3_SCEN_Reset</name>
        <initializer>((uint16_t)0xFFDF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART SC Disable Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="66" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1ga950cc9f7251709854754add7d9aaca60" prot="public" static="no">
        <name>CR3_NACK_Set</name>
        <initializer>((uint16_t)0x0010)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART SC NACK Enable Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="68" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1gabed0cac273ff4faf009e8c35243c1e10" prot="public" static="no">
        <name>CR3_NACK_Reset</name>
        <initializer>((uint16_t)0xFFEF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART SC NACK Disable Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="69" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1ga0c5c30ea9777d0c8c6f1b5ff85dfca3c" prot="public" static="no">
        <name>CR3_HDSEL_Set</name>
        <initializer>((uint16_t)0x0008)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART Half-Duplex Enable Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="71" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1ga762c72448ba24f3487dfa457a8dcc9fc" prot="public" static="no">
        <name>CR3_HDSEL_Reset</name>
        <initializer>((uint16_t)0xFFF7)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART Half-Duplex Disable Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="72" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1gaea5d8d002a34c3a587719533db2c17f9" prot="public" static="no">
        <name>CR3_IRLP_Mask</name>
        <initializer>((uint16_t)0xFFFB)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART IrDA LowPower mode Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="74" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1ga085e8ef6bc8f5de45c5be95971715f7f" prot="public" static="no">
        <name>CR3_CLEAR_Mask</name>
        <initializer>((uint16_t)0xFCFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART CR3 Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="75" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1gad5dd1d08f3836f9a3c3f3cc0c66a8b8f" prot="public" static="no">
        <name>CR3_IREN_Set</name>
        <initializer>((uint16_t)0x0002)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART IrDA Enable Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="77" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1gad1520358de97e48fe18780e5cc5296bd" prot="public" static="no">
        <name>CR3_IREN_Reset</name>
        <initializer>((uint16_t)0xFFFD)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART IrDA Disable Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="78" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1ga2fe593d0c308e2245bb66905930b3ebb" prot="public" static="no">
        <name>GTPR_LSB_Mask</name>
        <initializer>((uint16_t)0x00FF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guard Time Register LSB Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="79" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1ga405b4222892bafdf1d084de5efd24d70" prot="public" static="no">
        <name>GTPR_MSB_Mask</name>
        <initializer>((uint16_t)0xFF00)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Guard Time Register MSB Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="80" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1ga401c753d4de6ab56fcb026c91b8c8487" prot="public" static="no">
        <name>IT_Mask</name>
        <initializer>((uint16_t)0x001F)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>USART Interrupt Mask </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="81" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1ga11495857ca81074790c376317382140f" prot="public" static="no">
        <name>CR1_OVER8_Set</name>
        <initializer>((<ref refid="group___exported__types_1gace9d960e74685e2cd84b36132dbbf8aa" kindref="member">u16</ref>)0x8000)  /* USART OVER8 mode Enable Mask */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="84" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1gaf84165f2974000906c495b3c27dc5121" prot="public" static="no">
        <name>CR1_OVER8_Reset</name>
        <initializer>((<ref refid="group___exported__types_1gace9d960e74685e2cd84b36132dbbf8aa" kindref="member">u16</ref>)0x7FFF)  /* USART OVER8 mode Disable Mask */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="85" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1gac512024dda541435acfe0b50de925105" prot="public" static="no">
        <name>CR3_ONEBITE_Set</name>
        <initializer>((<ref refid="group___exported__types_1gace9d960e74685e2cd84b36132dbbf8aa" kindref="member">u16</ref>)0x0800)  /* USART ONEBITE mode Enable Mask */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="88" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___u_s_a_r_t___private___defines_1ga55dc289819dde550630df98267bbef52" prot="public" static="no">
        <name>CR3_ONEBITE_Reset</name>
        <initializer>((<ref refid="group___exported__types_1gace9d960e74685e2cd84b36132dbbf8aa" kindref="member">u16</ref>)0xF7FF)  /* USART ONEBITE mode Disable Mask */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="89" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga2f8e1ce72da21b6539d8e1f299ec3b0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_DeInit</definition>
        <argsstring>(USART_TypeDef *USARTx)</argsstring>
        <name>USART_DeInit</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <briefdescription>
<para>Deinitializes the USARTx peripheral registers to their default reset values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="130" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="130" bodyend="163"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___peripheral__declaration_1ga92871691058ff7ccffd7635930cb08da" compoundref="stm32f10x_8h" startline="1420">USART1</references>
        <references refid="group___r_c_c___exported___functions_1gad94553850ac07106a27ee85fec37efdf" compoundref="stm32f10x__rcc_8c" startline="1185" endline="1198">RCC_APB2PeriphResetCmd</references>
        <references refid="group___a_p_b2__peripheral_1ga14e1b3b6d84801c223a37a954b5b1910" compoundref="stm32f10x__rcc_8h" startline="510">RCC_APB2Periph_USART1</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" compoundref="stm32f10x_8h" startline="521">ENABLE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="group___peripheral__declaration_1gaf114a9eab03ca08a6fb720e511595930" compoundref="stm32f10x_8h" startline="1394">USART2</references>
        <references refid="group___r_c_c___exported___functions_1gab197ae4369c10b92640a733b40ed2801" compoundref="stm32f10x__rcc_8c" startline="1216" endline="1229">RCC_APB1PeriphResetCmd</references>
        <references refid="group___a_p_b1__peripheral_1gaa69c77220b943a42a4bacb8a3bf87dd0" compoundref="stm32f10x__rcc_8h" startline="540">RCC_APB1Periph_USART2</references>
        <references refid="group___peripheral__declaration_1ga2350115553c1fe0a7bc14e6a7ec6a225" compoundref="stm32f10x_8h" startline="1395">USART3</references>
        <references refid="group___a_p_b1__peripheral_1gaf72838a63d7d6200f251c1eb334cbaac" compoundref="stm32f10x__rcc_8h" startline="541">RCC_APB1Periph_USART3</references>
        <references refid="group___peripheral__declaration_1ga7c035f6f443c999fc043b2b7fb598800" compoundref="stm32f10x_8h" startline="1396">UART4</references>
        <references refid="group___a_p_b1__peripheral_1ga839d7ae3386622158210ecf53d9cd989" compoundref="stm32f10x__rcc_8h" startline="542">RCC_APB1Periph_UART4</references>
        <references refid="group___peripheral__declaration_1ga9274e37cf5e8a174fc5dd627b98ec0fe" compoundref="stm32f10x_8h" startline="1397">UART5</references>
        <references refid="group___a_p_b1__peripheral_1gaa00c73f88a7af45fb29df97b07acd856" compoundref="stm32f10x__rcc_8h" startline="543">RCC_APB1Periph_UART5</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga98da340ea0324002ba1b4263e91ab2ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_Init</definition>
        <argsstring>(USART_TypeDef *USARTx, USART_InitTypeDef *USART_InitStruct)</argsstring>
        <name>USART_Init</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type><ref refid="struct_u_s_a_r_t___init_type_def" kindref="compound">USART_InitTypeDef</ref> *</type>
          <declname>USART_InitStruct</declname>
        </param>
        <briefdescription>
<para>Initializes the USARTx peripheral according to the specified parameters in the USART_InitStruct . </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_InitStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <ref refid="struct_u_s_a_r_t___init_type_def" kindref="compound">USART_InitTypeDef</ref> structure that contains the configuration information for the specified USART peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="176" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="176" bodyend="273"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___flags_1ga9dc365e0a1e01031a8e0757a34b9d420" compoundref="stm32f10x__usart_8h" startline="347">IS_USART_BAUDRATE</references>
        <references refid="struct_u_s_a_r_t___init_type_def_1a6f763cb0e6044f838ee764ce437997b2" compoundref="stm32f10x__usart_8h" startline="58">USART_InitTypeDef::USART_BaudRate</references>
        <references refid="group___u_s_a_r_t___word___length_1ga5b07b29ee91f0bea4c10ec0fd74fbc04" compoundref="stm32f10x__usart_8h" startline="134">IS_USART_WORD_LENGTH</references>
        <references refid="struct_u_s_a_r_t___init_type_def_1a16d1fb7ccc2b51964f1bcfcbfba6d89d" compoundref="stm32f10x__usart_8h" startline="63">USART_InitTypeDef::USART_WordLength</references>
        <references refid="group___u_s_a_r_t___stop___bits_1ga6f9153c1fbee1058ba26ec88f0f20828" compoundref="stm32f10x__usart_8h" startline="148">IS_USART_STOPBITS</references>
        <references refid="struct_u_s_a_r_t___init_type_def_1ac745bceb79a6c4c2640fd8e8ce6639d6" compoundref="stm32f10x__usart_8h" startline="66">USART_InitTypeDef::USART_StopBits</references>
        <references refid="group___u_s_a_r_t___parity_1gaa87b2e338e0ccc42887d3c56901bee87" compoundref="stm32f10x__usart_8h" startline="163">IS_USART_PARITY</references>
        <references refid="struct_u_s_a_r_t___init_type_def_1a5ae66aba755bac37c5cf0dfbf529e2ed" compoundref="stm32f10x__usart_8h" startline="69">USART_InitTypeDef::USART_Parity</references>
        <references refid="group___u_s_a_r_t___mode_1gae9140e5ca405d2377fe0e82c79e136a2" compoundref="stm32f10x__usart_8h" startline="176">IS_USART_MODE</references>
        <references refid="struct_u_s_a_r_t___init_type_def_1a7d944d35d7d1fc79a63f249615148584" compoundref="stm32f10x__usart_8h" startline="76">USART_InitTypeDef::USART_Mode</references>
        <references refid="group___u_s_a_r_t___hardware___flow___control_1ga9b905eb465780173a2e98bc8b602c030" compoundref="stm32f10x__usart_8h" startline="188">IS_USART_HARDWARE_FLOW_CONTROL</references>
        <references refid="struct_u_s_a_r_t___init_type_def_1a9996edf3bfd90c36f03b4075969703f5" compoundref="stm32f10x__usart_8h" startline="79">USART_InitTypeDef::USART_HardwareFlowControl</references>
        <references refid="group___u_s_a_r_t___hardware___flow___control_1gaf3deaf4429b88db7753ee203f4797bd3" compoundref="stm32f10x__usart_8h" startline="184">USART_HardwareFlowControl_None</references>
        <references refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" compoundref="stm32f10x__usart_8h" startline="119">IS_USART_123_PERIPH</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" compoundref="stm32f10x_8h" startline="1244">USART_TypeDef::CR2</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga8a2294276016f30cb361a7f54ad07cd4" compoundref="stm32f10x__usart_8c" startline="62">CR2_STOP_CLEAR_Mask</references>
        <references refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" compoundref="stm32f10x_8h" startline="1242">USART_TypeDef::CR1</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga67f7dd35ea3d1296677e5fc50b88fa90" compoundref="stm32f10x__usart_8c" startline="55">CR1_CLEAR_Mask</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" compoundref="stm32f10x_8h" startline="1246">USART_TypeDef::CR3</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga085e8ef6bc8f5de45c5be95971715f7f" compoundref="stm32f10x__usart_8c" startline="75">CR3_CLEAR_Mask</references>
        <references refid="group___r_c_c___exported___functions_1ga3e9944fd1ed734275222bbb3e3f29993" compoundref="stm32f10x__rcc_8c" startline="908" endline="1031">RCC_GetClocksFreq</references>
        <references refid="group___peripheral__memory__map_1ga86162ab3f740db9026c1320d46938b4d" compoundref="stm32f10x_8h" startline="1327">USART1_BASE</references>
        <references refid="struct_r_c_c___clocks_type_def_1ad854f0b70a6c4cf6de6dbbdcbc99b856" compoundref="stm32f10x__rcc_8h" startline="51">RCC_ClocksTypeDef::PCLK2_Frequency</references>
        <references refid="struct_r_c_c___clocks_type_def_1add4cfc63c35178d187107edc764e0b8f" compoundref="stm32f10x__rcc_8h" startline="50">RCC_ClocksTypeDef::PCLK1_Frequency</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga11495857ca81074790c376317382140f" compoundref="stm32f10x__usart_8c" startline="84">CR1_OVER8_Set</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2044eb2a0a8a731400d309741bceb2f7" compoundref="stm32f10x_8h" startline="1240">USART_TypeDef::BRR</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga34e1faa2f312496c16cfd05155f4c8b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_StructInit</definition>
        <argsstring>(USART_InitTypeDef *USART_InitStruct)</argsstring>
        <name>USART_StructInit</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___init_type_def" kindref="compound">USART_InitTypeDef</ref> *</type>
          <declname>USART_InitStruct</declname>
        </param>
        <briefdescription>
<para>Fills each USART_InitStruct member with its default value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USART_InitStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <ref refid="struct_u_s_a_r_t___init_type_def" kindref="compound">USART_InitTypeDef</ref> structure which will be initialized. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="281" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="281" bodyend="290"/>
        <references refid="struct_u_s_a_r_t___init_type_def_1a6f763cb0e6044f838ee764ce437997b2" compoundref="stm32f10x__usart_8h" startline="58">USART_InitTypeDef::USART_BaudRate</references>
        <references refid="struct_u_s_a_r_t___init_type_def_1a16d1fb7ccc2b51964f1bcfcbfba6d89d" compoundref="stm32f10x__usart_8h" startline="63">USART_InitTypeDef::USART_WordLength</references>
        <references refid="group___u_s_a_r_t___word___length_1ga08682faddc657df85a93627b5a146c25" compoundref="stm32f10x__usart_8h" startline="131">USART_WordLength_8b</references>
        <references refid="struct_u_s_a_r_t___init_type_def_1ac745bceb79a6c4c2640fd8e8ce6639d6" compoundref="stm32f10x__usart_8h" startline="66">USART_InitTypeDef::USART_StopBits</references>
        <references refid="group___u_s_a_r_t___stop___bits_1gae2cb35620ba001f0d63e9e0be93e4a05" compoundref="stm32f10x__usart_8h" startline="144">USART_StopBits_1</references>
        <references refid="struct_u_s_a_r_t___init_type_def_1a5ae66aba755bac37c5cf0dfbf529e2ed" compoundref="stm32f10x__usart_8h" startline="69">USART_InitTypeDef::USART_Parity</references>
        <references refid="group___u_s_a_r_t___parity_1gab9deebcb0a859360dfec85074abaa3aa" compoundref="stm32f10x__usart_8h" startline="160">USART_Parity_No</references>
        <references refid="struct_u_s_a_r_t___init_type_def_1a7d944d35d7d1fc79a63f249615148584" compoundref="stm32f10x__usart_8h" startline="76">USART_InitTypeDef::USART_Mode</references>
        <references refid="group___u_s_a_r_t___mode_1gafefcc3d3c1a1f83b425784fa6289aecf" compoundref="stm32f10x__usart_8h" startline="174">USART_Mode_Rx</references>
        <references refid="group___u_s_a_r_t___mode_1ga22b2813509a062435ea68d086ec565b4" compoundref="stm32f10x__usart_8h" startline="175">USART_Mode_Tx</references>
        <references refid="struct_u_s_a_r_t___init_type_def_1a9996edf3bfd90c36f03b4075969703f5" compoundref="stm32f10x__usart_8h" startline="79">USART_InitTypeDef::USART_HardwareFlowControl</references>
        <references refid="group___u_s_a_r_t___hardware___flow___control_1gaf3deaf4429b88db7753ee203f4797bd3" compoundref="stm32f10x__usart_8h" startline="184">USART_HardwareFlowControl_None</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1gadb50c7a2175c91acd3728f8eefd0c63d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_ClockInit</definition>
        <argsstring>(USART_TypeDef *USARTx, USART_ClockInitTypeDef *USART_ClockInitStruct)</argsstring>
        <name>USART_ClockInit</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type><ref refid="struct_u_s_a_r_t___clock_init_type_def" kindref="compound">USART_ClockInitTypeDef</ref> *</type>
          <declname>USART_ClockInitStruct</declname>
        </param>
        <briefdescription>
<para>Initializes the USARTx peripheral Clock according to the specified parameters in the USART_ClockInitStruct . </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2, 3 to select the USART peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_ClockInitStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <ref refid="struct_u_s_a_r_t___clock_init_type_def" kindref="compound">USART_ClockInitTypeDef</ref> structure that contains the configuration information for the specified USART peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The Smart Card and Synchronous modes are not available for UART4 and UART5. </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="302" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="302" bodyend="325"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" compoundref="stm32f10x__usart_8h" startline="119">IS_USART_123_PERIPH</references>
        <references refid="group___u_s_a_r_t___clock_1ga0f1e1ba37690b21b7338ed3b06614cf6" compoundref="stm32f10x__usart_8h" startline="202">IS_USART_CLOCK</references>
        <references refid="struct_u_s_a_r_t___clock_init_type_def_1a229ba7c3f9a4d6d56513e6899f6c6693" compoundref="stm32f10x__usart_8h" startline="91">USART_ClockInitTypeDef::USART_Clock</references>
        <references refid="group___u_s_a_r_t___clock___polarity_1ga833e9d2e85ab84658c7a7c18bd0bc8b9" compoundref="stm32f10x__usart_8h" startline="214">IS_USART_CPOL</references>
        <references refid="struct_u_s_a_r_t___clock_init_type_def_1a01450cba8a40cf9a624b25979dc6aa77" compoundref="stm32f10x__usart_8h" startline="94">USART_ClockInitTypeDef::USART_CPOL</references>
        <references refid="group___u_s_a_r_t___clock___phase_1ga66fa1a3a757025fcd8dd069a90689f88" compoundref="stm32f10x__usart_8h" startline="226">IS_USART_CPHA</references>
        <references refid="struct_u_s_a_r_t___clock_init_type_def_1abda3a2172bd5819e1c207dc0d1c822d8" compoundref="stm32f10x__usart_8h" startline="97">USART_ClockInitTypeDef::USART_CPHA</references>
        <references refid="group___u_s_a_r_t___last___bit_1gaa941695e5612b53e9c2aca6a9fa0d695" compoundref="stm32f10x__usart_8h" startline="238">IS_USART_LASTBIT</references>
        <references refid="struct_u_s_a_r_t___clock_init_type_def_1ab1b28d63d2be6e57849666d78a4467bd" compoundref="stm32f10x__usart_8h" startline="100">USART_ClockInitTypeDef::USART_LastBit</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" compoundref="stm32f10x_8h" startline="1244">USART_TypeDef::CR2</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga846e1873279b2b0798cc34d76bd80592" compoundref="stm32f10x__usart_8c" startline="63">CR2_CLOCK_CLEAR_Mask</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga59df27d0adda18b16ee28d47672cc724" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_ClockStructInit</definition>
        <argsstring>(USART_ClockInitTypeDef *USART_ClockInitStruct)</argsstring>
        <name>USART_ClockStructInit</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___clock_init_type_def" kindref="compound">USART_ClockInitTypeDef</ref> *</type>
          <declname>USART_ClockInitStruct</declname>
        </param>
        <briefdescription>
<para>Fills each USART_ClockInitStruct member with its default value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USART_ClockInitStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <ref refid="struct_u_s_a_r_t___clock_init_type_def" kindref="compound">USART_ClockInitTypeDef</ref> structure which will be initialized. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="333" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="333" bodyend="340"/>
        <references refid="struct_u_s_a_r_t___clock_init_type_def_1a229ba7c3f9a4d6d56513e6899f6c6693" compoundref="stm32f10x__usart_8h" startline="91">USART_ClockInitTypeDef::USART_Clock</references>
        <references refid="group___u_s_a_r_t___clock_1ga56c12b81d19853c093e0a373d0c52fb5" compoundref="stm32f10x__usart_8h" startline="200">USART_Clock_Disable</references>
        <references refid="struct_u_s_a_r_t___clock_init_type_def_1a01450cba8a40cf9a624b25979dc6aa77" compoundref="stm32f10x__usart_8h" startline="94">USART_ClockInitTypeDef::USART_CPOL</references>
        <references refid="group___u_s_a_r_t___clock___polarity_1ga194d60b47d8042d39e843c52f3a6aa1a" compoundref="stm32f10x__usart_8h" startline="212">USART_CPOL_Low</references>
        <references refid="struct_u_s_a_r_t___clock_init_type_def_1abda3a2172bd5819e1c207dc0d1c822d8" compoundref="stm32f10x__usart_8h" startline="97">USART_ClockInitTypeDef::USART_CPHA</references>
        <references refid="group___u_s_a_r_t___clock___phase_1gab6c0fb052fb9bc418cf368c1a0e4643b" compoundref="stm32f10x__usart_8h" startline="224">USART_CPHA_1Edge</references>
        <references refid="struct_u_s_a_r_t___clock_init_type_def_1ab1b28d63d2be6e57849666d78a4467bd" compoundref="stm32f10x__usart_8h" startline="100">USART_ClockInitTypeDef::USART_LastBit</references>
        <references refid="group___u_s_a_r_t___last___bit_1ga129c89b9e0dbb3ce43ee92589b3324e5" compoundref="stm32f10x__usart_8h" startline="236">USART_LastBit_Disable</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga45e51626739c5f22a6567c8a85d1d85e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_Cmd</definition>
        <argsstring>(USART_TypeDef *USARTx, FunctionalState NewState)</argsstring>
        <name>USART_Cmd</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified USART peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the USARTx peripheral. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="351" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="351" bodyend="367"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" compoundref="stm32f10x_8h" startline="1242">USART_TypeDef::CR1</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga95f5821be56b1a5dbfdd38fdb37ed54c" compoundref="stm32f10x__usart_8c" startline="47">CR1_UE_Set</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga9c75a44192cb3dbbbf509cddfc47481c" compoundref="stm32f10x__usart_8c" startline="48">CR1_UE_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga6d8f2dd1f34060ae7e386e3e5d56b6f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_ITConfig</definition>
        <argsstring>(USART_TypeDef *USARTx, uint16_t USART_IT, FunctionalState NewState)</argsstring>
        <name>USART_ITConfig</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>USART_IT</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified USART interrupts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_IT</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the USART interrupt sources to be enabled or disabled. This parameter can be one of the following values: <itemizedlist>
<listitem><para>USART_IT_CTS: CTS change interrupt (not available for UART4 and UART5) </para></listitem>
<listitem><para>USART_IT_LBD: LIN Break detection interrupt </para></listitem>
<listitem><para>USART_IT_TXE: Transmit Data Register empty interrupt </para></listitem>
<listitem><para>USART_IT_TC: Transmission complete interrupt </para></listitem>
<listitem><para>USART_IT_RXNE: Receive Data register not empty interrupt </para></listitem>
<listitem><para>USART_IT_IDLE: Idle line detection interrupt </para></listitem>
<listitem><para>USART_IT_PE: Parity Error interrupt </para></listitem>
<listitem><para>USART_IT_ERR: Error interrupt(Frame error, noise error, overrun error) </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the specified USARTx interrupts. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="388" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="388" bodyend="431"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___interrupt__definition_1ga37ce140eae1938a414ff32afed5ef236" compoundref="stm32f10x__usart_8h" startline="259">IS_USART_CONFIG_IT</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___u_s_a_r_t___interrupt__definition_1gab49efbefaca2921e8cbe8f5146e99dbd" compoundref="stm32f10x__usart_8h" startline="254">USART_IT_CTS</references>
        <references refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" compoundref="stm32f10x__usart_8h" startline="119">IS_USART_123_PERIPH</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga401c753d4de6ab56fcb026c91b8c8487" compoundref="stm32f10x__usart_8c" startline="81">IT_Mask</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" compoundref="core__cm0_8h" startline="221">__IO</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga902857f199ebfba21c63d725354af66f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_DMACmd</definition>
        <argsstring>(USART_TypeDef *USARTx, uint16_t USART_DMAReq, FunctionalState NewState)</argsstring>
        <name>USART_DMACmd</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>USART_DMAReq</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the USART�s DMA interface. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_DMAReq</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the DMA request. This parameter can be any combination of the following values: <itemizedlist>
<listitem><para>USART_DMAReq_Tx: USART DMA transmit request </para></listitem>
<listitem><para>USART_DMAReq_Rx: USART DMA receive request </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the DMA Request sources. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The DMA mode is not available for UART5 except in the STM32 High density value line devices(STM32F10X_HD_VL). </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="448" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="448" bodyend="466"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___d_m_a___requests_1ga8be7a899d21d82de2ee0a763b4564dc3" compoundref="stm32f10x__usart_8h" startline="280">IS_USART_DMAREQ</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" compoundref="stm32f10x_8h" startline="1246">USART_TypeDef::CR3</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga65ec9928817f3f031dd9a4dfc95d6666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_SetAddress</definition>
        <argsstring>(USART_TypeDef *USARTx, uint8_t USART_Address)</argsstring>
        <name>USART_SetAddress</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>USART_Address</declname>
        </param>
        <briefdescription>
<para>Sets the address of the USART node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_Address</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the address of the USART node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="476" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="476" bodyend="498"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___flags_1ga194e771c3324f9e130b2887c701460a7" compoundref="stm32f10x__usart_8h" startline="348">IS_USART_ADDRESS</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" compoundref="stm32f10x_8h" startline="1244">USART_TypeDef::CR2</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga080c343a5a95d4419789b94405c27764" compoundref="stm32f10x__usart_8c" startline="56">CR2_Address_Mask</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga4965417c2412c36e462fcad50a8d5393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_WakeUpConfig</definition>
        <argsstring>(USART_TypeDef *USARTx, uint16_t USART_WakeUp)</argsstring>
        <name>USART_WakeUpConfig</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>USART_WakeUp</declname>
        </param>
        <briefdescription>
<para>Selects the USART WakeUp method. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_WakeUp</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the USART wakeup method. This parameter can be one of the following values: <itemizedlist>
<listitem><para>USART_WakeUp_IdleLine: WakeUp by an idle line detection </para></listitem>
<listitem><para>USART_WakeUp_AddressMark: WakeUp by an address mark </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="511" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="511" bodyend="519"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___wake_up__methods_1ga3611be417bdb82f42dc2ca17584271f9" compoundref="stm32f10x__usart_8h" startline="292">IS_USART_WAKEUP</references>
        <references refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" compoundref="stm32f10x_8h" startline="1242">USART_TypeDef::CR1</references>
        <references refid="group___u_s_a_r_t___private___defines_1gae4045dea092c3cbfe07d14fef39195ce" compoundref="stm32f10x__usart_8c" startline="50">CR1_WAKE_Mask</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1gac27b78ce445a16fe33851d2f87781c02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_ReceiverWakeUpCmd</definition>
        <argsstring>(USART_TypeDef *USARTx, FunctionalState NewState)</argsstring>
        <name>USART_ReceiverWakeUpCmd</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Determines if the USART is in mute mode or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the USART mute mode. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="530" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="530" bodyend="546"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" compoundref="stm32f10x_8h" startline="1242">USART_TypeDef::CR1</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga5cb566b7c5e126e5ef11dd25bba50ffa" compoundref="stm32f10x__usart_8c" startline="52">CR1_RWU_Set</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga064a46d19ffffddd410e969798d335ee" compoundref="stm32f10x__usart_8c" startline="53">CR1_RWU_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga7bc2d291831cbc5e53e73337308029b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_LINBreakDetectLengthConfig</definition>
        <argsstring>(USART_TypeDef *USARTx, uint16_t USART_LINBreakDetectLength)</argsstring>
        <name>USART_LINBreakDetectLengthConfig</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>USART_LINBreakDetectLength</declname>
        </param>
        <briefdescription>
<para>Sets the USART LIN Break detection length. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_LINBreakDetectLength</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the LIN break detection length. This parameter can be one of the following values: <itemizedlist>
<listitem><para>USART_LINBreakDetectLength_10b: 10-bit break detection </para></listitem>
<listitem><para>USART_LINBreakDetectLength_11b: 11-bit break detection </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="559" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="559" bodyend="567"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___l_i_n___break___detection___length_1gaa7a45d542b1df5da1160777ad4a80d72" compoundref="stm32f10x__usart_8h" startline="304">IS_USART_LIN_BREAK_DETECT_LENGTH</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" compoundref="stm32f10x_8h" startline="1244">USART_TypeDef::CR2</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga9b365a89de44809a52895090e9050646" compoundref="stm32f10x__usart_8c" startline="61">CR2_LBDL_Mask</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga9fdd6296f4ca4acdfcbd58bf56bd4185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_LINCmd</definition>
        <argsstring>(USART_TypeDef *USARTx, FunctionalState NewState)</argsstring>
        <name>USART_LINCmd</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the USART�s LIN mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the USART LIN mode. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="578" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="578" bodyend="594"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" compoundref="stm32f10x_8h" startline="1244">USART_TypeDef::CR2</references>
        <references refid="group___u_s_a_r_t___private___defines_1gabc3f2b022d70a11fd0605e58cb23023f" compoundref="stm32f10x__usart_8c" startline="58">CR2_LINEN_Set</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga7b8fbe7be4c85c16ea1c1e3c9fa95b05" compoundref="stm32f10x__usart_8c" startline="59">CR2_LINEN_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga0b43d42da9540f446d494bf69823c6fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_SendData</definition>
        <argsstring>(USART_TypeDef *USARTx, uint16_t Data)</argsstring>
        <name>USART_SendData</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
<para>Transmits single data through the USARTx peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to transmit. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="604" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="604" bodyend="612"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___flags_1gafd6307e41818e076d31f3c24cb5ba135" compoundref="stm32f10x__usart_8h" startline="349">IS_USART_DATA</references>
        <references refid="struct_u_s_a_r_t___type_def_1accee34aaec89aad4aeef512bba173ae5" compoundref="stm32f10x_8h" startline="1238">USART_TypeDef::DR</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1gac67a91845b0b1d54d31bdfb1c5e9867c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t USART_ReceiveData</definition>
        <argsstring>(USART_TypeDef *USARTx)</argsstring>
        <name>USART_ReceiveData</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <briefdescription>
<para>Returns the most recent received data by the USARTx peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>received data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="621" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="621" bodyend="628"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="struct_u_s_a_r_t___type_def_1accee34aaec89aad4aeef512bba173ae5" compoundref="stm32f10x_8h" startline="1238">USART_TypeDef::DR</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga39a3d33e23ee28529fa8f7259ce6811e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_SendBreak</definition>
        <argsstring>(USART_TypeDef *USARTx)</argsstring>
        <name>USART_SendBreak</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <briefdescription>
<para>Transmits break characters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="637" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="637" bodyend="644"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" compoundref="stm32f10x_8h" startline="1242">USART_TypeDef::CR1</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga2813b7fa1263aecfeefa48f8a55938b9" compoundref="stm32f10x__usart_8c" startline="54">CR1_SBK_Set</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1gac4a35c6acd71ae7e0d67c1f03f0a8777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_SetGuardTime</definition>
        <argsstring>(USART_TypeDef *USARTx, uint8_t USART_GuardTime)</argsstring>
        <name>USART_SetGuardTime</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>USART_GuardTime</declname>
        </param>
        <briefdescription>
<para>Sets the specified USART guard time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the USART peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_GuardTime</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the guard time. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The guard time bits are not available for UART4 and UART5. </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="653" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="653" bodyend="662"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" compoundref="stm32f10x__usart_8h" startline="119">IS_USART_123_PERIPH</references>
        <references refid="struct_u_s_a_r_t___type_def_1abe51502097b1fd281d0a2a1b157d769e" compoundref="stm32f10x_8h" startline="1248">USART_TypeDef::GTPR</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga2fe593d0c308e2245bb66905930b3ebb" compoundref="stm32f10x__usart_8c" startline="79">GTPR_LSB_Mask</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1gaf5da8f2eee8245425584d85d4f62cc33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_SetPrescaler</definition>
        <argsstring>(USART_TypeDef *USARTx, uint8_t USART_Prescaler)</argsstring>
        <name>USART_SetPrescaler</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>USART_Prescaler</declname>
        </param>
        <briefdescription>
<para>Sets the system clock prescaler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_Prescaler</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the prescaler clock. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The function is used for IrDA mode with UART4 and UART5. </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="673" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="673" bodyend="694"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="struct_u_s_a_r_t___type_def_1abe51502097b1fd281d0a2a1b157d769e" compoundref="stm32f10x_8h" startline="1248">USART_TypeDef::GTPR</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga405b4222892bafdf1d084de5efd24d70" compoundref="stm32f10x__usart_8c" startline="80">GTPR_MSB_Mask</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1gabd1347e244c623447151ba3a5e986c5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_SmartCardCmd</definition>
        <argsstring>(USART_TypeDef *USARTx, FunctionalState NewState)</argsstring>
        <name>USART_SmartCardCmd</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the USART�s Smart Card mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the USART peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the Smart Card mode. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The Smart Card mode is not available for UART4 and UART5. </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="704" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="704" bodyend="719"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" compoundref="stm32f10x__usart_8h" startline="119">IS_USART_123_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" compoundref="stm32f10x_8h" startline="1246">USART_TypeDef::CR3</references>
        <references refid="group___u_s_a_r_t___private___defines_1gab47df7b36b4f1315953f6aa45de2fb61" compoundref="stm32f10x__usart_8c" startline="65">CR3_SCEN_Set</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga294c473dc7f8ff3e9cbaa0675c8c75f3" compoundref="stm32f10x__usart_8c" startline="66">CR3_SCEN_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga62e22f47e38aa53f2edce8771f7a5dfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_SmartCardNACKCmd</definition>
        <argsstring>(USART_TypeDef *USARTx, FunctionalState NewState)</argsstring>
        <name>USART_SmartCardNACKCmd</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables NACK transmission. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the USART peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the NACK transmission. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The Smart Card mode is not available for UART4 and UART5. </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="729" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="729" bodyend="744"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" compoundref="stm32f10x__usart_8h" startline="119">IS_USART_123_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" compoundref="stm32f10x_8h" startline="1246">USART_TypeDef::CR3</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga950cc9f7251709854754add7d9aaca60" compoundref="stm32f10x__usart_8c" startline="68">CR3_NACK_Set</references>
        <references refid="group___u_s_a_r_t___private___defines_1gabed0cac273ff4faf009e8c35243c1e10" compoundref="stm32f10x__usart_8c" startline="69">CR3_NACK_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1gaaa23b05fe0e1896bad90da7f82750831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_HalfDuplexCmd</definition>
        <argsstring>(USART_TypeDef *USARTx, FunctionalState NewState)</argsstring>
        <name>USART_HalfDuplexCmd</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the USART�s Half Duplex communication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the USART Communication. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="755" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="755" bodyend="771"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" compoundref="stm32f10x_8h" startline="1246">USART_TypeDef::CR3</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga0c5c30ea9777d0c8c6f1b5ff85dfca3c" compoundref="stm32f10x__usart_8c" startline="71">CR3_HDSEL_Set</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga762c72448ba24f3487dfa457a8dcc9fc" compoundref="stm32f10x__usart_8c" startline="72">CR3_HDSEL_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga3897bab07491d9239f8a238a9a7cddea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_OverSampling8Cmd</definition>
        <argsstring>(USART_TypeDef *USARTx, FunctionalState NewState)</argsstring>
        <name>USART_OverSampling8Cmd</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the USART&apos;s 8x oversampling mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the USART one bit sampling method. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function has to be called before calling <ref refid="group___u_s_a_r_t___private___functions_1ga98da340ea0324002ba1b4263e91ab2ff" kindref="member">USART_Init()</ref> function in order to have correct baudrate Divider value. </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="786" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="786" bodyend="802"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" compoundref="stm32f10x_8h" startline="1242">USART_TypeDef::CR1</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga11495857ca81074790c376317382140f" compoundref="stm32f10x__usart_8c" startline="84">CR1_OVER8_Set</references>
        <references refid="group___u_s_a_r_t___private___defines_1gaf84165f2974000906c495b3c27dc5121" compoundref="stm32f10x__usart_8c" startline="85">CR1_OVER8_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga3ed89ea8765d851510cfe90f7d90cbbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_OneBitMethodCmd</definition>
        <argsstring>(USART_TypeDef *USARTx, FunctionalState NewState)</argsstring>
        <name>USART_OneBitMethodCmd</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the USART&apos;s one bit sampling method. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the USART one bit sampling method. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="813" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="813" bodyend="829"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" compoundref="stm32f10x_8h" startline="1246">USART_TypeDef::CR3</references>
        <references refid="group___u_s_a_r_t___private___defines_1gac512024dda541435acfe0b50de925105" compoundref="stm32f10x__usart_8c" startline="88">CR3_ONEBITE_Set</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga55dc289819dde550630df98267bbef52" compoundref="stm32f10x__usart_8c" startline="89">CR3_ONEBITE_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga81a0cd36199040bf6d266b57babd678e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_IrDAConfig</definition>
        <argsstring>(USART_TypeDef *USARTx, uint16_t USART_IrDAMode)</argsstring>
        <name>USART_IrDAConfig</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>USART_IrDAMode</declname>
        </param>
        <briefdescription>
<para>Configures the USART&apos;s IrDA interface. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_IrDAMode</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the IrDA mode. This parameter can be one of the following values: <itemizedlist>
<listitem><para>USART_IrDAMode_LowPower </para></listitem>
<listitem><para>USART_IrDAMode_Normal </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="842" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="842" bodyend="850"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___ir_d_a___low___power_1ga7790838ff8ee71089da2c0e5bceee569" compoundref="stm32f10x__usart_8h" startline="317">IS_USART_IRDA_MODE</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" compoundref="stm32f10x_8h" startline="1246">USART_TypeDef::CR3</references>
        <references refid="group___u_s_a_r_t___private___defines_1gaea5d8d002a34c3a587719533db2c17f9" compoundref="stm32f10x__usart_8c" startline="74">CR3_IRLP_Mask</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1gabff56ebb494fdfadcc6ef4fe9ac8dd24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_IrDACmd</definition>
        <argsstring>(USART_TypeDef *USARTx, FunctionalState NewState)</argsstring>
        <name>USART_IrDACmd</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the USART&apos;s IrDA interface. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the IrDA mode. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="861" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="861" bodyend="877"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" compoundref="stm32f10x_8h" startline="1246">USART_TypeDef::CR3</references>
        <references refid="group___u_s_a_r_t___private___defines_1gad5dd1d08f3836f9a3c3f3cc0c66a8b8f" compoundref="stm32f10x__usart_8c" startline="77">CR3_IREN_Set</references>
        <references refid="group___u_s_a_r_t___private___defines_1gad1520358de97e48fe18780e5cc5296bd" compoundref="stm32f10x__usart_8c" startline="78">CR3_IREN_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga144630722defc9e312f0ad280b68e9da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref></type>
        <definition>FlagStatus USART_GetFlagStatus</definition>
        <argsstring>(USART_TypeDef *USARTx, uint16_t USART_FLAG)</argsstring>
        <name>USART_GetFlagStatus</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>USART_FLAG</declname>
        </param>
        <briefdescription>
<para>Checks whether the specified USART flag is set or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_FLAG</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the flag to check. This parameter can be one of the following values: <itemizedlist>
<listitem><para>USART_FLAG_CTS: CTS Change flag (not available for UART4 and UART5) </para></listitem>
<listitem><para>USART_FLAG_LBD: LIN Break detection flag </para></listitem>
<listitem><para>USART_FLAG_TXE: Transmit data register empty flag </para></listitem>
<listitem><para>USART_FLAG_TC: Transmission Complete flag </para></listitem>
<listitem><para>USART_FLAG_RXNE: Receive data register not empty flag </para></listitem>
<listitem><para>USART_FLAG_IDLE: Idle Line detection flag </para></listitem>
<listitem><para>USART_FLAG_ORE: OverRun Error flag </para></listitem>
<listitem><para>USART_FLAG_NE: Noise Error flag </para></listitem>
<listitem><para>USART_FLAG_FE: Framing Error flag </para></listitem>
<listitem><para>USART_FLAG_PE: Parity Error flag </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of USART_FLAG (SET or RESET). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="898" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="898" bodyend="919"/>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___flags_1ga3e20747ce7c97a36718933c0cb3dac29" compoundref="stm32f10x__usart_8h" startline="337">IS_USART_FLAG</references>
        <references refid="group___u_s_a_r_t___flags_1ga94b7272319cca88a65075d5cb6048441" compoundref="stm32f10x__usart_8h" startline="327">USART_FLAG_CTS</references>
        <references refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" compoundref="stm32f10x__usart_8h" startline="119">IS_USART_123_PERIPH</references>
        <references refid="struct_u_s_a_r_t___type_def_1a3f1fd9f0c004d3087caeba4815faa41c" compoundref="stm32f10x_8h" startline="1236">USART_TypeDef::SR</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" compoundref="stm32f10x_8h" startline="519">SET</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1gad962e148fc466ae1b45b288f6c91d966" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_ClearFlag</definition>
        <argsstring>(USART_TypeDef *USARTx, uint16_t USART_FLAG)</argsstring>
        <name>USART_ClearFlag</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>USART_FLAG</declname>
        </param>
        <briefdescription>
<para>Clears the USARTx&apos;s pending flags. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_FLAG</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the flag to clear. This parameter can be any combination of the following values: <itemizedlist>
<listitem><para>USART_FLAG_CTS: CTS Change flag (not available for UART4 and UART5). </para></listitem>
<listitem><para>USART_FLAG_LBD: LIN Break detection flag. </para></listitem>
<listitem><para>USART_FLAG_TC: Transmission Complete flag. </para></listitem>
<listitem><para>USART_FLAG_RXNE: Receive data register not empty flag.</para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun error) and IDLE (Idle line detected) flags are cleared by software sequence: a read operation to USART_SR register (<ref refid="group___u_s_a_r_t___private___functions_1ga144630722defc9e312f0ad280b68e9da" kindref="member">USART_GetFlagStatus()</ref>) followed by a read operation to USART_DR register (<ref refid="group___u_s_a_r_t___private___functions_1gac67a91845b0b1d54d31bdfb1c5e9867c" kindref="member">USART_ReceiveData()</ref>).</para></listitem><listitem><para>RXNE flag can be also cleared by a read to the USART_DR register (<ref refid="group___u_s_a_r_t___private___functions_1gac67a91845b0b1d54d31bdfb1c5e9867c" kindref="member">USART_ReceiveData()</ref>).</para></listitem><listitem><para>TC flag can be also cleared by software sequence: a read operation to USART_SR register (<ref refid="group___u_s_a_r_t___private___functions_1ga144630722defc9e312f0ad280b68e9da" kindref="member">USART_GetFlagStatus()</ref>) followed by a write operation to USART_DR register (<ref refid="group___u_s_a_r_t___private___functions_1ga0b43d42da9540f446d494bf69823c6fb" kindref="member">USART_SendData()</ref>).</para></listitem><listitem><para>TXE flag is cleared only by a write to the USART_DR register (<ref refid="group___u_s_a_r_t___private___functions_1ga0b43d42da9540f446d494bf69823c6fb" kindref="member">USART_SendData()</ref>). </para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="947" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="947" bodyend="959"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___flags_1gadc905fdce8defba31c00c95554a26bc3" compoundref="stm32f10x__usart_8h" startline="343">IS_USART_CLEAR_FLAG</references>
        <references refid="group___u_s_a_r_t___flags_1ga94b7272319cca88a65075d5cb6048441" compoundref="stm32f10x__usart_8h" startline="327">USART_FLAG_CTS</references>
        <references refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" compoundref="stm32f10x__usart_8h" startline="119">IS_USART_123_PERIPH</references>
        <references refid="struct_u_s_a_r_t___type_def_1a3f1fd9f0c004d3087caeba4815faa41c" compoundref="stm32f10x_8h" startline="1236">USART_TypeDef::SR</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga93d8f031241bcdbe938d091a85295445" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref></type>
        <definition>ITStatus USART_GetITStatus</definition>
        <argsstring>(USART_TypeDef *USARTx, uint16_t USART_IT)</argsstring>
        <name>USART_GetITStatus</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>USART_IT</declname>
        </param>
        <briefdescription>
<para>Checks whether the specified USART interrupt has occurred or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_IT</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the USART interrupt source to check. This parameter can be one of the following values: <itemizedlist>
<listitem><para>USART_IT_CTS: CTS change interrupt (not available for UART4 and UART5) </para></listitem>
<listitem><para>USART_IT_LBD: LIN Break detection interrupt </para></listitem>
<listitem><para>USART_IT_TXE: Tansmit Data Register empty interrupt </para></listitem>
<listitem><para>USART_IT_TC: Transmission complete interrupt </para></listitem>
<listitem><para>USART_IT_RXNE: Receive Data register not empty interrupt </para></listitem>
<listitem><para>USART_IT_IDLE: Idle line detection interrupt </para></listitem>
<listitem><para>USART_IT_ORE: OverRun Error interrupt </para></listitem>
<listitem><para>USART_IT_NE: Noise Error interrupt </para></listitem>
<listitem><para>USART_IT_FE: Framing Error interrupt </para></listitem>
<listitem><para>USART_IT_PE: Parity Error interrupt </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of USART_IT (SET or RESET). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="980" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="980" bodyend="1025"/>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___interrupt__definition_1ga9a8014793a383d710eaaf4185f2b795d" compoundref="stm32f10x__usart_8h" startline="263">IS_USART_GET_IT</references>
        <references refid="group___u_s_a_r_t___interrupt__definition_1gab49efbefaca2921e8cbe8f5146e99dbd" compoundref="stm32f10x__usart_8h" startline="254">USART_IT_CTS</references>
        <references refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" compoundref="stm32f10x__usart_8h" startline="119">IS_USART_123_PERIPH</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga401c753d4de6ab56fcb026c91b8c8487" compoundref="stm32f10x__usart_8c" startline="81">IT_Mask</references>
        <references refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" compoundref="stm32f10x_8h" startline="1242">USART_TypeDef::CR1</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" compoundref="stm32f10x_8h" startline="1244">USART_TypeDef::CR2</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" compoundref="stm32f10x_8h" startline="1246">USART_TypeDef::CR3</references>
        <references refid="struct_u_s_a_r_t___type_def_1a3f1fd9f0c004d3087caeba4815faa41c" compoundref="stm32f10x_8h" startline="1236">USART_TypeDef::SR</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" compoundref="stm32f10x_8h" startline="519">SET</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga1fc25d0338695063be5e50156955d9bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_ClearITPendingBit</definition>
        <argsstring>(USART_TypeDef *USARTx, uint16_t USART_IT)</argsstring>
        <name>USART_ClearITPendingBit</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>USART_IT</declname>
        </param>
        <briefdescription>
<para>Clears the USARTx&apos;s interrupt pending bits. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_IT</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the interrupt pending bit to clear. This parameter can be one of the following values: <itemizedlist>
<listitem><para>USART_IT_CTS: CTS change interrupt (not available for UART4 and UART5) </para></listitem>
<listitem><para>USART_IT_LBD: LIN Break detection interrupt </para></listitem>
<listitem><para>USART_IT_TC: Transmission complete interrupt. </para></listitem>
<listitem><para>USART_IT_RXNE: Receive Data register not empty interrupt.</para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun error) and IDLE (Idle line detected) pending bits are cleared by software sequence: a read operation to USART_SR register (<ref refid="group___u_s_a_r_t___private___functions_1ga93d8f031241bcdbe938d091a85295445" kindref="member">USART_GetITStatus()</ref>) followed by a read operation to USART_DR register (<ref refid="group___u_s_a_r_t___private___functions_1gac67a91845b0b1d54d31bdfb1c5e9867c" kindref="member">USART_ReceiveData()</ref>).</para></listitem><listitem><para>RXNE pending bit can be also cleared by a read to the USART_DR register (<ref refid="group___u_s_a_r_t___private___functions_1gac67a91845b0b1d54d31bdfb1c5e9867c" kindref="member">USART_ReceiveData()</ref>).</para></listitem><listitem><para>TC pending bit can be also cleared by software sequence: a read operation to USART_SR register (<ref refid="group___u_s_a_r_t___private___functions_1ga93d8f031241bcdbe938d091a85295445" kindref="member">USART_GetITStatus()</ref>) followed by a write operation to USART_DR register (<ref refid="group___u_s_a_r_t___private___functions_1ga0b43d42da9540f446d494bf69823c6fb" kindref="member">USART_SendData()</ref>).</para></listitem><listitem><para>TXE pending bit is cleared only by a write to the USART_DR register (<ref refid="group___u_s_a_r_t___private___functions_1ga0b43d42da9540f446d494bf69823c6fb" kindref="member">USART_SendData()</ref>). </para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="1054" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="1054" bodyend="1080"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___interrupt__definition_1ga3ceda175140b84eea02a2261ebda4efd" compoundref="stm32f10x__usart_8h" startline="268">IS_USART_CLEAR_IT</references>
        <references refid="group___u_s_a_r_t___interrupt__definition_1gab49efbefaca2921e8cbe8f5146e99dbd" compoundref="stm32f10x__usart_8h" startline="254">USART_IT_CTS</references>
        <references refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" compoundref="stm32f10x__usart_8h" startline="119">IS_USART_123_PERIPH</references>
        <references refid="struct_u_s_a_r_t___type_def_1a3f1fd9f0c004d3087caeba4815faa41c" compoundref="stm32f10x_8h" startline="1236">USART_TypeDef::SR</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file provides all the USART firmware functions. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>MCD Application Team </para></simplesect>
<simplesect kind="version"><para>V3.5.0 </para></simplesect>
<simplesect kind="date"><para>11-March-2011 </para></simplesect>
<simplesect kind="attention"><para></para></simplesect>
THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.</para><para><heading level="2"><center><copy/> COPYRIGHT 2011 STMicroelectronics</center></heading>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="22"><highlight class="comment">/*<sp/>Includes<sp/>------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stm32f10x__usart_8h" kindref="compound">stm32f10x_usart.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stm32f10x__rcc_8h" kindref="compound">stm32f10x_rcc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="group___u_s_a_r_t___private___defines_1ga95f5821be56b1a5dbfdd38fdb37ed54c" refkind="member"><highlight class="preprocessor">#define<sp/>CR1_UE_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0x2000)<sp/><sp/></highlight></codeline>
<codeline lineno="48" refid="group___u_s_a_r_t___private___defines_1ga9c75a44192cb3dbbbf509cddfc47481c" refkind="member"><highlight class="preprocessor">#define<sp/>CR1_UE_Reset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0xDFFF)<sp/><sp/></highlight></codeline>
<codeline lineno="50" refid="group___u_s_a_r_t___private___defines_1gae4045dea092c3cbfe07d14fef39195ce" refkind="member"><highlight class="preprocessor">#define<sp/>CR1_WAKE_Mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0xF7FF)<sp/><sp/></highlight></codeline>
<codeline lineno="52" refid="group___u_s_a_r_t___private___defines_1ga5cb566b7c5e126e5ef11dd25bba50ffa" refkind="member"><highlight class="preprocessor">#define<sp/>CR1_RWU_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0x0002)<sp/><sp/></highlight></codeline>
<codeline lineno="53" refid="group___u_s_a_r_t___private___defines_1ga064a46d19ffffddd410e969798d335ee" refkind="member"><highlight class="preprocessor">#define<sp/>CR1_RWU_Reset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0xFFFD)<sp/><sp/></highlight></codeline>
<codeline lineno="54" refid="group___u_s_a_r_t___private___defines_1ga2813b7fa1263aecfeefa48f8a55938b9" refkind="member"><highlight class="preprocessor">#define<sp/>CR1_SBK_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0x0001)<sp/><sp/></highlight></codeline>
<codeline lineno="55" refid="group___u_s_a_r_t___private___defines_1ga67f7dd35ea3d1296677e5fc50b88fa90" refkind="member"><highlight class="preprocessor">#define<sp/>CR1_CLEAR_Mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0xE9F3)<sp/><sp/></highlight></codeline>
<codeline lineno="56" refid="group___u_s_a_r_t___private___defines_1ga080c343a5a95d4419789b94405c27764" refkind="member"><highlight class="preprocessor">#define<sp/>CR2_Address_Mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0xFFF0)<sp/><sp/></highlight></codeline>
<codeline lineno="58" refid="group___u_s_a_r_t___private___defines_1gabc3f2b022d70a11fd0605e58cb23023f" refkind="member"><highlight class="preprocessor">#define<sp/>CR2_LINEN_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0x4000)<sp/><sp/></highlight></codeline>
<codeline lineno="59" refid="group___u_s_a_r_t___private___defines_1ga7b8fbe7be4c85c16ea1c1e3c9fa95b05" refkind="member"><highlight class="preprocessor">#define<sp/>CR2_LINEN_Reset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0xBFFF)<sp/><sp/></highlight></codeline>
<codeline lineno="61" refid="group___u_s_a_r_t___private___defines_1ga9b365a89de44809a52895090e9050646" refkind="member"><highlight class="preprocessor">#define<sp/>CR2_LBDL_Mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0xFFDF)<sp/><sp/></highlight></codeline>
<codeline lineno="62" refid="group___u_s_a_r_t___private___defines_1ga8a2294276016f30cb361a7f54ad07cd4" refkind="member"><highlight class="preprocessor">#define<sp/>CR2_STOP_CLEAR_Mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0xCFFF)<sp/><sp/></highlight></codeline>
<codeline lineno="63" refid="group___u_s_a_r_t___private___defines_1ga846e1873279b2b0798cc34d76bd80592" refkind="member"><highlight class="preprocessor">#define<sp/>CR2_CLOCK_CLEAR_Mask<sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0xF0FF)<sp/><sp/></highlight></codeline>
<codeline lineno="65" refid="group___u_s_a_r_t___private___defines_1gab47df7b36b4f1315953f6aa45de2fb61" refkind="member"><highlight class="preprocessor">#define<sp/>CR3_SCEN_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0x0020)<sp/><sp/></highlight></codeline>
<codeline lineno="66" refid="group___u_s_a_r_t___private___defines_1ga294c473dc7f8ff3e9cbaa0675c8c75f3" refkind="member"><highlight class="preprocessor">#define<sp/>CR3_SCEN_Reset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0xFFDF)<sp/><sp/></highlight></codeline>
<codeline lineno="68" refid="group___u_s_a_r_t___private___defines_1ga950cc9f7251709854754add7d9aaca60" refkind="member"><highlight class="preprocessor">#define<sp/>CR3_NACK_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0x0010)<sp/><sp/></highlight></codeline>
<codeline lineno="69" refid="group___u_s_a_r_t___private___defines_1gabed0cac273ff4faf009e8c35243c1e10" refkind="member"><highlight class="preprocessor">#define<sp/>CR3_NACK_Reset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0xFFEF)<sp/><sp/></highlight></codeline>
<codeline lineno="71" refid="group___u_s_a_r_t___private___defines_1ga0c5c30ea9777d0c8c6f1b5ff85dfca3c" refkind="member"><highlight class="preprocessor">#define<sp/>CR3_HDSEL_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0x0008)<sp/><sp/></highlight></codeline>
<codeline lineno="72" refid="group___u_s_a_r_t___private___defines_1ga762c72448ba24f3487dfa457a8dcc9fc" refkind="member"><highlight class="preprocessor">#define<sp/>CR3_HDSEL_Reset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0xFFF7)<sp/><sp/></highlight></codeline>
<codeline lineno="74" refid="group___u_s_a_r_t___private___defines_1gaea5d8d002a34c3a587719533db2c17f9" refkind="member"><highlight class="preprocessor">#define<sp/>CR3_IRLP_Mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0xFFFB)<sp/><sp/></highlight></codeline>
<codeline lineno="75" refid="group___u_s_a_r_t___private___defines_1ga085e8ef6bc8f5de45c5be95971715f7f" refkind="member"><highlight class="preprocessor">#define<sp/>CR3_CLEAR_Mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0xFCFF)<sp/><sp/></highlight></codeline>
<codeline lineno="77" refid="group___u_s_a_r_t___private___defines_1gad5dd1d08f3836f9a3c3f3cc0c66a8b8f" refkind="member"><highlight class="preprocessor">#define<sp/>CR3_IREN_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0x0002)<sp/><sp/></highlight></codeline>
<codeline lineno="78" refid="group___u_s_a_r_t___private___defines_1gad1520358de97e48fe18780e5cc5296bd" refkind="member"><highlight class="preprocessor">#define<sp/>CR3_IREN_Reset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0xFFFD)<sp/><sp/></highlight></codeline>
<codeline lineno="79" refid="group___u_s_a_r_t___private___defines_1ga2fe593d0c308e2245bb66905930b3ebb" refkind="member"><highlight class="preprocessor">#define<sp/>GTPR_LSB_Mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0x00FF)<sp/><sp/></highlight></codeline>
<codeline lineno="80" refid="group___u_s_a_r_t___private___defines_1ga405b4222892bafdf1d084de5efd24d70" refkind="member"><highlight class="preprocessor">#define<sp/>GTPR_MSB_Mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0xFF00)<sp/><sp/></highlight></codeline>
<codeline lineno="81" refid="group___u_s_a_r_t___private___defines_1ga401c753d4de6ab56fcb026c91b8c8487" refkind="member"><highlight class="preprocessor">#define<sp/>IT_Mask<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0x001F)<sp/><sp/></highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"></highlight><highlight class="comment">/*<sp/>USART<sp/>OverSampling-8<sp/>Mask<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="group___u_s_a_r_t___private___defines_1ga11495857ca81074790c376317382140f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR1_OVER8_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((u16)0x8000)<sp/><sp/></highlight><highlight class="comment">/*<sp/>USART<sp/>OVER8<sp/>mode<sp/>Enable<sp/>Mask<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="group___u_s_a_r_t___private___defines_1gaf84165f2974000906c495b3c27dc5121" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR1_OVER8_Reset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((u16)0x7FFF)<sp/><sp/></highlight><highlight class="comment">/*<sp/>USART<sp/>OVER8<sp/>mode<sp/>Disable<sp/>Mask<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>USART<sp/>One<sp/>Bit<sp/>Sampling<sp/>Mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="group___u_s_a_r_t___private___defines_1gac512024dda541435acfe0b50de925105" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR3_ONEBITE_Set<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((u16)0x0800)<sp/><sp/></highlight><highlight class="comment">/*<sp/>USART<sp/>ONEBITE<sp/>mode<sp/>Enable<sp/>Mask<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="group___u_s_a_r_t___private___defines_1ga55dc289819dde550630df98267bbef52" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR3_ONEBITE_Reset<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((u16)0xF7FF)<sp/><sp/></highlight><highlight class="comment">/*<sp/>USART<sp/>ONEBITE<sp/>mode<sp/>Disable<sp/>Mask<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="group___u_s_a_r_t___private___functions_1ga2f8e1ce72da21b6539d8e1f299ec3b0d" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1ga2f8e1ce72da21b6539d8e1f299ec3b0d" kindref="member">USART_DeInit</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx)</highlight></codeline>
<codeline lineno="131"><highlight class="normal">{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(USARTx<sp/>==<sp/><ref refid="group___peripheral__declaration_1ga92871691058ff7ccffd7635930cb08da" kindref="member">USART1</ref>)</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_c_c___exported___functions_1gad94553850ac07106a27ee85fec37efdf" kindref="member">RCC_APB2PeriphResetCmd</ref>(<ref refid="group___a_p_b2__peripheral_1ga14e1b3b6d84801c223a37a954b5b1910" kindref="member">RCC_APB2Periph_USART1</ref>,<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" kindref="member">ENABLE</ref>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_c_c___exported___functions_1gad94553850ac07106a27ee85fec37efdf" kindref="member">RCC_APB2PeriphResetCmd</ref>(<ref refid="group___a_p_b2__peripheral_1ga14e1b3b6d84801c223a37a954b5b1910" kindref="member">RCC_APB2Periph_USART1</ref>,<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(USARTx<sp/>==<sp/><ref refid="group___peripheral__declaration_1gaf114a9eab03ca08a6fb720e511595930" kindref="member">USART2</ref>)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_c_c___exported___functions_1gab197ae4369c10b92640a733b40ed2801" kindref="member">RCC_APB1PeriphResetCmd</ref>(<ref refid="group___a_p_b1__peripheral_1gaa69c77220b943a42a4bacb8a3bf87dd0" kindref="member">RCC_APB1Periph_USART2</ref>,<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" kindref="member">ENABLE</ref>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_c_c___exported___functions_1gab197ae4369c10b92640a733b40ed2801" kindref="member">RCC_APB1PeriphResetCmd</ref>(<ref refid="group___a_p_b1__peripheral_1gaa69c77220b943a42a4bacb8a3bf87dd0" kindref="member">RCC_APB1Periph_USART2</ref>,<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(USARTx<sp/>==<sp/><ref refid="group___peripheral__declaration_1ga2350115553c1fe0a7bc14e6a7ec6a225" kindref="member">USART3</ref>)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_c_c___exported___functions_1gab197ae4369c10b92640a733b40ed2801" kindref="member">RCC_APB1PeriphResetCmd</ref>(<ref refid="group___a_p_b1__peripheral_1gaf72838a63d7d6200f251c1eb334cbaac" kindref="member">RCC_APB1Periph_USART3</ref>,<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" kindref="member">ENABLE</ref>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_c_c___exported___functions_1gab197ae4369c10b92640a733b40ed2801" kindref="member">RCC_APB1PeriphResetCmd</ref>(<ref refid="group___a_p_b1__peripheral_1gaf72838a63d7d6200f251c1eb334cbaac" kindref="member">RCC_APB1Periph_USART3</ref>,<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(USARTx<sp/>==<sp/><ref refid="group___peripheral__declaration_1ga7c035f6f443c999fc043b2b7fb598800" kindref="member">UART4</ref>)</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_c_c___exported___functions_1gab197ae4369c10b92640a733b40ed2801" kindref="member">RCC_APB1PeriphResetCmd</ref>(<ref refid="group___a_p_b1__peripheral_1ga839d7ae3386622158210ecf53d9cd989" kindref="member">RCC_APB1Periph_UART4</ref>,<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" kindref="member">ENABLE</ref>);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_c_c___exported___functions_1gab197ae4369c10b92640a733b40ed2801" kindref="member">RCC_APB1PeriphResetCmd</ref>(<ref refid="group___a_p_b1__peripheral_1ga839d7ae3386622158210ecf53d9cd989" kindref="member">RCC_APB1Periph_UART4</ref>,<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(USARTx<sp/>==<sp/><ref refid="group___peripheral__declaration_1ga9274e37cf5e8a174fc5dd627b98ec0fe" kindref="member">UART5</ref>)</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_c_c___exported___functions_1gab197ae4369c10b92640a733b40ed2801" kindref="member">RCC_APB1PeriphResetCmd</ref>(<ref refid="group___a_p_b1__peripheral_1gaa00c73f88a7af45fb29df97b07acd856" kindref="member">RCC_APB1Periph_UART5</ref>,<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" kindref="member">ENABLE</ref>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_c_c___exported___functions_1gab197ae4369c10b92640a733b40ed2801" kindref="member">RCC_APB1PeriphResetCmd</ref>(<ref refid="group___a_p_b1__peripheral_1gaa00c73f88a7af45fb29df97b07acd856" kindref="member">RCC_APB1Periph_UART5</ref>,<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="group___u_s_a_r_t___private___functions_1ga98da340ea0324002ba1b4263e91ab2ff" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1ga98da340ea0324002ba1b4263e91ab2ff" kindref="member">USART_Init</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/><ref refid="struct_u_s_a_r_t___init_type_def" kindref="compound">USART_InitTypeDef</ref>*<sp/>USART_InitStruct)</highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>uint32_t<sp/>tmpreg<sp/>=<sp/>0x00,<sp/>apbclock<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>uint32_t<sp/>integerdivider<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>uint32_t<sp/>fractionaldivider<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>uint32_t<sp/>usartxbase<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><ref refid="struct_r_c_c___clocks_type_def" kindref="compound">RCC_ClocksTypeDef</ref><sp/>RCC_ClocksStatus;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___flags_1ga9dc365e0a1e01031a8e0757a34b9d420" kindref="member">IS_USART_BAUDRATE</ref>(USART_InitStruct-&gt;<ref refid="struct_u_s_a_r_t___init_type_def_1a6f763cb0e6044f838ee764ce437997b2" kindref="member">USART_BaudRate</ref>));<sp/><sp/></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___word___length_1ga5b07b29ee91f0bea4c10ec0fd74fbc04" kindref="member">IS_USART_WORD_LENGTH</ref>(USART_InitStruct-&gt;<ref refid="struct_u_s_a_r_t___init_type_def_1a16d1fb7ccc2b51964f1bcfcbfba6d89d" kindref="member">USART_WordLength</ref>));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___stop___bits_1ga6f9153c1fbee1058ba26ec88f0f20828" kindref="member">IS_USART_STOPBITS</ref>(USART_InitStruct-&gt;<ref refid="struct_u_s_a_r_t___init_type_def_1ac745bceb79a6c4c2640fd8e8ce6639d6" kindref="member">USART_StopBits</ref>));</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___parity_1gaa87b2e338e0ccc42887d3c56901bee87" kindref="member">IS_USART_PARITY</ref>(USART_InitStruct-&gt;<ref refid="struct_u_s_a_r_t___init_type_def_1a5ae66aba755bac37c5cf0dfbf529e2ed" kindref="member">USART_Parity</ref>));</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___mode_1gae9140e5ca405d2377fe0e82c79e136a2" kindref="member">IS_USART_MODE</ref>(USART_InitStruct-&gt;<ref refid="struct_u_s_a_r_t___init_type_def_1a7d944d35d7d1fc79a63f249615148584" kindref="member">USART_Mode</ref>));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___hardware___flow___control_1ga9b905eb465780173a2e98bc8b602c030" kindref="member">IS_USART_HARDWARE_FLOW_CONTROL</ref>(USART_InitStruct-&gt;<ref refid="struct_u_s_a_r_t___init_type_def_1a9996edf3bfd90c36f03b4075969703f5" kindref="member">USART_HardwareFlowControl</ref>));</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>hardware<sp/>flow<sp/>control<sp/>is<sp/>available<sp/>only<sp/>for<sp/>USART1,<sp/>USART2<sp/>and<sp/>USART3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(USART_InitStruct-&gt;<ref refid="struct_u_s_a_r_t___init_type_def_1a9996edf3bfd90c36f03b4075969703f5" kindref="member">USART_HardwareFlowControl</ref><sp/>!=<sp/><ref refid="group___u_s_a_r_t___hardware___flow___control_1gaf3deaf4429b88db7753ee203f4797bd3" kindref="member">USART_HardwareFlowControl_None</ref>)</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" kindref="member">IS_USART_123_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/>usartxbase<sp/>=<sp/>(uint32_t)USARTx;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------<sp/>USART<sp/>CR2<sp/>Configuration<sp/>-----------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/>tmpreg<sp/>=<sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" kindref="member">CR2</ref>;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>STOP[13:12]<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>tmpreg<sp/>&amp;=<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga8a2294276016f30cb361a7f54ad07cd4" kindref="member">CR2_STOP_CLEAR_Mask</ref>;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>the<sp/>USART<sp/>Stop<sp/>Bits,<sp/>Clock,<sp/>CPOL,<sp/>CPHA<sp/>and<sp/>LastBit<sp/>------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>STOP[13:12]<sp/>bits<sp/>according<sp/>to<sp/>USART_StopBits<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>tmpreg<sp/>|=<sp/>(uint32_t)USART_InitStruct-&gt;<ref refid="struct_u_s_a_r_t___init_type_def_1ac745bceb79a6c4c2640fd8e8ce6639d6" kindref="member">USART_StopBits</ref>;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>to<sp/>USART<sp/>CR2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" kindref="member">CR2</ref><sp/>=<sp/>(uint16_t)tmpreg;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------<sp/>USART<sp/>CR1<sp/>Configuration<sp/>-----------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>tmpreg<sp/>=<sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" kindref="member">CR1</ref>;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>M,<sp/>PCE,<sp/>PS,<sp/>TE<sp/>and<sp/>RE<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/>tmpreg<sp/>&amp;=<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga67f7dd35ea3d1296677e5fc50b88fa90" kindref="member">CR1_CLEAR_Mask</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>the<sp/>USART<sp/>Word<sp/>Length,<sp/>Parity<sp/>and<sp/>mode<sp/>-----------------------<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>M<sp/>bits<sp/>according<sp/>to<sp/>USART_WordLength<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>PCE<sp/>and<sp/>PS<sp/>bits<sp/>according<sp/>to<sp/>USART_Parity<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>TE<sp/>and<sp/>RE<sp/>bits<sp/>according<sp/>to<sp/>USART_Mode<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>tmpreg<sp/>|=<sp/>(uint32_t)USART_InitStruct-&gt;<ref refid="struct_u_s_a_r_t___init_type_def_1a16d1fb7ccc2b51964f1bcfcbfba6d89d" kindref="member">USART_WordLength</ref><sp/>|<sp/>USART_InitStruct-&gt;<ref refid="struct_u_s_a_r_t___init_type_def_1a5ae66aba755bac37c5cf0dfbf529e2ed" kindref="member">USART_Parity</ref><sp/>|</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USART_InitStruct-&gt;<ref refid="struct_u_s_a_r_t___init_type_def_1a7d944d35d7d1fc79a63f249615148584" kindref="member">USART_Mode</ref>;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>to<sp/>USART<sp/>CR1<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" kindref="member">CR1</ref><sp/>=<sp/>(uint16_t)tmpreg;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------<sp/>USART<sp/>CR3<sp/>Configuration<sp/>-----------------------*/</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>tmpreg<sp/>=<sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" kindref="member">CR3</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>CTSE<sp/>and<sp/>RTSE<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>tmpreg<sp/>&amp;=<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga085e8ef6bc8f5de45c5be95971715f7f" kindref="member">CR3_CLEAR_Mask</ref>;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>the<sp/>USART<sp/>HFC<sp/>-------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>CTSE<sp/>and<sp/>RTSE<sp/>bits<sp/>according<sp/>to<sp/>USART_HardwareFlowControl<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>tmpreg<sp/>|=<sp/>USART_InitStruct-&gt;<ref refid="struct_u_s_a_r_t___init_type_def_1a9996edf3bfd90c36f03b4075969703f5" kindref="member">USART_HardwareFlowControl</ref>;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>to<sp/>USART<sp/>CR3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" kindref="member">CR3</ref><sp/>=<sp/>(uint16_t)tmpreg;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------<sp/>USART<sp/>BRR<sp/>Configuration<sp/>-----------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>the<sp/>USART<sp/>Baud<sp/>Rate<sp/>-------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><ref refid="group___r_c_c___exported___functions_1ga3e9944fd1ed734275222bbb3e3f29993" kindref="member">RCC_GetClocksFreq</ref>(&amp;RCC_ClocksStatus);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usartxbase<sp/>==<sp/><ref refid="group___peripheral__memory__map_1ga86162ab3f740db9026c1320d46938b4d" kindref="member">USART1_BASE</ref>)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>apbclock<sp/>=<sp/>RCC_ClocksStatus.<ref refid="struct_r_c_c___clocks_type_def_1ad854f0b70a6c4cf6de6dbbdcbc99b856" kindref="member">PCLK2_Frequency</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>apbclock<sp/>=<sp/>RCC_ClocksStatus.<ref refid="struct_r_c_c___clocks_type_def_1add4cfc63c35178d187107edc764e0b8f" kindref="member">PCLK1_Frequency</ref>;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Determine<sp/>the<sp/>integer<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" kindref="member">CR1</ref><sp/>&amp;<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga11495857ca81074790c376317382140f" kindref="member">CR1_OVER8_Set</ref>)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Integer<sp/>part<sp/>computing<sp/>in<sp/>case<sp/>Oversampling<sp/>mode<sp/>is<sp/>8<sp/>Samples<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>integerdivider<sp/>=<sp/>((25<sp/>*<sp/>apbclock)<sp/>/<sp/>(2<sp/>*<sp/>(USART_InitStruct-&gt;<ref refid="struct_u_s_a_r_t___init_type_def_1a6f763cb0e6044f838ee764ce437997b2" kindref="member">USART_BaudRate</ref>)));<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>((USARTx-&gt;CR1<sp/>&amp;<sp/>CR1_OVER8_Set)<sp/>==<sp/>0)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Integer<sp/>part<sp/>computing<sp/>in<sp/>case<sp/>Oversampling<sp/>mode<sp/>is<sp/>16<sp/>Samples<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>integerdivider<sp/>=<sp/>((25<sp/>*<sp/>apbclock)<sp/>/<sp/>(4<sp/>*<sp/>(USART_InitStruct-&gt;<ref refid="struct_u_s_a_r_t___init_type_def_1a6f763cb0e6044f838ee764ce437997b2" kindref="member">USART_BaudRate</ref>)));<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>tmpreg<sp/>=<sp/>(integerdivider<sp/>/<sp/>100)<sp/>&lt;&lt;<sp/>4;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Determine<sp/>the<sp/>fractional<sp/>part<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>fractionaldivider<sp/>=<sp/>integerdivider<sp/>-<sp/>(100<sp/>*<sp/>(tmpreg<sp/>&gt;&gt;<sp/>4));</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Implement<sp/>the<sp/>fractional<sp/>part<sp/>in<sp/>the<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" kindref="member">CR1</ref><sp/>&amp;<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga11495857ca81074790c376317382140f" kindref="member">CR1_OVER8_Set</ref>)<sp/>!=<sp/>0)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg<sp/>|=<sp/>((((fractionaldivider<sp/>*<sp/>8)<sp/>+<sp/>50)<sp/>/<sp/>100))<sp/>&amp;<sp/>((uint8_t)0x07);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>if<sp/>((USARTx-&gt;CR1<sp/>&amp;<sp/>CR1_OVER8_Set)<sp/>==<sp/>0)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>tmpreg<sp/>|=<sp/>((((fractionaldivider<sp/>*<sp/>16)<sp/>+<sp/>50)<sp/>/<sp/>100))<sp/>&amp;<sp/>((uint8_t)0x0F);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>to<sp/>USART<sp/>BRR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2044eb2a0a8a731400d309741bceb2f7" kindref="member">BRR</ref><sp/>=<sp/>(uint16_t)tmpreg;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="group___u_s_a_r_t___private___functions_1ga34e1faa2f312496c16cfd05155f4c8b1" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1ga34e1faa2f312496c16cfd05155f4c8b1" kindref="member">USART_StructInit</ref>(<ref refid="struct_u_s_a_r_t___init_type_def" kindref="compound">USART_InitTypeDef</ref>*<sp/>USART_InitStruct)</highlight></codeline>
<codeline lineno="282"><highlight class="normal">{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>USART_InitStruct<sp/>members<sp/>default<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>USART_InitStruct-&gt;<ref refid="struct_u_s_a_r_t___init_type_def_1a6f763cb0e6044f838ee764ce437997b2" kindref="member">USART_BaudRate</ref><sp/>=<sp/>9600;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>USART_InitStruct-&gt;<ref refid="struct_u_s_a_r_t___init_type_def_1a16d1fb7ccc2b51964f1bcfcbfba6d89d" kindref="member">USART_WordLength</ref><sp/>=<sp/><ref refid="group___u_s_a_r_t___word___length_1ga08682faddc657df85a93627b5a146c25" kindref="member">USART_WordLength_8b</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>USART_InitStruct-&gt;<ref refid="struct_u_s_a_r_t___init_type_def_1ac745bceb79a6c4c2640fd8e8ce6639d6" kindref="member">USART_StopBits</ref><sp/>=<sp/><ref refid="group___u_s_a_r_t___stop___bits_1gae2cb35620ba001f0d63e9e0be93e4a05" kindref="member">USART_StopBits_1</ref>;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>USART_InitStruct-&gt;<ref refid="struct_u_s_a_r_t___init_type_def_1a5ae66aba755bac37c5cf0dfbf529e2ed" kindref="member">USART_Parity</ref><sp/>=<sp/><ref refid="group___u_s_a_r_t___parity_1gab9deebcb0a859360dfec85074abaa3aa" kindref="member">USART_Parity_No</ref><sp/>;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>USART_InitStruct-&gt;<ref refid="struct_u_s_a_r_t___init_type_def_1a7d944d35d7d1fc79a63f249615148584" kindref="member">USART_Mode</ref><sp/>=<sp/><ref refid="group___u_s_a_r_t___mode_1gafefcc3d3c1a1f83b425784fa6289aecf" kindref="member">USART_Mode_Rx</ref><sp/>|<sp/><ref refid="group___u_s_a_r_t___mode_1ga22b2813509a062435ea68d086ec565b4" kindref="member">USART_Mode_Tx</ref>;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>USART_InitStruct-&gt;<ref refid="struct_u_s_a_r_t___init_type_def_1a9996edf3bfd90c36f03b4075969703f5" kindref="member">USART_HardwareFlowControl</ref><sp/>=<sp/><ref refid="group___u_s_a_r_t___hardware___flow___control_1gaf3deaf4429b88db7753ee203f4797bd3" kindref="member">USART_HardwareFlowControl_None</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="group___u_s_a_r_t___private___functions_1gadb50c7a2175c91acd3728f8eefd0c63d" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1gadb50c7a2175c91acd3728f8eefd0c63d" kindref="member">USART_ClockInit</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/><ref refid="struct_u_s_a_r_t___clock_init_type_def" kindref="compound">USART_ClockInitTypeDef</ref>*<sp/>USART_ClockInitStruct)</highlight></codeline>
<codeline lineno="303"><highlight class="normal">{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>uint32_t<sp/>tmpreg<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" kindref="member">IS_USART_123_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___clock_1ga0f1e1ba37690b21b7338ed3b06614cf6" kindref="member">IS_USART_CLOCK</ref>(USART_ClockInitStruct-&gt;<ref refid="struct_u_s_a_r_t___clock_init_type_def_1a229ba7c3f9a4d6d56513e6899f6c6693" kindref="member">USART_Clock</ref>));</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___clock___polarity_1ga833e9d2e85ab84658c7a7c18bd0bc8b9" kindref="member">IS_USART_CPOL</ref>(USART_ClockInitStruct-&gt;<ref refid="struct_u_s_a_r_t___clock_init_type_def_1a01450cba8a40cf9a624b25979dc6aa77" kindref="member">USART_CPOL</ref>));</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___clock___phase_1ga66fa1a3a757025fcd8dd069a90689f88" kindref="member">IS_USART_CPHA</ref>(USART_ClockInitStruct-&gt;<ref refid="struct_u_s_a_r_t___clock_init_type_def_1abda3a2172bd5819e1c207dc0d1c822d8" kindref="member">USART_CPHA</ref>));</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___last___bit_1gaa941695e5612b53e9c2aca6a9fa0d695" kindref="member">IS_USART_LASTBIT</ref>(USART_ClockInitStruct-&gt;<ref refid="struct_u_s_a_r_t___clock_init_type_def_1ab1b28d63d2be6e57849666d78a4467bd" kindref="member">USART_LastBit</ref>));</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------<sp/>USART<sp/>CR2<sp/>Configuration<sp/>-----------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/>tmpreg<sp/>=<sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" kindref="member">CR2</ref>;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>CLKEN,<sp/>CPOL,<sp/>CPHA<sp/>and<sp/>LBCL<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>tmpreg<sp/>&amp;=<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga846e1873279b2b0798cc34d76bd80592" kindref="member">CR2_CLOCK_CLEAR_Mask</ref>;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>the<sp/>USART<sp/>Clock,<sp/>CPOL,<sp/>CPHA<sp/>and<sp/>LastBit<sp/>------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>CLKEN<sp/>bit<sp/>according<sp/>to<sp/>USART_Clock<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>CPOL<sp/>bit<sp/>according<sp/>to<sp/>USART_CPOL<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>CPHA<sp/>bit<sp/>according<sp/>to<sp/>USART_CPHA<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>LBCL<sp/>bit<sp/>according<sp/>to<sp/>USART_LastBit<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>tmpreg<sp/>|=<sp/>(uint32_t)USART_ClockInitStruct-&gt;<ref refid="struct_u_s_a_r_t___clock_init_type_def_1a229ba7c3f9a4d6d56513e6899f6c6693" kindref="member">USART_Clock</ref><sp/>|<sp/>USART_ClockInitStruct-&gt;<ref refid="struct_u_s_a_r_t___clock_init_type_def_1a01450cba8a40cf9a624b25979dc6aa77" kindref="member">USART_CPOL</ref><sp/>|<sp/></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>USART_ClockInitStruct-&gt;<ref refid="struct_u_s_a_r_t___clock_init_type_def_1abda3a2172bd5819e1c207dc0d1c822d8" kindref="member">USART_CPHA</ref><sp/>|<sp/>USART_ClockInitStruct-&gt;<ref refid="struct_u_s_a_r_t___clock_init_type_def_1ab1b28d63d2be6e57849666d78a4467bd" kindref="member">USART_LastBit</ref>;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>to<sp/>USART<sp/>CR2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" kindref="member">CR2</ref><sp/>=<sp/>(uint16_t)tmpreg;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="333" refid="group___u_s_a_r_t___private___functions_1ga59df27d0adda18b16ee28d47672cc724" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1ga59df27d0adda18b16ee28d47672cc724" kindref="member">USART_ClockStructInit</ref>(<ref refid="struct_u_s_a_r_t___clock_init_type_def" kindref="compound">USART_ClockInitTypeDef</ref>*<sp/>USART_ClockInitStruct)</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>USART_ClockInitStruct<sp/>members<sp/>default<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>USART_ClockInitStruct-&gt;<ref refid="struct_u_s_a_r_t___clock_init_type_def_1a229ba7c3f9a4d6d56513e6899f6c6693" kindref="member">USART_Clock</ref><sp/>=<sp/><ref refid="group___u_s_a_r_t___clock_1ga56c12b81d19853c093e0a373d0c52fb5" kindref="member">USART_Clock_Disable</ref>;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>USART_ClockInitStruct-&gt;<ref refid="struct_u_s_a_r_t___clock_init_type_def_1a01450cba8a40cf9a624b25979dc6aa77" kindref="member">USART_CPOL</ref><sp/>=<sp/><ref refid="group___u_s_a_r_t___clock___polarity_1ga194d60b47d8042d39e843c52f3a6aa1a" kindref="member">USART_CPOL_Low</ref>;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>USART_ClockInitStruct-&gt;<ref refid="struct_u_s_a_r_t___clock_init_type_def_1abda3a2172bd5819e1c207dc0d1c822d8" kindref="member">USART_CPHA</ref><sp/>=<sp/><ref refid="group___u_s_a_r_t___clock___phase_1gab6c0fb052fb9bc418cf368c1a0e4643b" kindref="member">USART_CPHA_1Edge</ref>;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/>USART_ClockInitStruct-&gt;<ref refid="struct_u_s_a_r_t___clock_init_type_def_1ab1b28d63d2be6e57849666d78a4467bd" kindref="member">USART_LastBit</ref><sp/>=<sp/><ref refid="group___u_s_a_r_t___last___bit_1ga129c89b9e0dbb3ce43ee92589b3324e5" kindref="member">USART_LastBit_Disable</ref>;</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="351" refid="group___u_s_a_r_t___private___functions_1ga45e51626739c5f22a6567c8a85d1d85e" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1ga45e51626739c5f22a6567c8a85d1d85e" kindref="member">USART_Cmd</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="352"><highlight class="normal">{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>selected<sp/>USART<sp/>by<sp/>setting<sp/>the<sp/>UE<sp/>bit<sp/>in<sp/>the<sp/>CR1<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" kindref="member">CR1</ref><sp/>|=<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga95f5821be56b1a5dbfdd38fdb37ed54c" kindref="member">CR1_UE_Set</ref>;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>selected<sp/>USART<sp/>by<sp/>clearing<sp/>the<sp/>UE<sp/>bit<sp/>in<sp/>the<sp/>CR1<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" kindref="member">CR1</ref><sp/>&amp;=<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga9c75a44192cb3dbbbf509cddfc47481c" kindref="member">CR1_UE_Reset</ref>;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="388" refid="group___u_s_a_r_t___private___functions_1ga6d8f2dd1f34060ae7e386e3e5d56b6f6" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1ga6d8f2dd1f34060ae7e386e3e5d56b6f6" kindref="member">USART_ITConfig</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/>uint16_t<sp/>USART_IT,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="389"><highlight class="normal">{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>uint32_t<sp/>usartreg<sp/>=<sp/>0x00,<sp/>itpos<sp/>=<sp/>0x00,<sp/>itmask<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>uint32_t<sp/>usartxbase<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___interrupt__definition_1ga37ce140eae1938a414ff32afed5ef236" kindref="member">IS_USART_CONFIG_IT</ref>(USART_IT));</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>CTS<sp/>interrupt<sp/>is<sp/>not<sp/>available<sp/>for<sp/>UART4<sp/>and<sp/>UART5<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(USART_IT<sp/>==<sp/><ref refid="group___u_s_a_r_t___interrupt__definition_1gab49efbefaca2921e8cbe8f5146e99dbd" kindref="member">USART_IT_CTS</ref>)</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" kindref="member">IS_USART_123_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>usartxbase<sp/>=<sp/>(uint32_t)USARTx;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>USART<sp/>register<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>usartreg<sp/>=<sp/>(((uint8_t)USART_IT)<sp/>&gt;&gt;<sp/>0x05);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>interrupt<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>itpos<sp/>=<sp/>USART_IT<sp/>&amp;<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga401c753d4de6ab56fcb026c91b8c8487" kindref="member">IT_Mask</ref>;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>itmask<sp/>=<sp/>(((uint32_t)0x01)<sp/>&lt;&lt;<sp/>itpos);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usartreg<sp/>==<sp/>0x01)<sp/></highlight><highlight class="comment">/*<sp/>The<sp/>IT<sp/>is<sp/>in<sp/>CR1<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>usartxbase<sp/>+=<sp/>0x0C;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usartreg<sp/>==<sp/>0x02)<sp/></highlight><highlight class="comment">/*<sp/>The<sp/>IT<sp/>is<sp/>in<sp/>CR2<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>usartxbase<sp/>+=<sp/>0x10;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>IT<sp/>is<sp/>in<sp/>CR3<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>usartxbase<sp/>+=<sp/>0x14;<sp/></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>*(<ref refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" kindref="member">__IO</ref><sp/>uint32_t*)usartxbase<sp/><sp/>|=<sp/>itmask;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>*(<ref refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" kindref="member">__IO</ref><sp/>uint32_t*)usartxbase<sp/>&amp;=<sp/>~itmask;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="448" refid="group___u_s_a_r_t___private___functions_1ga902857f199ebfba21c63d725354af66f" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1ga902857f199ebfba21c63d725354af66f" kindref="member">USART_DMACmd</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/>uint16_t<sp/>USART_DMAReq,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="449"><highlight class="normal">{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___d_m_a___requests_1ga8be7a899d21d82de2ee0a763b4564dc3" kindref="member">IS_USART_DMAREQ</ref>(USART_DMAReq));<sp/><sp/></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));<sp/></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>DMA<sp/>transfer<sp/>for<sp/>selected<sp/>requests<sp/>by<sp/>setting<sp/>the<sp/>DMAT<sp/>and/or</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DMAR<sp/>bits<sp/>in<sp/>the<sp/>USART<sp/>CR3<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" kindref="member">CR3</ref><sp/>|=<sp/>USART_DMAReq;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>DMA<sp/>transfer<sp/>for<sp/>selected<sp/>requests<sp/>by<sp/>clearing<sp/>the<sp/>DMAT<sp/>and/or</highlight></codeline>
<codeline lineno="463"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DMAR<sp/>bits<sp/>in<sp/>the<sp/>USART<sp/>CR3<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" kindref="member">CR3</ref><sp/>&amp;=<sp/>(uint16_t)~USART_DMAReq;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal">}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="group___u_s_a_r_t___private___functions_1ga65ec9928817f3f031dd9a4dfc95d6666" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1ga65ec9928817f3f031dd9a4dfc95d6666" kindref="member">USART_SetAddress</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/>uint8_t<sp/>USART_Address)</highlight></codeline>
<codeline lineno="477"><highlight class="normal">{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___flags_1ga194e771c3324f9e130b2887c701460a7" kindref="member">IS_USART_ADDRESS</ref>(USART_Address));<sp/></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>USART<sp/>address<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" kindref="member">CR2</ref><sp/>&amp;=<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga080c343a5a95d4419789b94405c27764" kindref="member">CR2_Address_Mask</ref>;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[ILG]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>defined<sp/>(<sp/>__GNUC__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wconversion&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>USART<sp/>address<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" kindref="member">CR2</ref><sp/>|=<sp/>USART_Address;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[ILG]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>defined<sp/>(<sp/>__GNUC__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="511" refid="group___u_s_a_r_t___private___functions_1ga4965417c2412c36e462fcad50a8d5393" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1ga4965417c2412c36e462fcad50a8d5393" kindref="member">USART_WakeUpConfig</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/>uint16_t<sp/>USART_WakeUp)</highlight></codeline>
<codeline lineno="512"><highlight class="normal">{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___wake_up__methods_1ga3611be417bdb82f42dc2ca17584271f9" kindref="member">IS_USART_WAKEUP</ref>(USART_WakeUp));</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" kindref="member">CR1</ref><sp/>&amp;=<sp/><ref refid="group___u_s_a_r_t___private___defines_1gae4045dea092c3cbfe07d14fef39195ce" kindref="member">CR1_WAKE_Mask</ref>;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" kindref="member">CR1</ref><sp/>|=<sp/>USART_WakeUp;</highlight></codeline>
<codeline lineno="519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="530" refid="group___u_s_a_r_t___private___functions_1gac27b78ce445a16fe33851d2f87781c02" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1gac27b78ce445a16fe33851d2f87781c02" kindref="member">USART_ReceiverWakeUpCmd</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="531"><highlight class="normal">{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));<sp/></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>USART<sp/>mute<sp/>mode<sp/><sp/>by<sp/>setting<sp/>the<sp/>RWU<sp/>bit<sp/>in<sp/>the<sp/>CR1<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" kindref="member">CR1</ref><sp/>|=<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga5cb566b7c5e126e5ef11dd25bba50ffa" kindref="member">CR1_RWU_Set</ref>;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>USART<sp/>mute<sp/>mode<sp/>by<sp/>clearing<sp/>the<sp/>RWU<sp/>bit<sp/>in<sp/>the<sp/>CR1<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" kindref="member">CR1</ref><sp/>&amp;=<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga064a46d19ffffddd410e969798d335ee" kindref="member">CR1_RWU_Reset</ref>;</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal">}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="559" refid="group___u_s_a_r_t___private___functions_1ga7bc2d291831cbc5e53e73337308029b5" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1ga7bc2d291831cbc5e53e73337308029b5" kindref="member">USART_LINBreakDetectLengthConfig</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/>uint16_t<sp/>USART_LINBreakDetectLength)</highlight></codeline>
<codeline lineno="560"><highlight class="normal">{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___l_i_n___break___detection___length_1gaa7a45d542b1df5da1160777ad4a80d72" kindref="member">IS_USART_LIN_BREAK_DETECT_LENGTH</ref>(USART_LINBreakDetectLength));</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" kindref="member">CR2</ref><sp/>&amp;=<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga9b365a89de44809a52895090e9050646" kindref="member">CR2_LBDL_Mask</ref>;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" kindref="member">CR2</ref><sp/>|=<sp/>USART_LINBreakDetectLength;<sp/><sp/></highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="578" refid="group___u_s_a_r_t___private___functions_1ga9fdd6296f4ca4acdfcbd58bf56bd4185" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1ga9fdd6296f4ca4acdfcbd58bf56bd4185" kindref="member">USART_LINCmd</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="579"><highlight class="normal">{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>LIN<sp/>mode<sp/>by<sp/>setting<sp/>the<sp/>LINEN<sp/>bit<sp/>in<sp/>the<sp/>CR2<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" kindref="member">CR2</ref><sp/>|=<sp/><ref refid="group___u_s_a_r_t___private___defines_1gabc3f2b022d70a11fd0605e58cb23023f" kindref="member">CR2_LINEN_Set</ref>;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>LIN<sp/>mode<sp/>by<sp/>clearing<sp/>the<sp/>LINEN<sp/>bit<sp/>in<sp/>the<sp/>CR2<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" kindref="member">CR2</ref><sp/>&amp;=<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga7b8fbe7be4c85c16ea1c1e3c9fa95b05" kindref="member">CR2_LINEN_Reset</ref>;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="604" refid="group___u_s_a_r_t___private___functions_1ga0b43d42da9540f446d494bf69823c6fb" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1ga0b43d42da9540f446d494bf69823c6fb" kindref="member">USART_SendData</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/>uint16_t<sp/>Data)</highlight></codeline>
<codeline lineno="605"><highlight class="normal">{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___flags_1gafd6307e41818e076d31f3c24cb5ba135" kindref="member">IS_USART_DATA</ref>(Data));<sp/></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Transmit<sp/>Data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1accee34aaec89aad4aeef512bba173ae5" kindref="member">DR</ref><sp/>=<sp/>(Data<sp/>&amp;<sp/>(uint16_t)0x01FF);</highlight></codeline>
<codeline lineno="612"><highlight class="normal">}</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="621" refid="group___u_s_a_r_t___private___functions_1gac67a91845b0b1d54d31bdfb1c5e9867c" refkind="member"><highlight class="normal">uint16_t<sp/><ref refid="group___u_s_a_r_t___private___functions_1gac67a91845b0b1d54d31bdfb1c5e9867c" kindref="member">USART_ReceiveData</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx)</highlight></codeline>
<codeline lineno="622"><highlight class="normal">{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Receive<sp/>Data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)(USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1accee34aaec89aad4aeef512bba173ae5" kindref="member">DR</ref><sp/>&amp;<sp/>(uint16_t)0x01FF);</highlight></codeline>
<codeline lineno="628"><highlight class="normal">}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="637" refid="group___u_s_a_r_t___private___functions_1ga39a3d33e23ee28529fa8f7259ce6811e" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1ga39a3d33e23ee28529fa8f7259ce6811e" kindref="member">USART_SendBreak</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx)</highlight></codeline>
<codeline lineno="638"><highlight class="normal">{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Send<sp/>break<sp/>characters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" kindref="member">CR1</ref><sp/>|=<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga2813b7fa1263aecfeefa48f8a55938b9" kindref="member">CR1_SBK_Set</ref>;</highlight></codeline>
<codeline lineno="644"><highlight class="normal">}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="653" refid="group___u_s_a_r_t___private___functions_1gac4a35c6acd71ae7e0d67c1f03f0a8777" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1gac4a35c6acd71ae7e0d67c1f03f0a8777" kindref="member">USART_SetGuardTime</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/>uint8_t<sp/>USART_GuardTime)</highlight></codeline>
<codeline lineno="654"><highlight class="normal">{<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" kindref="member">IS_USART_123_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>USART<sp/>Guard<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1abe51502097b1fd281d0a2a1b157d769e" kindref="member">GTPR</ref><sp/>&amp;=<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga2fe593d0c308e2245bb66905930b3ebb" kindref="member">GTPR_LSB_Mask</ref>;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>USART<sp/>guard<sp/>time<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1abe51502097b1fd281d0a2a1b157d769e" kindref="member">GTPR</ref><sp/>|=<sp/>(uint16_t)((uint16_t)USART_GuardTime<sp/>&lt;&lt;<sp/>0x08);</highlight></codeline>
<codeline lineno="662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="673" refid="group___u_s_a_r_t___private___functions_1gaf5da8f2eee8245425584d85d4f62cc33" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1gaf5da8f2eee8245425584d85d4f62cc33" kindref="member">USART_SetPrescaler</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/>uint8_t<sp/>USART_Prescaler)</highlight></codeline>
<codeline lineno="674"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>USART<sp/>prescaler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1abe51502097b1fd281d0a2a1b157d769e" kindref="member">GTPR</ref><sp/>&amp;=<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga405b4222892bafdf1d084de5efd24d70" kindref="member">GTPR_MSB_Mask</ref>;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[ILG]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>defined<sp/>(<sp/>__GNUC__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wconversion&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>USART<sp/>prescaler<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1abe51502097b1fd281d0a2a1b157d769e" kindref="member">GTPR</ref><sp/>|=<sp/>USART_Prescaler;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[ILG]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>defined<sp/>(<sp/>__GNUC__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal">}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="704" refid="group___u_s_a_r_t___private___functions_1gabd1347e244c623447151ba3a5e986c5f" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1gabd1347e244c623447151ba3a5e986c5f" kindref="member">USART_SmartCardCmd</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="705"><highlight class="normal">{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" kindref="member">IS_USART_123_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>SC<sp/>mode<sp/>by<sp/>setting<sp/>the<sp/>SCEN<sp/>bit<sp/>in<sp/>the<sp/>CR3<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" kindref="member">CR3</ref><sp/>|=<sp/><ref refid="group___u_s_a_r_t___private___defines_1gab47df7b36b4f1315953f6aa45de2fb61" kindref="member">CR3_SCEN_Set</ref>;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>SC<sp/>mode<sp/>by<sp/>clearing<sp/>the<sp/>SCEN<sp/>bit<sp/>in<sp/>the<sp/>CR3<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" kindref="member">CR3</ref><sp/>&amp;=<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga294c473dc7f8ff3e9cbaa0675c8c75f3" kindref="member">CR3_SCEN_Reset</ref>;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal">}</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="729" refid="group___u_s_a_r_t___private___functions_1ga62e22f47e38aa53f2edce8771f7a5dfa" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1ga62e22f47e38aa53f2edce8771f7a5dfa" kindref="member">USART_SmartCardNACKCmd</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="730"><highlight class="normal">{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" kindref="member">IS_USART_123_PERIPH</ref>(USARTx));<sp/><sp/></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>NACK<sp/>transmission<sp/>by<sp/>setting<sp/>the<sp/>NACK<sp/>bit<sp/>in<sp/>the<sp/>CR3<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" kindref="member">CR3</ref><sp/>|=<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga950cc9f7251709854754add7d9aaca60" kindref="member">CR3_NACK_Set</ref>;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>NACK<sp/>transmission<sp/>by<sp/>clearing<sp/>the<sp/>NACK<sp/>bit<sp/>in<sp/>the<sp/>CR3<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" kindref="member">CR3</ref><sp/>&amp;=<sp/><ref refid="group___u_s_a_r_t___private___defines_1gabed0cac273ff4faf009e8c35243c1e10" kindref="member">CR3_NACK_Reset</ref>;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal">}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="755" refid="group___u_s_a_r_t___private___functions_1gaaa23b05fe0e1896bad90da7f82750831" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1gaaa23b05fe0e1896bad90da7f82750831" kindref="member">USART_HalfDuplexCmd</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="756"><highlight class="normal">{</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>Half-Duplex<sp/>mode<sp/>by<sp/>setting<sp/>the<sp/>HDSEL<sp/>bit<sp/>in<sp/>the<sp/>CR3<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" kindref="member">CR3</ref><sp/>|=<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga0c5c30ea9777d0c8c6f1b5ff85dfca3c" kindref="member">CR3_HDSEL_Set</ref>;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>Half-Duplex<sp/>mode<sp/>by<sp/>clearing<sp/>the<sp/>HDSEL<sp/>bit<sp/>in<sp/>the<sp/>CR3<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" kindref="member">CR3</ref><sp/>&amp;=<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga762c72448ba24f3487dfa457a8dcc9fc" kindref="member">CR3_HDSEL_Reset</ref>;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal">}</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="786" refid="group___u_s_a_r_t___private___functions_1ga3897bab07491d9239f8a238a9a7cddea" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1ga3897bab07491d9239f8a238a9a7cddea" kindref="member">USART_OverSampling8Cmd</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="787"><highlight class="normal">{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>8x<sp/>Oversampling<sp/>mode<sp/>by<sp/>setting<sp/>the<sp/>OVER8<sp/>bit<sp/>in<sp/>the<sp/>CR1<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" kindref="member">CR1</ref><sp/>|=<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga11495857ca81074790c376317382140f" kindref="member">CR1_OVER8_Set</ref>;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>8x<sp/>Oversampling<sp/>mode<sp/>by<sp/>clearing<sp/>the<sp/>OVER8<sp/>bit<sp/>in<sp/>the<sp/>CR1<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" kindref="member">CR1</ref><sp/>&amp;=<sp/><ref refid="group___u_s_a_r_t___private___defines_1gaf84165f2974000906c495b3c27dc5121" kindref="member">CR1_OVER8_Reset</ref>;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="813" refid="group___u_s_a_r_t___private___functions_1ga3ed89ea8765d851510cfe90f7d90cbbb" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1ga3ed89ea8765d851510cfe90f7d90cbbb" kindref="member">USART_OneBitMethodCmd</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="814"><highlight class="normal">{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>one<sp/>bit<sp/>method<sp/>by<sp/>setting<sp/>the<sp/>ONEBITE<sp/>bit<sp/>in<sp/>the<sp/>CR3<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" kindref="member">CR3</ref><sp/>|=<sp/><ref refid="group___u_s_a_r_t___private___defines_1gac512024dda541435acfe0b50de925105" kindref="member">CR3_ONEBITE_Set</ref>;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>tthe<sp/>one<sp/>bit<sp/>method<sp/>by<sp/>clearing<sp/>the<sp/>ONEBITE<sp/>bit<sp/>in<sp/>the<sp/>CR3<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" kindref="member">CR3</ref><sp/>&amp;=<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga55dc289819dde550630df98267bbef52" kindref="member">CR3_ONEBITE_Reset</ref>;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal">}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="842" refid="group___u_s_a_r_t___private___functions_1ga81a0cd36199040bf6d266b57babd678e" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1ga81a0cd36199040bf6d266b57babd678e" kindref="member">USART_IrDAConfig</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/>uint16_t<sp/>USART_IrDAMode)</highlight></codeline>
<codeline lineno="843"><highlight class="normal">{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___ir_d_a___low___power_1ga7790838ff8ee71089da2c0e5bceee569" kindref="member">IS_USART_IRDA_MODE</ref>(USART_IrDAMode));</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" kindref="member">CR3</ref><sp/>&amp;=<sp/><ref refid="group___u_s_a_r_t___private___defines_1gaea5d8d002a34c3a587719533db2c17f9" kindref="member">CR3_IRLP_Mask</ref>;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" kindref="member">CR3</ref><sp/>|=<sp/>USART_IrDAMode;</highlight></codeline>
<codeline lineno="850"><highlight class="normal">}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight></codeline>
<codeline lineno="861" refid="group___u_s_a_r_t___private___functions_1gabff56ebb494fdfadcc6ef4fe9ac8dd24" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1gabff56ebb494fdfadcc6ef4fe9ac8dd24" kindref="member">USART_IrDACmd</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="862"><highlight class="normal">{</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>IrDA<sp/>mode<sp/>by<sp/>setting<sp/>the<sp/>IREN<sp/>bit<sp/>in<sp/>the<sp/>CR3<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" kindref="member">CR3</ref><sp/>|=<sp/><ref refid="group___u_s_a_r_t___private___defines_1gad5dd1d08f3836f9a3c3f3cc0c66a8b8f" kindref="member">CR3_IREN_Set</ref>;</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>IrDA<sp/>mode<sp/>by<sp/>clearing<sp/>the<sp/>IREN<sp/>bit<sp/>in<sp/>the<sp/>CR3<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" kindref="member">CR3</ref><sp/>&amp;=<sp/><ref refid="group___u_s_a_r_t___private___defines_1gad1520358de97e48fe18780e5cc5296bd" kindref="member">CR3_IREN_Reset</ref>;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal">}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="898" refid="group___u_s_a_r_t___private___functions_1ga144630722defc9e312f0ad280b68e9da" refkind="member"><highlight class="normal"><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref><sp/><ref refid="group___u_s_a_r_t___private___functions_1ga144630722defc9e312f0ad280b68e9da" kindref="member">USART_GetFlagStatus</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/>uint16_t<sp/>USART_FLAG)</highlight></codeline>
<codeline lineno="899"><highlight class="normal">{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___flags_1ga3e20747ce7c97a36718933c0cb3dac29" kindref="member">IS_USART_FLAG</ref>(USART_FLAG));</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>CTS<sp/>flag<sp/>is<sp/>not<sp/>available<sp/>for<sp/>UART4<sp/>and<sp/>UART5<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(USART_FLAG<sp/>==<sp/><ref refid="group___u_s_a_r_t___flags_1ga94b7272319cca88a65075d5cb6048441" kindref="member">USART_FLAG_CTS</ref>)</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" kindref="member">IS_USART_123_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a3f1fd9f0c004d3087caeba4815faa41c" kindref="member">SR</ref><sp/>&amp;<sp/>USART_FLAG)<sp/>!=<sp/>(uint16_t)<ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>)</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" kindref="member">SET</ref>;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bitstatus;</highlight></codeline>
<codeline lineno="919"><highlight class="normal">}</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="947" refid="group___u_s_a_r_t___private___functions_1gad962e148fc466ae1b45b288f6c91d966" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1gad962e148fc466ae1b45b288f6c91d966" kindref="member">USART_ClearFlag</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/>uint16_t<sp/>USART_FLAG)</highlight></codeline>
<codeline lineno="948"><highlight class="normal">{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___flags_1gadc905fdce8defba31c00c95554a26bc3" kindref="member">IS_USART_CLEAR_FLAG</ref>(USART_FLAG));</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>CTS<sp/>flag<sp/>is<sp/>not<sp/>available<sp/>for<sp/>UART4<sp/>and<sp/>UART5<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((USART_FLAG<sp/>&amp;<sp/><ref refid="group___u_s_a_r_t___flags_1ga94b7272319cca88a65075d5cb6048441" kindref="member">USART_FLAG_CTS</ref>)<sp/>==<sp/>USART_FLAG_CTS)</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" kindref="member">IS_USART_123_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/>}<sp/></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a3f1fd9f0c004d3087caeba4815faa41c" kindref="member">SR</ref><sp/>=<sp/>(uint16_t)~USART_FLAG;</highlight></codeline>
<codeline lineno="959"><highlight class="normal">}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="980" refid="group___u_s_a_r_t___private___functions_1ga93d8f031241bcdbe938d091a85295445" refkind="member"><highlight class="normal"><ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref><sp/><ref refid="group___u_s_a_r_t___private___functions_1ga93d8f031241bcdbe938d091a85295445" kindref="member">USART_GetITStatus</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/>uint16_t<sp/>USART_IT)</highlight></codeline>
<codeline lineno="981"><highlight class="normal">{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>uint32_t<sp/>bitpos<sp/>=<sp/>0x00,<sp/>itmask<sp/>=<sp/>0x00,<sp/>usartreg<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___interrupt__definition_1ga9a8014793a383d710eaaf4185f2b795d" kindref="member">IS_USART_GET_IT</ref>(USART_IT));</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>CTS<sp/>interrupt<sp/>is<sp/>not<sp/>available<sp/>for<sp/>UART4<sp/>and<sp/>UART5<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(USART_IT<sp/>==<sp/><ref refid="group___u_s_a_r_t___interrupt__definition_1gab49efbefaca2921e8cbe8f5146e99dbd" kindref="member">USART_IT_CTS</ref>)</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" kindref="member">IS_USART_123_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>USART<sp/>register<sp/>index<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>usartreg<sp/>=<sp/>(((uint8_t)USART_IT)<sp/>&gt;&gt;<sp/>0x05);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>interrupt<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/>itmask<sp/>=<sp/>USART_IT<sp/>&amp;<sp/><ref refid="group___u_s_a_r_t___private___defines_1ga401c753d4de6ab56fcb026c91b8c8487" kindref="member">IT_Mask</ref>;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/>itmask<sp/>=<sp/>(uint32_t)0x01<sp/>&lt;&lt;<sp/>itmask;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usartreg<sp/>==<sp/>0x01)<sp/></highlight><highlight class="comment">/*<sp/>The<sp/>IT<sp/><sp/>is<sp/>in<sp/>CR1<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>itmask<sp/>&amp;=<sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" kindref="member">CR1</ref>;</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(usartreg<sp/>==<sp/>0x02)<sp/></highlight><highlight class="comment">/*<sp/>The<sp/>IT<sp/><sp/>is<sp/>in<sp/>CR2<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>itmask<sp/>&amp;=<sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" kindref="member">CR2</ref>;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>IT<sp/><sp/>is<sp/>in<sp/>CR3<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>itmask<sp/>&amp;=<sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" kindref="member">CR3</ref>;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>bitpos<sp/>=<sp/>USART_IT<sp/>&gt;&gt;<sp/>0x08;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/>bitpos<sp/>=<sp/>(uint32_t)0x01<sp/>&lt;&lt;<sp/>bitpos;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>bitpos<sp/>&amp;=<sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a3f1fd9f0c004d3087caeba4815faa41c" kindref="member">SR</ref>;</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((itmask<sp/>!=<sp/>(uint16_t)<ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>)&amp;&amp;(bitpos<sp/>!=<sp/>(uint16_t)<ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>))</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" kindref="member">SET</ref>;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bitstatus;<sp/><sp/></highlight></codeline>
<codeline lineno="1025"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054" refid="group___u_s_a_r_t___private___functions_1ga1fc25d0338695063be5e50156955d9bc" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___u_s_a_r_t___private___functions_1ga1fc25d0338695063be5e50156955d9bc" kindref="member">USART_ClearITPendingBit</ref>(<ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref>*<sp/>USARTx,<sp/>uint16_t<sp/>USART_IT)</highlight></codeline>
<codeline lineno="1055"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/>uint16_t<sp/>bitpos<sp/>=<sp/>0x00,<sp/>itmask<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" kindref="member">IS_USART_ALL_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___interrupt__definition_1ga3ceda175140b84eea02a2261ebda4efd" kindref="member">IS_USART_CLEAR_IT</ref>(USART_IT));</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>CTS<sp/>interrupt<sp/>is<sp/>not<sp/>available<sp/>for<sp/>UART4<sp/>and<sp/>UART5<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(USART_IT<sp/>==<sp/><ref refid="group___u_s_a_r_t___interrupt__definition_1gab49efbefaca2921e8cbe8f5146e99dbd" kindref="member">USART_IT_CTS</ref>)</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" kindref="member">IS_USART_123_PERIPH</ref>(USARTx));</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/>bitpos<sp/>=<sp/>USART_IT<sp/>&gt;&gt;<sp/>0x08;</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[ILG]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>defined<sp/>(<sp/>__GNUC__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wconversion&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/>itmask<sp/>=<sp/>((uint16_t)0x01<sp/>&lt;&lt;<sp/>(uint16_t)bitpos);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[ILG]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>defined<sp/>(<sp/>__GNUC__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/>USARTx-&gt;<ref refid="struct_u_s_a_r_t___type_def_1a3f1fd9f0c004d3087caeba4815faa41c" kindref="member">SR</ref><sp/>=<sp/>(uint16_t)~itmask;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1093"><highlight class="comment">/*******************<sp/>(C)<sp/>COPYRIGHT<sp/>2011<sp/>STMicroelectronics<sp/>*****END<sp/>OF<sp/>FILE****/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c"/>
  </compounddef>
</doxygen>
