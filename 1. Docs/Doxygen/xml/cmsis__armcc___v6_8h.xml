<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="cmsis__armcc___v6_8h" kind="file" language="C++">
    <compoundname>cmsis_armcc_V6.h</compoundname>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___c_m_s_i_s___core___instruction_interface_1gabc17e391c13c71702366c67cba39c276" prot="public" static="no">
        <name>__CMSIS_GCC_OUT_REG</name>
        <param><defname>r</defname></param>
        <initializer>&quot;=r&quot; (r)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" line="746" column="10" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" bodystart="746" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_m_s_i_s___core___instruction_interface_1ga9d94dee7402367961d2cf0accc00fd97" prot="public" static="no">
        <name>__CMSIS_GCC_USE_REG</name>
        <param><defname>r</defname></param>
        <initializer>&quot;r&quot; (r)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" line="747" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" bodystart="747" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_m_s_i_s___core___instruction_interface_1gabd585ddc865fb9b7f2493af1eee1a572" prot="public" static="no">
        <name>__NOP</name>
        <initializer>__builtin_arm_nop</initializer>
        <briefdescription>
<para>No Operation. </para>        </briefdescription>
        <detaileddescription>
<para>No Operation does nothing. This instruction can be used for code alignment purposes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" line="754" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" bodystart="754" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_m_s_i_s___core___instruction_interface_1gad23bf2b78a9a4524157c9de0d30b7448" prot="public" static="no">
        <name>__WFI</name>
        <initializer>__builtin_arm_wfi</initializer>
        <briefdescription>
<para>Wait For Interrupt. </para>        </briefdescription>
        <detaileddescription>
<para>Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" line="760" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" bodystart="760" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_m_s_i_s___core___instruction_interface_1gaac6cc7dd4325d9cb40d3290fa5244b3d" prot="public" static="no">
        <name>__WFE</name>
        <initializer>__builtin_arm_wfe</initializer>
        <briefdescription>
<para>Wait For Event. </para>        </briefdescription>
        <detaileddescription>
<para>Wait For Event is a hint instruction that permits the processor to enter a low-power state until one of a number of events occurs. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" line="768" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" bodystart="768" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_m_s_i_s___core___instruction_interface_1gaab4f296d0022b4b10dc0976eb22052f9" prot="public" static="no">
        <name>__SEV</name>
        <initializer>__builtin_arm_sev</initializer>
        <briefdescription>
<para>Send Event. </para>        </briefdescription>
        <detaileddescription>
<para>Send Event is a hint instruction. It causes an event to be signaled to the CPU. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" line="775" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" bodystart="775" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_m_s_i_s___core___instruction_interface_1gaad233022e850a009fc6f7602be1182f6" prot="public" static="no">
        <name>__ISB</name>
        <param></param>
        <initializer>__builtin_arm_isb(0xF);</initializer>
        <briefdescription>
<para>Instruction Synchronization Barrier. </para>        </briefdescription>
        <detaileddescription>
<para>Instruction Synchronization Barrier flushes the pipeline in the processor, so that all instructions following the ISB are fetched from cache or memory, after the instruction has been completed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" line="784" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" bodystart="784" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_m_s_i_s___core___instruction_interface_1ga067d257a2b34565410acefb5afef2203" prot="public" static="no">
        <name>__DSB</name>
        <param></param>
        <initializer>__builtin_arm_dsb(0xF);</initializer>
        <briefdescription>
<para>Data Synchronization Barrier. </para>        </briefdescription>
        <detaileddescription>
<para>Acts as a special kind of Data Memory Barrier. It completes when all explicit memory accesses before this instruction complete. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" line="791" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" bodystart="791" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_m_s_i_s___core___instruction_interface_1ga671101179b5943990785f36f8c1e2269" prot="public" static="no">
        <name>__DMB</name>
        <param></param>
        <initializer>__builtin_arm_dmb(0xF);</initializer>
        <briefdescription>
<para>Data Memory Barrier. </para>        </briefdescription>
        <detaileddescription>
<para>Ensures the apparent order of the explicit memory operations before and after the instruction, without ensuring their completion. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" line="799" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" bodystart="799" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_m_s_i_s___core___instruction_interface_1ga14f54807872c0f5e05604c4924abfdae" prot="public" static="no">
        <name>__REV</name>
        <initializer>__builtin_bswap32</initializer>
        <briefdescription>
<para>Reverse byte order (32 bit) </para>        </briefdescription>
        <detaileddescription>
<para>Reverses the byte order in integer value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to reverse </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reversed value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" line="808" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" bodystart="808" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_m_s_i_s___core___instruction_interface_1ga4e3acd41e7667cdf65ffcd8c76a8613f" prot="public" static="no">
        <name>__REV16</name>
        <initializer>__builtin_bswap16                           /* ToDo:  ARMCC_V6: check if __builtin_bswap16 could be used */</initializer>
        <briefdescription>
<para>Reverse byte order (16 bit) </para>        </briefdescription>
        <detaileddescription>
<para>Reverses the byte order in two unsigned short values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to reverse </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reversed value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" line="817" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" bodystart="817" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_m_s_i_s___core___instruction_interface_1ga15ea6bd3c507d3e81c3b3a1258e46397" prot="public" static="no">
        <name>__BKPT</name>
        <param><defname>value</defname></param>
        <initializer>__ASM <ref refid="semihosting_8h_1a65e6ad7ed1b130fda2cf7f6a0861fca9" kindref="member">volatile</ref> (&quot;bkpt &quot;#value)</initializer>
        <briefdescription>
<para>Breakpoint. </para>        </briefdescription>
        <detaileddescription>
<para>Causes the processor to enter Debug state. Debug tools can use this to investigate system state when the instruction at a particular address is reached. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>is ignored by the processor. If required, a debugger can use it to store additional information about the breakpoint. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" line="865" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" bodystart="865" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_m_s_i_s___core___instruction_interface_1ga5d5bb1527e042be4a9fa5a33f65cc248" prot="public" static="no">
        <name>__CLZ</name>
        <initializer>__builtin_clz</initializer>
        <briefdescription>
<para>Count leading zeros. </para>        </briefdescription>
        <detaileddescription>
<para>Counts the number of leading zeros of a data value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to count the leading zeros </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of leading zeros in value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" line="903" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" bodystart="903" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t op2</definition>
        <argsstring></argsstring>
        <name>op2</name>
        <initializer>{
  return (op1 &gt;&gt; op2) | (op1 &lt;&lt; (32U - op2))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" line="852" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" bodystart="853" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>__attribute__</definition>
        <argsstring>((always_inline)) __STATIC_INLINE void __enable_irq(void)</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(always_inline)</type>
        </param>
        <briefdescription>
<para>Enable IRQ Interrupts. </para>        </briefdescription>
        <detaileddescription>
<para>Set Priority Mask.</para><para>Get Priority Mask.</para><para>Set Main Stack Pointer.</para><para>Get Main Stack Pointer.</para><para>Set Process Stack Pointer.</para><para>Get Process Stack Pointer.</para><para>Get xPSR Register.</para><para>Get APSR Register.</para><para>Get IPSR Register.</para><para>Set Control Register.</para><para>Get Control Register.</para><para>Disable IRQ Interrupts.</para><para>Enables IRQ interrupts by clearing the I-bit in the CPSR. Can only be executed in Privileged modes.</para><para>Disables IRQ interrupts by setting the I-bit in the CPSR. Can only be executed in Privileged modes.</para><para>Returns the content of the Control Register. <simplesect kind="return"><para>Control Register value</para></simplesect>
Writes the given value to the Control Register. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">control</parametername>
</parameternamelist>
<parameterdescription>
<para>Control Register value to set</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns the content of the IPSR Register. <simplesect kind="return"><para>IPSR Register value</para></simplesect>
Returns the content of the APSR Register. <simplesect kind="return"><para>APSR Register value</para></simplesect>
Returns the content of the xPSR Register. <simplesect kind="return"><para>xPSR Register value</para></simplesect>
Returns the current value of the Process Stack Pointer (PSP). <simplesect kind="return"><para>PSP Register value</para></simplesect>
Assigns the given value to the Process Stack Pointer (PSP). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">topOfProcStack</parametername>
</parameternamelist>
<parameterdescription>
<para>Process Stack Pointer value to set</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns the current value of the Main Stack Pointer (MSP). <simplesect kind="return"><para>MSP Register value</para></simplesect>
Assigns the given value to the Main Stack Pointer (MSP). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">topOfMainStack</parametername>
</parameternamelist>
<parameterdescription>
<para>Main Stack Pointer value to set</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns the current state of the priority mask bit from the Priority Mask Register. <simplesect kind="return"><para>Priority Mask value</para></simplesect>
Assigns the given value to the Priority Mask Register. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">priMask</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority Mask </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" line="50" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h" bodystart="50" bodyend="53"/>
        <references refid="group___c_m_s_i_s___core___reg_acc_functions_1ga5fe64567d5bf0a81c118374e9a3a4598" compoundref="cmsis__armcc_8h" startline="57" endline="61">__get_CONTROL</references>
        <references refid="group___c_m_s_i_s___core___reg_acc_functions_1ga558df7eeb0a34765e0b54d9853d08484" compoundref="cmsis__armcc_8h" startline="69" endline="73">__set_CONTROL</references>
        <references refid="group___c_m_s_i_s___core___reg_acc_functions_1ga2c18685a915eb9b7513a907c2b866636" compoundref="cmsis__armcc_8h" startline="81" endline="85">__get_IPSR</references>
        <references refid="group___c_m_s_i_s___core___reg_acc_functions_1gaf082254959c727c663f2334021f1a98a" compoundref="cmsis__armcc_8h" startline="93" endline="97">__get_APSR</references>
        <references refid="group___c_m_s_i_s___core___reg_acc_functions_1ga94c675a736d4754a5f73d8748b24aa11" compoundref="cmsis__armcc_8h" startline="105" endline="109">__get_xPSR</references>
        <references refid="group___c_m_s_i_s___core___reg_acc_functions_1ga0c569cbb49336f8d638686f9103047aa" compoundref="cmsis__armcc_8h" startline="117" endline="121">__get_PSP</references>
        <references refid="group___c_m_s_i_s___core___reg_acc_functions_1gab145e35dbaf6868d3a17a8ad360fe379" compoundref="cmsis__armcc_8h" startline="129" endline="133">__set_PSP</references>
        <references refid="group___c_m_s_i_s___core___reg_acc_functions_1gac5267c10c9b15b5349eea0a959ea014c" compoundref="cmsis__armcc_8h" startline="141" endline="145">__get_MSP</references>
        <references refid="group___c_m_s_i_s___core___reg_acc_functions_1ga1ff33c0b5ed0e687dd7967a1dd283d5f" compoundref="cmsis__armcc_8h" startline="153" endline="157">__set_MSP</references>
        <references refid="group___c_m_s_i_s___core___reg_acc_functions_1gac9e3a67ff722261b89c77ebe49b6f9a7" compoundref="cmsis__armcc_8h" startline="165" endline="169">__get_PRIMASK</references>
        <references refid="group___c_m_s_i_s___core___reg_acc_functions_1ga42e74e3fffe1a2d93db1de04d9260929" compoundref="cmsis__armcc_8h" startline="177" endline="181">__set_PRIMASK</references>
        <references refid="semihosting_8h_1aacce635d68067370c70caa2381ea1040" compoundref="semihosting_8h" startline="102">value</references>
      </memberdef>
      <memberdef kind="function" id="group___c_m_s_i_s___core___instruction_interface_1gade0870dc150fccdf0a5ae2d3300b2954" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>void __attribute__</definition>
        <argsstring>((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)</argsstring>
        <name>__attribute__</name>
        <param>
          <type>(always_inline)</type>
        </param>
        <initializer>{
    return 0</initializer>
        <briefdescription>
<para>Reverse bit order of value. </para>        </briefdescription>
        <detaileddescription>
<para>Enable IRQ Interrupts.</para><para>Set Priority Mask.</para><para>Get Priority Mask.</para><para>Set Main Stack Pointer.</para><para>Get Main Stack Pointer.</para><para>Set Process Stack Pointer.</para><para>Get Process Stack Pointer.</para><para>Get xPSR Register.</para><para>Get APSR Register.</para><para>Get IPSR Register.</para><para>Set Control Register.</para><para>Get Control Register.</para><para>Disable IRQ Interrupts.</para><para>Reverse byte order (16 bit)</para><para>Reverse byte order (32 bit)</para><para>Data Memory Barrier.</para><para>Data Synchronization Barrier.</para><para>Instruction Synchronization Barrier.</para><para>Send Event.</para><para>Wait For Event.</para><para>Wait For Interrupt.</para><para>No Operation.</para><para>Rotate Right in unsigned value (32 bit)</para><para>Reverse byte order in signed short value.</para><para>Reverses the bit order of the given value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to reverse </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reversed value</para></simplesect>
Reverses the byte order in a signed short value with sign extension to integer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to reverse </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reversed value</para></simplesect>
Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">op1</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to rotate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">op2</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of Bits to rotate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Rotated value</para></simplesect>
No Operation does nothing. This instruction can be used for code alignment purposes.</para><para>Wait For Interrupt is a hint instruction that suspends execution until one of a number of events occurs.</para><para>Wait For Event is a hint instruction that permits the processor to enter a low-power state until one of a number of events occurs.</para><para>Send Event is a hint instruction. It causes an event to be signaled to the CPU.</para><para>Instruction Synchronization Barrier flushes the pipeline in the processor, so that all instructions following the ISB are fetched from cache or memory, after the instruction has been completed.</para><para>Acts as a special kind of Data Memory Barrier. It completes when all explicit memory accesses before this instruction complete.</para><para>Ensures the apparent order of the explicit memory operations before and after the instruction, without ensuring their completion.</para><para>Reverses the byte order in integer value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to reverse </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reversed value</para></simplesect>
Reverses the byte order in two unsigned short values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to reverse </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Reversed value</para></simplesect>
Rotate Right (immediate) provides the value of the contents of a register rotated by a variable number of bits. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Value to rotate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of Bits to rotate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Rotated value</para></simplesect>
Disables IRQ interrupts by setting the I-bit in the CPSR. Can only be executed in Privileged modes.</para><para>Returns the content of the Control Register. <simplesect kind="return"><para>Control Register value</para></simplesect>
Writes the given value to the Control Register. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">control</parametername>
</parameternamelist>
<parameterdescription>
<para>Control Register value to set</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns the content of the IPSR Register. <simplesect kind="return"><para>IPSR Register value</para></simplesect>
Returns the content of the APSR Register. <simplesect kind="return"><para>APSR Register value</para></simplesect>
Returns the content of the xPSR Register. <simplesect kind="return"><para>xPSR Register value</para></simplesect>
Returns the current value of the Process Stack Pointer (PSP). <simplesect kind="return"><para>PSP Register value</para></simplesect>
Assigns the given value to the Process Stack Pointer (PSP). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">topOfProcStack</parametername>
</parameternamelist>
<parameterdescription>
<para>Process Stack Pointer value to set</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns the current value of the Main Stack Pointer (MSP). <simplesect kind="return"><para>MSP Register value</para></simplesect>
Assigns the given value to the Main Stack Pointer (MSP). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">topOfMainStack</parametername>
</parameternamelist>
<parameterdescription>
<para>Main Stack Pointer value to set</para></parameterdescription>
</parameteritem>
</parameterlist>
Returns the current state of the priority mask bit from the Priority Mask Register. <simplesect kind="return"><para>Priority Mask value</para></simplesect>
Assigns the given value to the Priority Mask Register. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">priMask</parametername>
</parameternamelist>
<parameterdescription>
<para>Priority Mask</para></parameterdescription>
</parameteritem>
</parameterlist>
Enables IRQ interrupts by clearing the I-bit in the CPSR. Can only be executed in Privileged modes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc.h" line="439" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc.h" bodystart="439" bodyend="453"/>
        <references refid="semihosting_8h_1aacce635d68067370c70caa2381ea1040" compoundref="semihosting_8h" startline="102">value</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>CMSIS Cortex-M Core Function/Instruction Header File. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="version"><para>V4.30 </para></simplesect>
<simplesect kind="date"><para>20. October 2015 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/**************************************************************************/</highlight></codeline>
<codeline lineno="7"><highlight class="comment">/*<sp/>Copyright<sp/>(c)<sp/>2009<sp/>-<sp/>2015<sp/>ARM<sp/>LIMITED</highlight></codeline>
<codeline lineno="8"><highlight class="comment"></highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/><sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/>-<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/><sp/>-<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/>-<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>ARM<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors<sp/>may<sp/>be<sp/>used</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>BE</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/><sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/><sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/><sp/><sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/><sp/><sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/><sp/><sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/><sp/><sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/><sp/><sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/><sp/><sp/>---------------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__CMSIS_ARMCC_V6_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__CMSIS_ARMCC_V6_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>###########################<sp/><sp/>Core<sp/>Function<sp/>Access<sp/><sp/>###########################<sp/>*/</highlight></codeline>
<codeline lineno="50" refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" refkind="member"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__enable_irq(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="51"><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;cpsie<sp/>i&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__disable_irq(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;cpsid<sp/>i&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga5fe64567d5bf0a81c118374e9a3a4598" kindref="member">__get_CONTROL</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>control&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>(__ARM_FEATURE_CMSE<sp/>==<sp/>3U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__TZ_get_CONTROL_NS(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="88"><highlight class="normal">{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>control_ns&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga558df7eeb0a34765e0b54d9853d08484" kindref="member">__set_CONTROL</ref>(uint32_t<sp/>control)</highlight></codeline>
<codeline lineno="103"><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>control,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(control)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>(__ARM_FEATURE_CMSE<sp/>==<sp/>3U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__TZ_set_CONTROL_NS(uint32_t<sp/>control)</highlight></codeline>
<codeline lineno="115"><highlight class="normal">{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>control_ns,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(control)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal">}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga2c18685a915eb9b7513a907c2b866636" kindref="member">__get_IPSR</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="127"><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>ipsr&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>(__ARM_FEATURE_CMSE<sp/>==<sp/>3U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__TZ_get_IPSR_NS(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>ipsr_ns&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1gaf082254959c727c663f2334021f1a98a" kindref="member">__get_APSR</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>apsr&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>(__ARM_FEATURE_CMSE<sp/>==<sp/>3U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__TZ_get_APSR_NS(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>apsr_ns&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga94c675a736d4754a5f73d8748b24aa11" kindref="member">__get_xPSR</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>xpsr&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>(__ARM_FEATURE_CMSE<sp/>==<sp/>3U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__TZ_get_xPSR_NS(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>xpsr_ns&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga0c569cbb49336f8d638686f9103047aa" kindref="member">__get_PSP</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>psp&quot;</highlight><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>(__ARM_FEATURE_CMSE<sp/>==<sp/>3U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__TZ_get_PSP_NS(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="232"><highlight class="normal">{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>psp_ns&quot;</highlight><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1gab145e35dbaf6868d3a17a8ad360fe379" kindref="member">__set_PSP</ref>(uint32_t<sp/>topOfProcStack)</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>psp,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(topOfProcStack)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;sp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="249"><highlight class="normal">}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>(__ARM_FEATURE_CMSE<sp/>==<sp/>3U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__TZ_set_PSP_NS(uint32_t<sp/>topOfProcStack)</highlight></codeline>
<codeline lineno="259"><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>psp_ns,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(topOfProcStack)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;sp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1gac5267c10c9b15b5349eea0a959ea014c" kindref="member">__get_MSP</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="271"><highlight class="normal">{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>msp&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>(__ARM_FEATURE_CMSE<sp/>==<sp/>3U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__TZ_get_MSP_NS(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="286"><highlight class="normal">{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>msp_ns&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga1ff33c0b5ed0e687dd7967a1dd283d5f" kindref="member">__set_MSP</ref>(uint32_t<sp/>topOfMainStack)</highlight></codeline>
<codeline lineno="301"><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>msp,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(topOfMainStack)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;sp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>(__ARM_FEATURE_CMSE<sp/>==<sp/>3U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__TZ_set_MSP_NS(uint32_t<sp/>topOfMainStack)</highlight></codeline>
<codeline lineno="313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>msp_ns,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(topOfMainStack)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;sp&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1gac9e3a67ff722261b89c77ebe49b6f9a7" kindref="member">__get_PRIMASK</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="325"><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>primask&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>(__ARM_FEATURE_CMSE<sp/>==<sp/>3U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__TZ_get_PRIMASK_NS(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="340"><highlight class="normal">{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>primask_ns&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga42e74e3fffe1a2d93db1de04d9260929" kindref="member">__set_PRIMASK</ref>(uint32_t<sp/>priMask)</highlight></codeline>
<codeline lineno="355"><highlight class="normal">{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>primask,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(priMask)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>(__ARM_FEATURE_CMSE<sp/>==<sp/>3U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__TZ_set_PRIMASK_NS(uint32_t<sp/>priMask)</highlight></codeline>
<codeline lineno="367"><highlight class="normal">{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>primask_ns,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(priMask)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>((__ARM_ARCH_7M__<sp/>==<sp/>1U)<sp/>||<sp/>(__ARM_ARCH_7EM__<sp/>==<sp/>1U)<sp/>||<sp/>(__ARM_ARCH_8M__<sp/>==<sp/>1U))<sp/><sp/></highlight><highlight class="comment">/*<sp/>ToDo:<sp/><sp/>ARMCC_V6:<sp/>check<sp/>if<sp/>this<sp/>is<sp/>ok<sp/>for<sp/>cortex<sp/>&gt;=3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__enable_fault_irq(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="381"><highlight class="normal">{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;cpsie<sp/>f&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__disable_fault_irq(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="392"><highlight class="normal">{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;cpsid<sp/>f&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__get_BASEPRI(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>basepri&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>(__ARM_FEATURE_CMSE<sp/>==<sp/>3U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__TZ_get_BASEPRI_NS(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>basepri_ns&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__set_BASEPRI(uint32_t<sp/><ref refid="semihosting_8h_1aacce635d68067370c70caa2381ea1040" kindref="member">value</ref>)</highlight></codeline>
<codeline lineno="433"><highlight class="normal">{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>basepri,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="semihosting_8h_1aacce635d68067370c70caa2381ea1040" kindref="member">value</ref>)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>(__ARM_FEATURE_CMSE<sp/>==<sp/>3U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__TZ_set_BASEPRI_NS(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="445"><highlight class="normal">{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>basepri_ns,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="semihosting_8h_1aacce635d68067370c70caa2381ea1040" kindref="member">value</ref>)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__set_BASEPRI_MAX(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>basepri_max,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="semihosting_8h_1aacce635d68067370c70caa2381ea1040" kindref="member">value</ref>)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>(__ARM_FEATURE_CMSE<sp/>==<sp/>3U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__TZ_set_BASEPRI_MAX_NS(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="471"><highlight class="normal">{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>basepri_max_ns,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="semihosting_8h_1aacce635d68067370c70caa2381ea1040" kindref="member">value</ref>)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__get_FAULTMASK(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="483"><highlight class="normal">{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>faultmask&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="488"><highlight class="normal">}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>(__ARM_FEATURE_CMSE<sp/>==<sp/>3U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__TZ_get_FAULTMASK_NS(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>faultmask_ns&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__set_FAULTMASK(uint32_t<sp/>faultMask)</highlight></codeline>
<codeline lineno="513"><highlight class="normal">{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>faultmask,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(faultMask)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>(__ARM_FEATURE_CMSE<sp/>==<sp/>3U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__TZ_set_FAULTMASK_NS(uint32_t<sp/>faultMask)</highlight></codeline>
<codeline lineno="525"><highlight class="normal">{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>faultmask_ns,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(faultMask)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;memory&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>((__ARM_ARCH_7M__<sp/>==<sp/>1U)<sp/>||<sp/>(__ARM_ARCH_8M__<sp/>==<sp/>1U))<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__ARM_ARCH_8M__<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__get_PSPLIM(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="542"><highlight class="normal">{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>psplim&quot;</highlight><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="547"><highlight class="normal">}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>(__ARM_FEATURE_CMSE<sp/>==<sp/>3U)<sp/>&amp;&amp;<sp/>(__ARM_ARCH_PROFILE<sp/>==<sp/>&apos;M&apos;)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ToDo:<sp/><sp/>ARMCC_V6:<sp/>check<sp/>predefined<sp/>macro<sp/>for<sp/>mainline<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__TZ_get_PSPLIM_NS(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="557"><highlight class="normal">{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>psplim_ns&quot;</highlight><highlight class="normal"><sp/><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__set_PSPLIM(uint32_t<sp/>ProcStackPtrLimit)</highlight></codeline>
<codeline lineno="572"><highlight class="normal">{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>psplim,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(ProcStackPtrLimit));</highlight></codeline>
<codeline lineno="574"><highlight class="normal">}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>(__ARM_FEATURE_CMSE<sp/>==<sp/>3U)<sp/>&amp;&amp;<sp/>(__ARM_ARCH_PROFILE<sp/>==<sp/>&apos;M&apos;)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ToDo:<sp/><sp/>ARMCC_V6:<sp/>check<sp/>predefined<sp/>macro<sp/>for<sp/>mainline<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__TZ_set_PSPLIM_NS(uint32_t<sp/>ProcStackPtrLimit)</highlight></codeline>
<codeline lineno="584"><highlight class="normal">{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>psplim_ns,<sp/>%0\n&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(ProcStackPtrLimit));</highlight></codeline>
<codeline lineno="586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__get_MSPLIM(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="596"><highlight class="normal">{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>msplim&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="602"><highlight class="normal">}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>(__ARM_FEATURE_CMSE<sp/>==<sp/>3U)<sp/>&amp;&amp;<sp/>(__ARM_ARCH_PROFILE<sp/>==<sp/>&apos;M&apos;)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ToDo:<sp/><sp/>ARMCC_V6:<sp/>check<sp/>predefined<sp/>macro<sp/>for<sp/>mainline<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__TZ_get_MSPLIM_NS(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="612"><highlight class="normal">{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">register</highlight><highlight class="normal"><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MRS<sp/>%0,<sp/>msplim_ns&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__set_MSPLIM(uint32_t<sp/>MainStackPtrLimit)</highlight></codeline>
<codeline lineno="627"><highlight class="normal">{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>msplim,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(MainStackPtrLimit));</highlight></codeline>
<codeline lineno="629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>(__ARM_FEATURE_CMSE<sp/>==<sp/>3U)<sp/>&amp;&amp;<sp/>(__ARM_ARCH_PROFILE<sp/>==<sp/>&apos;M&apos;)<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ToDo:<sp/><sp/>ARMCC_V6:<sp/>check<sp/>predefined<sp/>macro<sp/>for<sp/>mainline<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__TZ_set_MSPLIM_NS(uint32_t<sp/>MainStackPtrLimit)</highlight></codeline>
<codeline lineno="639"><highlight class="normal">{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;MSR<sp/>msplim_ns,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(MainStackPtrLimit));</highlight></codeline>
<codeline lineno="641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(__ARM_ARCH_8M__<sp/>==<sp/>1U)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>((__ARM_ARCH_7EM__<sp/>==<sp/>1U)<sp/>||<sp/>(__ARM_ARCH_8M__<sp/>==<sp/>1U))<sp/><sp/></highlight><highlight class="comment">/*<sp/>ToDo:<sp/><sp/>ARMCC_V6:<sp/>check<sp/>if<sp/>this<sp/>is<sp/>ok<sp/>for<sp/>cortex<sp/>&gt;=4<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="preprocessor">#define<sp/>__get_FPSCR<sp/><sp/><sp/><sp/><sp/><sp/>__builtin_arm_get_fpscr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__get_FPSCR(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="657"><highlight class="normal">{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__FPU_PRESENT<sp/>==<sp/>1U)<sp/>&amp;&amp;<sp/>(__FPU_USED<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Empty<sp/>asm<sp/>statement<sp/>works<sp/>as<sp/>a<sp/>scheduling<sp/>barrier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;VMRS<sp/>%0,<sp/>fpscr&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>(__ARM_FEATURE_CMSE<sp/>==<sp/>3U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__TZ_get_FPSCR_NS(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="678"><highlight class="normal">{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__FPU_PRESENT<sp/>==<sp/>1U)<sp/>&amp;&amp;<sp/>(__FPU_USED<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Empty<sp/>asm<sp/>statement<sp/>works<sp/>as<sp/>a<sp/>scheduling<sp/>barrier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;VMRS<sp/>%0,<sp/>fpscr_ns&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal">}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="preprocessor">#define<sp/>__set_FPSCR<sp/><sp/><sp/><sp/><sp/><sp/>__builtin_arm_set_fpscr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__set_FPSCR(uint32_t<sp/>fpscr)</highlight></codeline>
<codeline lineno="701"><highlight class="normal">{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__FPU_PRESENT<sp/>==<sp/>1U)<sp/>&amp;&amp;<sp/>(__FPU_USED<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Empty<sp/>asm<sp/>statement<sp/>works<sp/>as<sp/>a<sp/>scheduling<sp/>barrier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;VMSR<sp/>fpscr,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(fpscr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;vfpcc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal">}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/><sp/>(__ARM_FEATURE_CMSE<sp/>==<sp/>3U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__TZ_set_FPSCR_NS(uint32_t<sp/>fpscr)</highlight></codeline>
<codeline lineno="717"><highlight class="normal">{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__FPU_PRESENT<sp/>==<sp/>1U)<sp/>&amp;&amp;<sp/>(__FPU_USED<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Empty<sp/>asm<sp/>statement<sp/>works<sp/>as<sp/>a<sp/>scheduling<sp/>barrier<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;VMSR<sp/>fpscr_ns,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(fpscr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;vfpcc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>((__ARM_ARCH_7EM__<sp/>==<sp/>1U)<sp/>||<sp/>(__ARM_ARCH_8M__<sp/>==<sp/>1U))<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="comment">/*<sp/>##########################<sp/><sp/>Core<sp/>Instruction<sp/>Access<sp/><sp/>#########################<sp/>*/</highlight></codeline>
<codeline lineno="739"><highlight class="comment">/*<sp/>Define<sp/>macros<sp/>for<sp/>porting<sp/>to<sp/>both<sp/>thumb1<sp/>and<sp/>thumb2.</highlight></codeline>
<codeline lineno="740"><highlight class="comment"><sp/>*<sp/>For<sp/>thumb1,<sp/>use<sp/>low<sp/>register<sp/>(r0-r7),<sp/>specified<sp/>by<sp/>constraint<sp/>&quot;l&quot;</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/>*<sp/>Otherwise,<sp/>use<sp/>general<sp/>registers,<sp/>specified<sp/>by<sp/>constraint<sp/>&quot;r&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(__thumb__)<sp/>&amp;&amp;<sp/>!defined<sp/>(__thumb2__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__CMSIS_GCC_OUT_REG(r)<sp/>&quot;=l&quot;<sp/>(r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__CMSIS_GCC_USE_REG(r)<sp/>&quot;l&quot;<sp/>(r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746" refid="group___c_m_s_i_s___core___instruction_interface_1gabc17e391c13c71702366c67cba39c276" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__CMSIS_GCC_OUT_REG(r)<sp/>&quot;=r&quot;<sp/>(r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747" refid="group___c_m_s_i_s___core___instruction_interface_1ga9d94dee7402367961d2cf0accc00fd97" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__CMSIS_GCC_USE_REG(r)<sp/>&quot;r&quot;<sp/>(r)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="754" refid="group___c_m_s_i_s___core___instruction_interface_1gabd585ddc865fb9b7f2493af1eee1a572" refkind="member"><highlight class="preprocessor">#define<sp/>__NOP<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__builtin_arm_nop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="760" refid="group___c_m_s_i_s___core___instruction_interface_1gad23bf2b78a9a4524157c9de0d30b7448" refkind="member"><highlight class="preprocessor">#define<sp/>__WFI<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__builtin_arm_wfi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="768" refid="group___c_m_s_i_s___core___instruction_interface_1gaac6cc7dd4325d9cb40d3290fa5244b3d" refkind="member"><highlight class="preprocessor">#define<sp/>__WFE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__builtin_arm_wfe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="775" refid="group___c_m_s_i_s___core___instruction_interface_1gaab4f296d0022b4b10dc0976eb22052f9" refkind="member"><highlight class="preprocessor">#define<sp/>__SEV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__builtin_arm_sev</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="784" refid="group___c_m_s_i_s___core___instruction_interface_1gaad233022e850a009fc6f7602be1182f6" refkind="member"><highlight class="preprocessor">#define<sp/>__ISB()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__builtin_arm_isb(0xF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight></codeline>
<codeline lineno="791" refid="group___c_m_s_i_s___core___instruction_interface_1ga067d257a2b34565410acefb5afef2203" refkind="member"><highlight class="preprocessor">#define<sp/>__DSB()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__builtin_arm_dsb(0xF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="799" refid="group___c_m_s_i_s___core___instruction_interface_1ga671101179b5943990785f36f8c1e2269" refkind="member"><highlight class="preprocessor">#define<sp/>__DMB()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__builtin_arm_dmb(0xF);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="808" refid="group___c_m_s_i_s___core___instruction_interface_1ga14f54807872c0f5e05604c4924abfdae" refkind="member"><highlight class="preprocessor">#define<sp/>__REV<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__builtin_bswap32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="817" refid="group___c_m_s_i_s___core___instruction_interface_1ga4e3acd41e7667cdf65ffcd8c76a8613f" refkind="member"><highlight class="preprocessor">#define<sp/>__REV16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__builtin_bswap16<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ToDo:<sp/><sp/>ARMCC_V6:<sp/>check<sp/>if<sp/>__builtin_bswap16<sp/>could<sp/>be<sp/>used<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1ga4e3acd41e7667cdf65ffcd8c76a8613f" kindref="member">__REV16</ref>(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="820"><highlight class="normal">{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;rev16<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1gabc17e391c13c71702366c67cba39c276" kindref="member">__CMSIS_GCC_OUT_REG</ref><sp/>(result)<sp/>:<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1ga9d94dee7402367961d2cf0accc00fd97" kindref="member">__CMSIS_GCC_USE_REG</ref><sp/>(value)<sp/>);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ToDo:<sp/><sp/>ARMCC_V6:<sp/>check<sp/>if<sp/>__builtin_bswap16<sp/>could<sp/>be<sp/>used<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>int32_t<sp/>__REVSH(int32_t<sp/>value)</highlight></codeline>
<codeline lineno="837"><highlight class="normal">{</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>int32_t<sp/>result;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;revsh<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1gabc17e391c13c71702366c67cba39c276" kindref="member">__CMSIS_GCC_OUT_REG</ref><sp/>(result)<sp/>:<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1ga9d94dee7402367961d2cf0accc00fd97" kindref="member">__CMSIS_GCC_USE_REG</ref><sp/>(value)<sp/>);</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="842"><highlight class="normal">}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1ga95b9bd281ddeda378b85afdb8f2ced86" kindref="member">__ROR</ref>(uint32_t<sp/>op1,<sp/>uint32_t<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)</highlight></codeline>
<codeline lineno="853" refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" refkind="member"><highlight class="normal">{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(op1<sp/>&gt;&gt;<sp/>op2)<sp/>|<sp/>(op1<sp/>&lt;&lt;<sp/>(32U<sp/>-<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>));</highlight></codeline>
<codeline lineno="855"><highlight class="normal">}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="865" refid="group___c_m_s_i_s___core___instruction_interface_1ga15ea6bd3c507d3e81c3b3a1258e46397" refkind="member"><highlight class="preprocessor">#define<sp/>__BKPT(value)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__ASM<sp/>volatile<sp/>(&quot;bkpt<sp/>&quot;#value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ToDo:<sp/><sp/>ARMCC_V6:<sp/>check<sp/>if<sp/>__builtin_arm_rbit<sp/>is<sp/>supported<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__RBIT(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="876"><highlight class="normal">{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>((__ARM_ARCH_7M__<sp/>==<sp/>1U)<sp/>||<sp/>(__ARM_ARCH_7EM__<sp/>==<sp/>1U)<sp/>||<sp/>(__ARM_ARCH_8M__<sp/>==<sp/>1U))<sp/><sp/></highlight><highlight class="comment">/*<sp/>ToDo:<sp/><sp/>ARMCC_V6:<sp/>check<sp/>if<sp/>this<sp/>is<sp/>ok<sp/>for<sp/>cortex<sp/>&gt;=3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;rbit<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(value)<sp/>);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>int32_t<sp/>s<sp/>=<sp/>4<sp/></highlight><highlight class="comment">/*sizeof(v)*/</highlight><highlight class="normal"><sp/>*<sp/>8<sp/>-<sp/>1;<sp/></highlight><highlight class="comment">/*<sp/>extra<sp/>shift<sp/>needed<sp/>at<sp/>end<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>result<sp/>=<sp/><ref refid="semihosting_8h_1aacce635d68067370c70caa2381ea1040" kindref="member">value</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>r<sp/>will<sp/>be<sp/>reversed<sp/>bits<sp/>of<sp/>v;<sp/>first<sp/>get<sp/>LSB<sp/>of<sp/>v<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(value<sp/>&gt;&gt;=<sp/>1U;<sp/><ref refid="semihosting_8h_1aacce635d68067370c70caa2381ea1040" kindref="member">value</ref>;<sp/>value<sp/>&gt;&gt;=<sp/>1U)</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>&lt;&lt;=<sp/>1U;</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>|=<sp/>value<sp/>&amp;<sp/>1U;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>s--;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>result<sp/>&lt;&lt;=<sp/>s;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>shift<sp/>when<sp/>v&apos;s<sp/>highest<sp/>bits<sp/>are<sp/>zero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="903" refid="group___c_m_s_i_s___core___instruction_interface_1ga5d5bb1527e042be4a9fa5a33f65cc248" refkind="member"><highlight class="preprocessor">#define<sp/>__CLZ<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__builtin_clz</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>((__ARM_ARCH_7M__<sp/>==<sp/>1U)<sp/>||<sp/>(__ARM_ARCH_7EM__<sp/>==<sp/>1U)<sp/>||<sp/>(__ARM_ARCH_8M__<sp/>==<sp/>1U))<sp/><sp/></highlight><highlight class="comment">/*<sp/>ToDo:<sp/><sp/>ARMCC_V6:<sp/>check<sp/>if<sp/>this<sp/>is<sp/>ok<sp/>for<sp/>cortex<sp/>&gt;=3<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="preprocessor">#define<sp/>__LDREXB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint8_t)__builtin_arm_ldrex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="preprocessor">#define<sp/>__LDREXH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint16_t)__builtin_arm_ldrex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="preprocessor">#define<sp/>__LDREXW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)__builtin_arm_ldrex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="preprocessor">#define<sp/>__STREXB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)__builtin_arm_strex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="preprocessor">#define<sp/>__STREXH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)__builtin_arm_strex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="preprocessor">#define<sp/>__STREXW<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)__builtin_arm_strex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="preprocessor">#define<sp/>__CLREX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__builtin_arm_clrex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="comment">/*#define<sp/>__SSAT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__builtin_arm_ssat*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SSAT(ARG1,ARG2)<sp/>\</highlight></codeline>
<codeline lineno="984"><highlight class="preprocessor">({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="985"><highlight class="preprocessor"><sp/><sp/>int32_t<sp/>__RES,<sp/>__ARG1<sp/>=<sp/>(ARG1);<sp/>\</highlight></codeline>
<codeline lineno="986"><highlight class="preprocessor"><sp/><sp/>__ASM<sp/>(&quot;ssat<sp/>%0,<sp/>%1,<sp/>%2&quot;<sp/>:<sp/>&quot;=r&quot;<sp/>(__RES)<sp/>:<sp/><sp/>&quot;I&quot;<sp/>(ARG2),<sp/>&quot;r&quot;<sp/>(__ARG1)<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="987"><highlight class="preprocessor"><sp/><sp/>__RES;<sp/>\</highlight></codeline>
<codeline lineno="988"><highlight class="preprocessor"><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="preprocessor">#define<sp/>__USAT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__builtin_arm_usat</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__USAT(ARG1,ARG2)<sp/>\</highlight></codeline>
<codeline lineno="1001"><highlight class="preprocessor">({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1002"><highlight class="preprocessor"><sp/><sp/>uint32_t<sp/>__RES,<sp/>__ARG1<sp/>=<sp/>(ARG1);<sp/>\</highlight></codeline>
<codeline lineno="1003"><highlight class="preprocessor"><sp/><sp/>__ASM<sp/>(&quot;usat<sp/>%0,<sp/>%1,<sp/>%2&quot;<sp/>:<sp/>&quot;=r&quot;<sp/>(__RES)<sp/>:<sp/><sp/>&quot;I&quot;<sp/>(ARG2),<sp/>&quot;r&quot;<sp/>(__ARG1)<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="1004"><highlight class="preprocessor"><sp/><sp/>__RES;<sp/>\</highlight></codeline>
<codeline lineno="1005"><highlight class="preprocessor"><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__RRX(uint32_t<sp/>value)</highlight></codeline>
<codeline lineno="1017"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;rrx<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1gabc17e391c13c71702366c67cba39c276" kindref="member">__CMSIS_GCC_OUT_REG</ref><sp/>(result)<sp/>:<sp/><ref refid="group___c_m_s_i_s___core___instruction_interface_1ga9d94dee7402367961d2cf0accc00fd97" kindref="member">__CMSIS_GCC_USE_REG</ref><sp/>(value)<sp/>);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint8_t<sp/>__LDRBT(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>*ptr)</highlight></codeline>
<codeline lineno="1032"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ldrbt<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal"><sp/>(*ptr)<sp/>);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint8_t)<sp/>result);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>explicit<sp/>type<sp/>cast<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint16_t<sp/>__LDRHT(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint16_t<sp/>*ptr)</highlight></codeline>
<codeline lineno="1047"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ldrht<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal"><sp/>(*ptr)<sp/>);</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint16_t)<sp/>result);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>explicit<sp/>type<sp/>cast<sp/>here<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__LDRT(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*ptr)</highlight></codeline>
<codeline lineno="1062"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ldrt<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal"><sp/>(*ptr)<sp/>);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1067"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__STRBT(uint8_t<sp/>value,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>*ptr)</highlight></codeline>
<codeline lineno="1077"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;strbt<sp/>%1,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=Q&quot;</highlight><highlight class="normal"><sp/>(*ptr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>((uint32_t)value)<sp/>);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__STRHT(uint16_t<sp/>value,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint16_t<sp/>*ptr)</highlight></codeline>
<codeline lineno="1089"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;strht<sp/>%1,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=Q&quot;</highlight><highlight class="normal"><sp/>(*ptr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>((uint32_t)value)<sp/>);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__STRT(uint32_t<sp/>value,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*ptr)</highlight></codeline>
<codeline lineno="1101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;strt<sp/>%1,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=Q&quot;</highlight><highlight class="normal"><sp/>(*ptr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="semihosting_8h_1aacce635d68067370c70caa2381ea1040" kindref="member">value</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>((__ARM_ARCH_7M__<sp/>==<sp/>1U)<sp/>||<sp/>(__ARM_ARCH_7EM__<sp/>==<sp/>1U)<sp/>||<sp/>(__ARM_ARCH_8M__<sp/>==<sp/>1U))<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(__ARM_ARCH_8M__<sp/>==<sp/>1U)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint8_t<sp/>__LDAB(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>*ptr)</highlight></codeline>
<codeline lineno="1117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ldab<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal"><sp/>(*ptr)<sp/>);</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint8_t)<sp/>result);</highlight></codeline>
<codeline lineno="1122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint16_t<sp/>__LDAH(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint16_t<sp/>*ptr)</highlight></codeline>
<codeline lineno="1132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ldah<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal"><sp/>(*ptr)<sp/>);</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((uint16_t)<sp/>result);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__LDA(</highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*ptr)</highlight></codeline>
<codeline lineno="1147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;lda<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Q&quot;</highlight><highlight class="normal"><sp/>(*ptr)<sp/>);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__STLB(uint8_t<sp/>value,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>*ptr)</highlight></codeline>
<codeline lineno="1162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;stlb<sp/>%1,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=Q&quot;</highlight><highlight class="normal"><sp/>(*ptr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>((uint32_t)value)<sp/>);</highlight></codeline>
<codeline lineno="1164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__STLH(uint16_t<sp/>value,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint16_t<sp/>*ptr)</highlight></codeline>
<codeline lineno="1174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;stlh<sp/>%1,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=Q&quot;</highlight><highlight class="normal"><sp/>(*ptr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>((uint32_t)value)<sp/>);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>__STL(uint32_t<sp/>value,<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>*ptr)</highlight></codeline>
<codeline lineno="1186"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;stl<sp/>%1,<sp/>%0&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=Q&quot;</highlight><highlight class="normal"><sp/>(*ptr)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>((uint32_t)value)<sp/>);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>__LDAEXB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint8_t)__builtin_arm_ldaex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>__LDAEXH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint16_t)__builtin_arm_ldaex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>__LDAEX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)__builtin_arm_ldaex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>__STLEXB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)__builtin_arm_stlex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>__STLEXH<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)__builtin_arm_stlex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="preprocessor">#define<sp/><sp/><sp/><sp/><sp/>__STLEX<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(uint32_t)__builtin_arm_stlex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(__ARM_ARCH_8M__<sp/>==<sp/>1U)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/></highlight><highlight class="comment">/*<sp/>end<sp/>of<sp/>group<sp/>CMSIS_Core_InstructionInterface<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>###################<sp/><sp/>Compiler<sp/>specific<sp/>Intrinsics<sp/><sp/>###########################<sp/>*/</highlight></codeline>
<codeline lineno="1261"><highlight class="preprocessor">#if<sp/>(__ARM_FEATURE_DSP<sp/>==<sp/>1U)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>ToDo:<sp/><sp/>ARMCC_V6:<sp/>This<sp/>should<sp/>be<sp/>ARCH<sp/>&gt;=<sp/>ARMv7-M<sp/>+<sp/>SIMD<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SADD8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1264"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;sadd8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__QADD8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1272"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;qadd8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1277"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SHADD8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1280"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;shadd8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UADD8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1288"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uadd8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1293"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UQADD8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1296"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uqadd8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UHADD8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1304"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uhadd8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SSUB8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ssub8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__QSUB8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1321"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;qsub8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SHSUB8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;shsub8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__USUB8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1337"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;usub8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UQSUB8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1345"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uqsub8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UHSUB8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uhsub8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SADD16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1362"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;sadd16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__QADD16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1370"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;qadd16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SHADD16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1378"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;shadd16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UADD16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1386"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uadd16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UQADD16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uqadd16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1399"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UHADD16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uhadd16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SSUB16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1410"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ssub16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__QSUB16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1418"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;qsub16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SHSUB16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1426"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;shsub16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__USUB16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1434"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;usub16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UQSUB16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1442"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uqsub16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UHSUB16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1450"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uhsub16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SASX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;sasx<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1463"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__QASX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1466"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;qasx<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1471"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SHASX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1474"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;shasx<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UASX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1482"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uasx<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UQASX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1490"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uqasx<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UHASX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1498"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uhasx<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SSAX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1506"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;ssax<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__QSAX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1514"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"></highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;qsax<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SHSAX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1522"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;shsax<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__USAX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1530"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;usax<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UQSAX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1538"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uqsax<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1543"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UHSAX(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1546"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uhsax<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__USAD8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1554"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;usad8<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__USADA8(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2,<sp/>uint32_t<sp/>op3)</highlight></codeline>
<codeline lineno="1562"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"></highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;usada8<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op3)<sp/>);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SSAT16(ARG1,ARG2)<sp/>\</highlight></codeline>
<codeline lineno="1570"><highlight class="preprocessor">({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1571"><highlight class="preprocessor"><sp/><sp/>uint32_t<sp/>__RES,<sp/>__ARG1<sp/>=<sp/>(ARG1);<sp/>\</highlight></codeline>
<codeline lineno="1572"><highlight class="preprocessor"><sp/><sp/>__ASM<sp/>(&quot;ssat16<sp/>%0,<sp/>%1,<sp/>%2&quot;<sp/>:<sp/>&quot;=r&quot;<sp/>(__RES)<sp/>:<sp/><sp/>&quot;I&quot;<sp/>(ARG2),<sp/>&quot;r&quot;<sp/>(__ARG1)<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="1573"><highlight class="preprocessor"><sp/><sp/>__RES;<sp/>\</highlight></codeline>
<codeline lineno="1574"><highlight class="preprocessor"><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__USAT16(ARG1,ARG2)<sp/>\</highlight></codeline>
<codeline lineno="1577"><highlight class="preprocessor">({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1578"><highlight class="preprocessor"><sp/><sp/>uint32_t<sp/>__RES,<sp/>__ARG1<sp/>=<sp/>(ARG1);<sp/>\</highlight></codeline>
<codeline lineno="1579"><highlight class="preprocessor"><sp/><sp/>__ASM<sp/>(&quot;usat16<sp/>%0,<sp/>%1,<sp/>%2&quot;<sp/>:<sp/>&quot;=r&quot;<sp/>(__RES)<sp/>:<sp/><sp/>&quot;I&quot;<sp/>(ARG2),<sp/>&quot;r&quot;<sp/>(__ARG1)<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="1580"><highlight class="preprocessor"><sp/><sp/>__RES;<sp/>\</highlight></codeline>
<codeline lineno="1581"><highlight class="preprocessor"><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"></highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UXTB16(uint32_t<sp/>op1)</highlight></codeline>
<codeline lineno="1584"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uxtb16<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1));</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__UXTAB16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1592"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;uxtab16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1597"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"></highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SXTB16(uint32_t<sp/>op1)</highlight></codeline>
<codeline lineno="1600"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;sxtb16<sp/>%0,<sp/>%1&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1));</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1605"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"></highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SXTAB16(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1608"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;sxtab16<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SMUAD<sp/><sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1616"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smuad<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SMUADX<sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1624"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smuadx<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SMLAD<sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2,<sp/>uint32_t<sp/>op3)</highlight></codeline>
<codeline lineno="1632"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smlad<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op3)<sp/>);</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SMLADX<sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2,<sp/>uint32_t<sp/>op3)</highlight></codeline>
<codeline lineno="1640"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smladx<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op3)<sp/>);</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint64_t<sp/>__SMLALD<sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2,<sp/>uint64_t<sp/>acc)</highlight></codeline>
<codeline lineno="1648"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">llreg_u{</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>w32[2];</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>w64;</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/>}<sp/>llr;</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/>llr.w64<sp/>=<sp/>acc;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__ARMEB__<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Little<sp/>endian<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smlald<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]):<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op2)<sp/>,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]),<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1])<sp/>);</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Big<sp/>endian<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smlald<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]):<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op2)<sp/>,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]),<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0])<sp/>);</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(llr.w64);</highlight></codeline>
<codeline lineno="1662"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint64_t<sp/>__SMLALDX<sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2,<sp/>uint64_t<sp/>acc)</highlight></codeline>
<codeline lineno="1665"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">llreg_u{</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>w32[2];</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>w64;</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/>}<sp/>llr;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/>llr.w64<sp/>=<sp/>acc;</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__ARMEB__<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Little<sp/>endian<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smlaldx<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]):<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op2)<sp/>,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]),<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1])<sp/>);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Big<sp/>endian<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smlaldx<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]):<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op2)<sp/>,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]),<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0])<sp/>);</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(llr.w64);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SMUSD<sp/><sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1682"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smusd<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1687"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SMUSDX<sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1690"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smusdx<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SMLSD<sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2,<sp/>uint32_t<sp/>op3)</highlight></codeline>
<codeline lineno="1698"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smlsd<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op3)<sp/>);</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SMLSDX<sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2,<sp/>uint32_t<sp/>op3)</highlight></codeline>
<codeline lineno="1706"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smlsdx<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op3)<sp/>);</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint64_t<sp/>__SMLSLD<sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2,<sp/>uint64_t<sp/>acc)</highlight></codeline>
<codeline lineno="1714"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">llreg_u{</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>w32[2];</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>w64;</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/>}<sp/>llr;</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/>llr.w64<sp/>=<sp/>acc;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__ARMEB__<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Little<sp/>endian<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smlsld<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]):<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op2)<sp/>,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]),<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1])<sp/>);</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Big<sp/>endian<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smlsld<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]):<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op2)<sp/>,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]),<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0])<sp/>);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(llr.w64);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint64_t<sp/>__SMLSLDX<sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2,<sp/>uint64_t<sp/>acc)</highlight></codeline>
<codeline lineno="1731"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">llreg_u{</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>w32[2];</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>w64;</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/>}<sp/>llr;</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/>llr.w64<sp/>=<sp/>acc;</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__ARMEB__<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Little<sp/>endian<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smlsldx<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]):<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op2)<sp/>,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]),<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1])<sp/>);</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Big<sp/>endian<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smlsldx<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]),<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0]):<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op2)<sp/>,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal"><sp/>(llr.w32[1]),<sp/></highlight><highlight class="stringliteral">&quot;1&quot;</highlight><highlight class="normal"><sp/>(llr.w32[0])<sp/>);</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(llr.w64);</highlight></codeline>
<codeline lineno="1745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SEL<sp/><sp/>(uint32_t<sp/>op1,<sp/>uint32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1748"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/>uint32_t<sp/>result;</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"></highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;sel<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"></highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/><sp/>int32_t<sp/>__QADD(<sp/>int32_t<sp/>op1,<sp/><sp/>int32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1756"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/>int32_t<sp/>result;</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;qadd<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/><sp/>int32_t<sp/>__QSUB(<sp/>int32_t<sp/>op1,<sp/><sp/>int32_t<sp/>op2)</highlight></codeline>
<codeline lineno="1764"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/>int32_t<sp/>result;</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;qsub<sp/>%0,<sp/>%1,<sp/>%2&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result)<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>)<sp/>);</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1769"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PKHBT(ARG1,ARG2,ARG3)<sp/>\</highlight></codeline>
<codeline lineno="1772"><highlight class="preprocessor">({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1773"><highlight class="preprocessor"><sp/><sp/>uint32_t<sp/>__RES,<sp/>__ARG1<sp/>=<sp/>(ARG1),<sp/>__ARG2<sp/>=<sp/>(ARG2);<sp/>\</highlight></codeline>
<codeline lineno="1774"><highlight class="preprocessor"><sp/><sp/>__ASM<sp/>(&quot;pkhbt<sp/>%0,<sp/>%1,<sp/>%2,<sp/>lsl<sp/>%3&quot;<sp/>:<sp/>&quot;=r&quot;<sp/>(__RES)<sp/>:<sp/><sp/>&quot;r&quot;<sp/>(__ARG1),<sp/>&quot;r&quot;<sp/>(__ARG2),<sp/>&quot;I&quot;<sp/>(ARG3)<sp/><sp/>);<sp/>\</highlight></codeline>
<codeline lineno="1775"><highlight class="preprocessor"><sp/><sp/>__RES;<sp/>\</highlight></codeline>
<codeline lineno="1776"><highlight class="preprocessor"><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__PKHTB(ARG1,ARG2,ARG3)<sp/>\</highlight></codeline>
<codeline lineno="1779"><highlight class="preprocessor">({<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="1780"><highlight class="preprocessor"><sp/><sp/>uint32_t<sp/>__RES,<sp/>__ARG1<sp/>=<sp/>(ARG1),<sp/>__ARG2<sp/>=<sp/>(ARG2);<sp/>\</highlight></codeline>
<codeline lineno="1781"><highlight class="preprocessor"><sp/><sp/>if<sp/>(ARG3<sp/>==<sp/>0)<sp/>\</highlight></codeline>
<codeline lineno="1782"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>__ASM<sp/>(&quot;pkhtb<sp/>%0,<sp/>%1,<sp/>%2&quot;<sp/>:<sp/>&quot;=r&quot;<sp/>(__RES)<sp/>:<sp/><sp/>&quot;r&quot;<sp/>(__ARG1),<sp/>&quot;r&quot;<sp/>(__ARG2)<sp/><sp/>);<sp/>\</highlight></codeline>
<codeline lineno="1783"><highlight class="preprocessor"><sp/><sp/>else<sp/>\</highlight></codeline>
<codeline lineno="1784"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>__ASM<sp/>(&quot;pkhtb<sp/>%0,<sp/>%1,<sp/>%2,<sp/>asr<sp/>%3&quot;<sp/>:<sp/>&quot;=r&quot;<sp/>(__RES)<sp/>:<sp/><sp/>&quot;r&quot;<sp/>(__ARG1),<sp/>&quot;r&quot;<sp/>(__ARG2),<sp/>&quot;I&quot;<sp/>(ARG3)<sp/><sp/>);<sp/>\</highlight></codeline>
<codeline lineno="1785"><highlight class="preprocessor"><sp/><sp/>__RES;<sp/>\</highlight></codeline>
<codeline lineno="1786"><highlight class="preprocessor"><sp/>})</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1787"><highlight class="normal"></highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><ref refid="group___c_m_s_i_s___core___reg_acc_functions_1ga671b4fa3b3ab3dbc685a5473f3fc76aa" kindref="member">__attribute__</ref>((always_inline))<sp/>__STATIC_INLINE<sp/>uint32_t<sp/>__SMMLA<sp/>(int32_t<sp/>op1,<sp/>int32_t<sp/>op2,<sp/>int32_t<sp/>op3)</highlight></codeline>
<codeline lineno="1789"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/>int32_t<sp/>result;</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/>__ASM<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>(</highlight><highlight class="stringliteral">&quot;smmla<sp/>%0,<sp/>%1,<sp/>%2,<sp/>%3&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;=r&quot;</highlight><highlight class="normal"><sp/>(result):<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/><sp/>(op1),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(<ref refid="group___c_m_s_i_s___core___instruction_interface_1gadb2bb33809b6f35ba4d176cbec7c7b75" kindref="member">op2</ref>),<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal"><sp/>(op3)<sp/>);</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(result);</highlight></codeline>
<codeline lineno="1794"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(__ARM_FEATURE_DSP<sp/>==<sp/>1U)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__CMSIS_ARMCC_V6_H<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/cmsis_armcc_V6.h"/>
  </compounddef>
</doxygen>
