<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="stm32f10x__dac_8c" kind="file" language="C++">
    <compoundname>stm32f10x_dac.c</compoundname>
    <includes refid="stm32f10x__dac_8h" local="yes">stm32f10x_dac.h</includes>
    <includes refid="stm32f10x__rcc_8h" local="yes">stm32f10x_rcc.h</includes>
    <incdepgraph>
      <node id="895">
        <label>system_stm32f10x.h</label>
        <link refid="system__stm32f10x_8h"/>
      </node>
      <node id="892">
        <label>stdint.h</label>
      </node>
      <node id="891">
        <label>core_cm3.h</label>
        <link refid="core__cm3_8h"/>
        <childnode refid="892" relation="include">
        </childnode>
        <childnode refid="893" relation="include">
        </childnode>
        <childnode refid="894" relation="include">
        </childnode>
      </node>
      <node id="894">
        <label>core_cmFunc.h</label>
        <link refid="core__cm_func_8h"/>
      </node>
      <node id="889">
        <label>stm32f10x_dac.h</label>
        <link refid="stm32f10x__dac_8h"/>
        <childnode refid="890" relation="include">
        </childnode>
      </node>
      <node id="896">
        <label>stm32f10x_rcc.h</label>
        <link refid="stm32f10x__rcc_8h"/>
        <childnode refid="890" relation="include">
        </childnode>
      </node>
      <node id="893">
        <label>core_cmInstr.h</label>
        <link refid="core__cm_instr_8h"/>
      </node>
      <node id="890">
        <label>stm32f10x.h</label>
        <link refid="stm32f10x_8h"/>
        <childnode refid="891" relation="include">
        </childnode>
        <childnode refid="895" relation="include">
        </childnode>
        <childnode refid="892" relation="include">
        </childnode>
      </node>
      <node id="888">
        <label>C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c</label>
        <link refid="stm32f10x__dac_8c"/>
        <childnode refid="889" relation="include">
        </childnode>
        <childnode refid="896" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___d_a_c___private___defines_1ga8a5812a1d5ced986bb997a4bb7ae697d" prot="public" static="no">
        <name>CR_CLEAR_MASK</name>
        <initializer>((uint32_t)0x00000FFE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" line="48" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c___private___defines_1ga6401668f65168b2b689b49155f380bdd" prot="public" static="no">
        <name>DUAL_SWTRIG_SET</name>
        <initializer>((uint32_t)0x00000003)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" line="51" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c___private___defines_1gacd3ce00f8b25892532af267f26932ed7" prot="public" static="no">
        <name>DUAL_SWTRIG_RESET</name>
        <initializer>((uint32_t)0xFFFFFFFC)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" line="52" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c___private___defines_1gaf1305e3b7cfb0f898678baeab6e91cbf" prot="public" static="no">
        <name>DHR12R1_OFFSET</name>
        <initializer>((uint32_t)0x00000008)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" line="55" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c___private___defines_1ga157b0fbccea090637eea09172fdd6a39" prot="public" static="no">
        <name>DHR12R2_OFFSET</name>
        <initializer>((uint32_t)0x00000014)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" line="56" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c___private___defines_1ga2893b0491ec29a95fd061e5e0fa029e3" prot="public" static="no">
        <name>DHR12RD_OFFSET</name>
        <initializer>((uint32_t)0x00000020)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" line="57" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_a_c___private___defines_1ga051bab7263211bd232d13665339c1745" prot="public" static="no">
        <name>DOR_OFFSET</name>
        <initializer>((uint32_t)0x0000002C)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" line="60" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___d_a_c___private___functions_1ga1fae225204e1e049d6795319e99ba8bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DAC_DeInit</definition>
        <argsstring>(void)</argsstring>
        <name>DAC_DeInit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Deinitializes the DAC peripheral registers to their default reset values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" line="98" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" bodystart="98" bodyend="104"/>
        <references refid="group___r_c_c___exported___functions_1gab197ae4369c10b92640a733b40ed2801" compoundref="stm32f10x__rcc_8c" startline="1216" endline="1229">RCC_APB1PeriphResetCmd</references>
        <references refid="group___a_p_b1__peripheral_1ga8d019a727701634822c19371b6aaabb5" compoundref="stm32f10x__rcc_8h" startline="551">RCC_APB1Periph_DAC</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" compoundref="stm32f10x_8h" startline="521">ENABLE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c___private___functions_1ga7c59850468ed4bf0659663fe495441da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DAC_Init</definition>
        <argsstring>(uint32_t DAC_Channel, DAC_InitTypeDef *DAC_InitStruct)</argsstring>
        <name>DAC_Init</name>
        <param>
          <type>uint32_t</type>
          <declname>DAC_Channel</declname>
        </param>
        <param>
          <type><ref refid="struct_d_a_c___init_type_def" kindref="compound">DAC_InitTypeDef</ref> *</type>
          <declname>DAC_InitStruct</declname>
        </param>
        <briefdescription>
<para>Initializes the DAC peripheral according to the specified parameters in the DAC_InitStruct. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DAC_Channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the selected DAC channel. This parameter can be one of the following values: <itemizedlist>
<listitem><para>DAC_Channel_1: DAC Channel1 selected </para></listitem>
<listitem><para>DAC_Channel_2: DAC Channel2 selected </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DAC_InitStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <ref refid="struct_d_a_c___init_type_def" kindref="compound">DAC_InitTypeDef</ref> structure that contains the configuration information for the specified DAC channel. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" line="117" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" bodystart="117" bodyend="142"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___d_a_c__trigger__selection_1ga4409b79639e6ae3b1f0ed61a33c810a3" compoundref="stm32f10x__dac_8h" startline="99">IS_DAC_TRIGGER</references>
        <references refid="struct_d_a_c___init_type_def_1a7b26ebaeb51a0157a781f7de8ba779e5" compoundref="stm32f10x__dac_8h" startline="52">DAC_InitTypeDef::DAC_Trigger</references>
        <references refid="group___d_a_c__wave__generation_1ga50fb2dd12305cd7bd0b738a1f6388d3c" compoundref="stm32f10x__dac_8h" startline="120">IS_DAC_GENERATE_WAVE</references>
        <references refid="struct_d_a_c___init_type_def_1a6753e78ddd2dc8273444ba01a272d63a" compoundref="stm32f10x__dac_8h" startline="55">DAC_InitTypeDef::DAC_WaveGeneration</references>
        <references refid="group___d_a_c__lfsrunmask__triangleamplitude_1ga20f7c3c43f917f14593f0c478c2412e1" compoundref="stm32f10x__dac_8h" startline="156">IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE</references>
        <references refid="struct_d_a_c___init_type_def_1a27ed27a544d50781b20d59cc55e6cef8" compoundref="stm32f10x__dac_8h" startline="59">DAC_InitTypeDef::DAC_LFSRUnmask_TriangleAmplitude</references>
        <references refid="group___d_a_c__output__buffer_1gaa5a56816d641129fb62d11133c9dcccd" compoundref="stm32f10x__dac_8h" startline="190">IS_DAC_OUTPUT_BUFFER_STATE</references>
        <references refid="struct_d_a_c___init_type_def_1ad3e9e01486443e99f19e65a446b03ca6" compoundref="stm32f10x__dac_8h" startline="63">DAC_InitTypeDef::DAC_OutputBuffer</references>
        <references refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" compoundref="stm32f10x_8h" startline="1404">DAC</references>
        <references refid="group___d_a_c___private___defines_1ga8a5812a1d5ced986bb997a4bb7ae697d" compoundref="stm32f10x__dac_8c" startline="48">CR_CLEAR_MASK</references>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c___private___functions_1gadfc270974d54cb5fa5f92556015c4046" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DAC_StructInit</definition>
        <argsstring>(DAC_InitTypeDef *DAC_InitStruct)</argsstring>
        <name>DAC_StructInit</name>
        <param>
          <type><ref refid="struct_d_a_c___init_type_def" kindref="compound">DAC_InitTypeDef</ref> *</type>
          <declname>DAC_InitStruct</declname>
        </param>
        <briefdescription>
<para>Fills each DAC_InitStruct member with its default value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DAC_InitStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>: pointer to a <ref refid="struct_d_a_c___init_type_def" kindref="compound">DAC_InitTypeDef</ref> structure which will be initialized. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" line="150" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" bodystart="150" bodyend="161"/>
        <references refid="struct_d_a_c___init_type_def_1a7b26ebaeb51a0157a781f7de8ba779e5" compoundref="stm32f10x__dac_8h" startline="52">DAC_InitTypeDef::DAC_Trigger</references>
        <references refid="group___d_a_c__trigger__selection_1ga7849138e043267668d755390d923e4ba" compoundref="stm32f10x__dac_8h" startline="79">DAC_Trigger_None</references>
        <references refid="struct_d_a_c___init_type_def_1a6753e78ddd2dc8273444ba01a272d63a" compoundref="stm32f10x__dac_8h" startline="55">DAC_InitTypeDef::DAC_WaveGeneration</references>
        <references refid="group___d_a_c__wave__generation_1gaabbcd575d6106267f6b65ce988158f29" compoundref="stm32f10x__dac_8h" startline="117">DAC_WaveGeneration_None</references>
        <references refid="struct_d_a_c___init_type_def_1a27ed27a544d50781b20d59cc55e6cef8" compoundref="stm32f10x__dac_8h" startline="59">DAC_InitTypeDef::DAC_LFSRUnmask_TriangleAmplitude</references>
        <references refid="group___d_a_c__lfsrunmask__triangleamplitude_1ga60794fd5092a332cfa82e1cee13945fc" compoundref="stm32f10x__dac_8h" startline="131">DAC_LFSRUnmask_Bit0</references>
        <references refid="struct_d_a_c___init_type_def_1ad3e9e01486443e99f19e65a446b03ca6" compoundref="stm32f10x__dac_8h" startline="63">DAC_InitTypeDef::DAC_OutputBuffer</references>
        <references refid="group___d_a_c__output__buffer_1gab3f92803a8b6bc5fb3e4859908b5161f" compoundref="stm32f10x__dac_8h" startline="188">DAC_OutputBuffer_Enable</references>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c___private___functions_1ga323e61530d7fa9396c3bce9edb61f733" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DAC_Cmd</definition>
        <argsstring>(uint32_t DAC_Channel, FunctionalState NewState)</argsstring>
        <name>DAC_Cmd</name>
        <param>
          <type>uint32_t</type>
          <declname>DAC_Channel</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified DAC channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DAC_Channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the selected DAC channel. This parameter can be one of the following values: <itemizedlist>
<listitem><para>DAC_Channel_1: DAC Channel1 selected </para></listitem>
<listitem><para>DAC_Channel_2: DAC Channel2 selected </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the DAC channel. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" line="173" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" bodystart="173" bodyend="188"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___d_a_c___channel__selection_1gafb2b9bdaccb3a5e3396925d7cba02cc3" compoundref="stm32f10x__dac_8h" startline="202">IS_DAC_CHANNEL</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" compoundref="stm32f10x_8h" startline="1404">DAC</references>
        <references refid="group___peripheral___registers___bits___definition_1gabd8cedbb3dda03d56ac0ba92d2d9cefd" compoundref="stm32f10x_8h" startline="4053">DAC_CR_EN1</references>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c___private___functions_1ga194cba38f60ace11658824f0250121f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DAC_DMACmd</definition>
        <argsstring>(uint32_t DAC_Channel, FunctionalState NewState)</argsstring>
        <name>DAC_DMACmd</name>
        <param>
          <type>uint32_t</type>
          <declname>DAC_Channel</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified DAC channel DMA request. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DAC_Channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the selected DAC channel. This parameter can be one of the following values: <itemizedlist>
<listitem><para>DAC_Channel_1: DAC Channel1 selected </para></listitem>
<listitem><para>DAC_Channel_2: DAC Channel2 selected </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the selected DAC channel DMA request. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" line="233" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" bodystart="233" bodyend="248"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___d_a_c___channel__selection_1gafb2b9bdaccb3a5e3396925d7cba02cc3" compoundref="stm32f10x__dac_8h" startline="202">IS_DAC_CHANNEL</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" compoundref="stm32f10x_8h" startline="1404">DAC</references>
        <references refid="group___peripheral___registers___bits___definition_1ga995c19d8c8de9ee09057ec6151154e17" compoundref="stm32f10x_8h" startline="4072">DAC_CR_DMAEN1</references>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c___private___functions_1ga46f9f7f6b9520a86e300fe966afe5fb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DAC_SoftwareTriggerCmd</definition>
        <argsstring>(uint32_t DAC_Channel, FunctionalState NewState)</argsstring>
        <name>DAC_SoftwareTriggerCmd</name>
        <param>
          <type>uint32_t</type>
          <declname>DAC_Channel</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the selected DAC channel software trigger. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DAC_Channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the selected DAC channel. This parameter can be one of the following values: <itemizedlist>
<listitem><para>DAC_Channel_1: DAC Channel1 selected </para></listitem>
<listitem><para>DAC_Channel_2: DAC Channel2 selected </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the selected DAC channel software trigger. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" line="260" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" bodystart="260" bodyend="275"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___d_a_c___channel__selection_1gafb2b9bdaccb3a5e3396925d7cba02cc3" compoundref="stm32f10x__dac_8h" startline="202">IS_DAC_CHANNEL</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" compoundref="stm32f10x_8h" startline="1404">DAC</references>
        <references refid="group___peripheral___registers___bits___definition_1ga970ef02dffaceb35ff1dd7aceb67acdd" compoundref="stm32f10x_8h" startline="4095">DAC_SWTRIGR_SWTRIG1</references>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c___private___functions_1gab4d3b364a6b184dcd65f3b294ebf56dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DAC_DualSoftwareTriggerCmd</definition>
        <argsstring>(FunctionalState NewState)</argsstring>
        <name>DAC_DualSoftwareTriggerCmd</name>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables simultaneously the two DAC channels software triggers. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the DAC channels software triggers. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" line="284" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" bodystart="284" bodyend="298"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" compoundref="stm32f10x_8h" startline="1404">DAC</references>
        <references refid="group___d_a_c___private___defines_1ga6401668f65168b2b689b49155f380bdd" compoundref="stm32f10x__dac_8c" startline="51">DUAL_SWTRIG_SET</references>
        <references refid="group___d_a_c___private___defines_1gacd3ce00f8b25892532af267f26932ed7" compoundref="stm32f10x__dac_8c" startline="52">DUAL_SWTRIG_RESET</references>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c___private___functions_1gabd51ae6880821d4dcd923969ec19a19e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DAC_WaveGenerationCmd</definition>
        <argsstring>(uint32_t DAC_Channel, uint32_t DAC_Wave, FunctionalState NewState)</argsstring>
        <name>DAC_WaveGenerationCmd</name>
        <param>
          <type>uint32_t</type>
          <declname>DAC_Channel</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>DAC_Wave</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the selected DAC channel wave generation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DAC_Channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the selected DAC channel. This parameter can be one of the following values: <itemizedlist>
<listitem><para>DAC_Channel_1: DAC Channel1 selected </para></listitem>
<listitem><para>DAC_Channel_2: DAC Channel2 selected </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>DAC_Wave</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the wave type to enable or disable. This parameter can be one of the following values: <itemizedlist>
<listitem><para>DAC_Wave_Noise: noise wave generation </para></listitem>
<listitem><para>DAC_Wave_Triangle: triangle wave generation </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the selected DAC channel wave generation. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" line="314" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" bodystart="314" bodyend="330"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___d_a_c___channel__selection_1gafb2b9bdaccb3a5e3396925d7cba02cc3" compoundref="stm32f10x__dac_8h" startline="202">IS_DAC_CHANNEL</references>
        <references refid="group___d_a_c__wave__generation_1ga45c25065fb713820f6dbae0009376e1c" compoundref="stm32f10x__dac_8h" startline="228">IS_DAC_WAVE</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" compoundref="stm32f10x_8h" startline="1404">DAC</references>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c___private___functions_1gad06b4230d2b17d1d13f41dce4c782461" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DAC_SetChannel1Data</definition>
        <argsstring>(uint32_t DAC_Align, uint16_t Data)</argsstring>
        <name>DAC_SetChannel1Data</name>
        <param>
          <type>uint32_t</type>
          <declname>DAC_Align</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
<para>Set the specified data holding register value for DAC channel1. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DAC_Align</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the data alignment for DAC channel1. This parameter can be one of the following values: <itemizedlist>
<listitem><para>DAC_Align_8b_R: 8bit right data alignment selected </para></listitem>
<listitem><para>DAC_Align_12b_L: 12bit left data alignment selected </para></listitem>
<listitem><para>DAC_Align_12b_R: 12bit right data alignment selected </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>: Data to be loaded in the selected data holding register. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" line="342" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" bodystart="342" bodyend="355"/>
        <references refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" compoundref="core__cm0_8h" startline="221">__IO</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___d_a_c__data__alignment_1ga7779c36606827a6a2c4423414a441bde" compoundref="stm32f10x__dac_8h" startline="215">IS_DAC_ALIGN</references>
        <references refid="group___d_a_c__data_1ga903e28d4971e172b37c1c2fc17c2a884" compoundref="stm32f10x__dac_8h" startline="238">IS_DAC_DATA</references>
        <references refid="group___peripheral__memory__map_1gad18d0b914c7f68cecbee1a2d23a67d38" compoundref="stm32f10x_8h" startline="1310">DAC_BASE</references>
        <references refid="group___d_a_c___private___defines_1gaf1305e3b7cfb0f898678baeab6e91cbf" compoundref="stm32f10x__dac_8c" startline="55">DHR12R1_OFFSET</references>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c___private___functions_1ga44e12006ec186791378d132da8541552" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DAC_SetChannel2Data</definition>
        <argsstring>(uint32_t DAC_Align, uint16_t Data)</argsstring>
        <name>DAC_SetChannel2Data</name>
        <param>
          <type>uint32_t</type>
          <declname>DAC_Align</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
<para>Set the specified data holding register value for DAC channel2. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DAC_Align</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the data alignment for DAC channel2. This parameter can be one of the following values: <itemizedlist>
<listitem><para>DAC_Align_8b_R: 8bit right data alignment selected </para></listitem>
<listitem><para>DAC_Align_12b_L: 12bit left data alignment selected </para></listitem>
<listitem><para>DAC_Align_12b_R: 12bit right data alignment selected </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>: Data to be loaded in the selected data holding register. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" line="367" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" bodystart="367" bodyend="380"/>
        <references refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" compoundref="core__cm0_8h" startline="221">__IO</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___d_a_c__data__alignment_1ga7779c36606827a6a2c4423414a441bde" compoundref="stm32f10x__dac_8h" startline="215">IS_DAC_ALIGN</references>
        <references refid="group___d_a_c__data_1ga903e28d4971e172b37c1c2fc17c2a884" compoundref="stm32f10x__dac_8h" startline="238">IS_DAC_DATA</references>
        <references refid="group___peripheral__memory__map_1gad18d0b914c7f68cecbee1a2d23a67d38" compoundref="stm32f10x_8h" startline="1310">DAC_BASE</references>
        <references refid="group___d_a_c___private___defines_1ga157b0fbccea090637eea09172fdd6a39" compoundref="stm32f10x__dac_8c" startline="56">DHR12R2_OFFSET</references>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c___private___functions_1ga4ca2cfdf56ab35a23f2517f23d7fbb24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void DAC_SetDualChannelData</definition>
        <argsstring>(uint32_t DAC_Align, uint16_t Data2, uint16_t Data1)</argsstring>
        <name>DAC_SetDualChannelData</name>
        <param>
          <type>uint32_t</type>
          <declname>DAC_Align</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>Data2</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>Data1</declname>
        </param>
        <briefdescription>
<para>Set the specified data holding register value for dual channel DAC. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DAC_Align</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the data alignment for dual channel DAC. This parameter can be one of the following values: <itemizedlist>
<listitem><para>DAC_Align_8b_R: 8bit right data alignment selected </para></listitem>
<listitem><para>DAC_Align_12b_L: 12bit left data alignment selected </para></listitem>
<listitem><para>DAC_Align_12b_R: 12bit right data alignment selected </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Data2</parametername>
</parameternamelist>
<parameterdescription>
<para>Data for DAC Channel2 to be loaded in the selected data holding register. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Data1</parametername>
</parameternamelist>
<parameterdescription>
<para>Data for DAC Channel1 to be loaded in the selected data holding register. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" line="396" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" bodystart="396" bodyend="420"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___d_a_c__data__alignment_1ga7779c36606827a6a2c4423414a441bde" compoundref="stm32f10x__dac_8h" startline="215">IS_DAC_ALIGN</references>
        <references refid="group___d_a_c__data_1ga903e28d4971e172b37c1c2fc17c2a884" compoundref="stm32f10x__dac_8h" startline="238">IS_DAC_DATA</references>
        <references refid="group___d_a_c__data__alignment_1gaa633fbcf85e97e12c4894eaed530dd8f" compoundref="stm32f10x__dac_8h" startline="214">DAC_Align_8b_R</references>
        <references refid="group___peripheral__memory__map_1gad18d0b914c7f68cecbee1a2d23a67d38" compoundref="stm32f10x_8h" startline="1310">DAC_BASE</references>
        <references refid="group___d_a_c___private___defines_1ga2893b0491ec29a95fd061e5e0fa029e3" compoundref="stm32f10x__dac_8c" startline="57">DHR12RD_OFFSET</references>
        <references refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" compoundref="core__cm0_8h" startline="221">__IO</references>
      </memberdef>
      <memberdef kind="function" id="group___d_a_c___private___functions_1ga51274838de1e5dd012a82d7f44d7a50b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t DAC_GetDataOutputValue</definition>
        <argsstring>(uint32_t DAC_Channel)</argsstring>
        <name>DAC_GetDataOutputValue</name>
        <param>
          <type>uint32_t</type>
          <declname>DAC_Channel</declname>
        </param>
        <briefdescription>
<para>Returns the last data output value of the selected DAC channel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>DAC_Channel</parametername>
</parameternamelist>
<parameterdescription>
<para>the selected DAC channel. This parameter can be one of the following values: <itemizedlist>
<listitem><para>DAC_Channel_1: DAC Channel1 selected </para></listitem>
<listitem><para>DAC_Channel_2: DAC Channel2 selected </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>selected DAC channel data output value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" line="430" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c" bodystart="430" bodyend="442"/>
        <references refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" compoundref="core__cm0_8h" startline="221">__IO</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___d_a_c___channel__selection_1gafb2b9bdaccb3a5e3396925d7cba02cc3" compoundref="stm32f10x__dac_8h" startline="202">IS_DAC_CHANNEL</references>
        <references refid="group___peripheral__memory__map_1gad18d0b914c7f68cecbee1a2d23a67d38" compoundref="stm32f10x_8h" startline="1310">DAC_BASE</references>
        <references refid="group___d_a_c___private___defines_1ga051bab7263211bd232d13665339c1745" compoundref="stm32f10x__dac_8c" startline="60">DOR_OFFSET</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
        <references refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" compoundref="stm32f10x_8h" startline="1404">DAC</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" compoundref="stm32f10x_8h" startline="519">SET</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file provides all the DAC firmware functions. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>MCD Application Team </para></simplesect>
<simplesect kind="version"><para>V3.5.0 </para></simplesect>
<simplesect kind="date"><para>11-March-2011 </para></simplesect>
<simplesect kind="attention"><para></para></simplesect>
THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.</para><para><heading level="2"><center><copy/> COPYRIGHT 2011 STMicroelectronics</center></heading>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="22"><highlight class="comment">/*<sp/>Includes<sp/>------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stm32f10x__dac_8h" kindref="compound">stm32f10x_dac.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stm32f10x__rcc_8h" kindref="compound">stm32f10x_rcc.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="comment">/*<sp/>CR<sp/>register<sp/>Mask<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="group___d_a_c___private___defines_1ga8a5812a1d5ced986bb997a4bb7ae697d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CR_CLEAR_MASK<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00000FFE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>DAC<sp/>Dual<sp/>Channels<sp/>SWTRIG<sp/>masks<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="group___d_a_c___private___defines_1ga6401668f65168b2b689b49155f380bdd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DUAL_SWTRIG_SET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00000003)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="group___d_a_c___private___defines_1gacd3ce00f8b25892532af267f26932ed7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DUAL_SWTRIG_RESET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0xFFFFFFFC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>DHR<sp/>registers<sp/>offsets<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="group___d_a_c___private___defines_1gaf1305e3b7cfb0f898678baeab6e91cbf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DHR12R1_OFFSET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00000008)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="group___d_a_c___private___defines_1ga157b0fbccea090637eea09172fdd6a39" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DHR12R2_OFFSET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00000014)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="group___d_a_c___private___defines_1ga2893b0491ec29a95fd061e5e0fa029e3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DHR12RD_OFFSET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00000020)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>DOR<sp/>register<sp/>offset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="group___d_a_c___private___defines_1ga051bab7263211bd232d13665339c1745" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DOR_OFFSET<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x0000002C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="group___d_a_c___private___functions_1ga1fae225204e1e049d6795319e99ba8bc" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c___private___functions_1ga1fae225204e1e049d6795319e99ba8bc" kindref="member">DAC_DeInit</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="99"><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>DAC<sp/>reset<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><ref refid="group___r_c_c___exported___functions_1gab197ae4369c10b92640a733b40ed2801" kindref="member">RCC_APB1PeriphResetCmd</ref>(<ref refid="group___a_p_b1__peripheral_1ga8d019a727701634822c19371b6aaabb5" kindref="member">RCC_APB1Periph_DAC</ref>,<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" kindref="member">ENABLE</ref>);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Release<sp/>DAC<sp/>from<sp/>reset<sp/>state<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><ref refid="group___r_c_c___exported___functions_1gab197ae4369c10b92640a733b40ed2801" kindref="member">RCC_APB1PeriphResetCmd</ref>(<ref refid="group___a_p_b1__peripheral_1ga8d019a727701634822c19371b6aaabb5" kindref="member">RCC_APB1Periph_DAC</ref>,<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="group___d_a_c___private___functions_1ga7c59850468ed4bf0659663fe495441da" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c___private___functions_1ga7c59850468ed4bf0659663fe495441da" kindref="member">DAC_Init</ref>(uint32_t<sp/>DAC_Channel,<sp/><ref refid="struct_d_a_c___init_type_def" kindref="compound">DAC_InitTypeDef</ref>*<sp/>DAC_InitStruct)</highlight></codeline>
<codeline lineno="118"><highlight class="normal">{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>uint32_t<sp/>tmpreg1<sp/>=<sp/>0,<sp/>tmpreg2<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>DAC<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___d_a_c__trigger__selection_1ga4409b79639e6ae3b1f0ed61a33c810a3" kindref="member">IS_DAC_TRIGGER</ref>(DAC_InitStruct-&gt;<ref refid="struct_d_a_c___init_type_def_1a7b26ebaeb51a0157a781f7de8ba779e5" kindref="member">DAC_Trigger</ref>));</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___d_a_c__wave__generation_1ga50fb2dd12305cd7bd0b738a1f6388d3c" kindref="member">IS_DAC_GENERATE_WAVE</ref>(DAC_InitStruct-&gt;<ref refid="struct_d_a_c___init_type_def_1a6753e78ddd2dc8273444ba01a272d63a" kindref="member">DAC_WaveGeneration</ref>));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___d_a_c__lfsrunmask__triangleamplitude_1ga20f7c3c43f917f14593f0c478c2412e1" kindref="member">IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE</ref>(DAC_InitStruct-&gt;<ref refid="struct_d_a_c___init_type_def_1a27ed27a544d50781b20d59cc55e6cef8" kindref="member">DAC_LFSRUnmask_TriangleAmplitude</ref>));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___d_a_c__output__buffer_1gaa5a56816d641129fb62d11133c9dcccd" kindref="member">IS_DAC_OUTPUT_BUFFER_STATE</ref>(DAC_InitStruct-&gt;<ref refid="struct_d_a_c___init_type_def_1ad3e9e01486443e99f19e65a446b03ca6" kindref="member">DAC_OutputBuffer</ref>));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------<sp/>DAC<sp/>CR<sp/>Configuration<sp/>--------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>DAC<sp/>CR<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>tmpreg1<sp/>=<sp/><ref refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" kindref="member">DAC</ref>-&gt;CR;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>BOFFx,<sp/>TENx,<sp/>TSELx,<sp/>WAVEx<sp/>and<sp/>MAMPx<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>tmpreg1<sp/>&amp;=<sp/>~(<ref refid="group___d_a_c___private___defines_1ga8a5812a1d5ced986bb997a4bb7ae697d" kindref="member">CR_CLEAR_MASK</ref><sp/>&lt;&lt;<sp/>DAC_Channel);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Configure<sp/>for<sp/>the<sp/>selected<sp/>DAC<sp/>channel:<sp/>buffer<sp/>output,<sp/>trigger,<sp/>wave<sp/>generation,</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>mask/amplitude<sp/>for<sp/>wave<sp/>generation<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>TSELx<sp/>and<sp/>TENx<sp/>bits<sp/>according<sp/>to<sp/>DAC_Trigger<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>WAVEx<sp/>bits<sp/>according<sp/>to<sp/>DAC_WaveGeneration<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>MAMPx<sp/>bits<sp/>according<sp/>to<sp/>DAC_LFSRUnmask_TriangleAmplitude<sp/>value<sp/>*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>BOFFx<sp/>bit<sp/>according<sp/>to<sp/>DAC_OutputBuffer<sp/>value<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>tmpreg2<sp/>=<sp/>(DAC_InitStruct-&gt;<ref refid="struct_d_a_c___init_type_def_1a7b26ebaeb51a0157a781f7de8ba779e5" kindref="member">DAC_Trigger</ref><sp/>|<sp/>DAC_InitStruct-&gt;<ref refid="struct_d_a_c___init_type_def_1a6753e78ddd2dc8273444ba01a272d63a" kindref="member">DAC_WaveGeneration</ref><sp/>|</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DAC_InitStruct-&gt;<ref refid="struct_d_a_c___init_type_def_1a27ed27a544d50781b20d59cc55e6cef8" kindref="member">DAC_LFSRUnmask_TriangleAmplitude</ref><sp/>|<sp/>DAC_InitStruct-&gt;<ref refid="struct_d_a_c___init_type_def_1ad3e9e01486443e99f19e65a446b03ca6" kindref="member">DAC_OutputBuffer</ref>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>CR<sp/>register<sp/>value<sp/>depending<sp/>on<sp/>DAC_Channel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>tmpreg1<sp/>|=<sp/>tmpreg2<sp/>&lt;&lt;<sp/>DAC_Channel;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>to<sp/>DAC<sp/>CR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><ref refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" kindref="member">DAC</ref>-&gt;CR<sp/>=<sp/>tmpreg1;</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="group___d_a_c___private___functions_1gadfc270974d54cb5fa5f92556015c4046" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c___private___functions_1gadfc270974d54cb5fa5f92556015c4046" kindref="member">DAC_StructInit</ref>(<ref refid="struct_d_a_c___init_type_def" kindref="compound">DAC_InitTypeDef</ref>*<sp/>DAC_InitStruct)</highlight></codeline>
<codeline lineno="151"><highlight class="normal">{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">/*---------------<sp/>Reset<sp/>DAC<sp/>init<sp/>structure<sp/>parameters<sp/>values<sp/>-----------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>DAC_Trigger<sp/>member<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>DAC_InitStruct-&gt;<ref refid="struct_d_a_c___init_type_def_1a7b26ebaeb51a0157a781f7de8ba779e5" kindref="member">DAC_Trigger</ref><sp/>=<sp/><ref refid="group___d_a_c__trigger__selection_1ga7849138e043267668d755390d923e4ba" kindref="member">DAC_Trigger_None</ref>;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>DAC_WaveGeneration<sp/>member<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>DAC_InitStruct-&gt;<ref refid="struct_d_a_c___init_type_def_1a6753e78ddd2dc8273444ba01a272d63a" kindref="member">DAC_WaveGeneration</ref><sp/>=<sp/><ref refid="group___d_a_c__wave__generation_1gaabbcd575d6106267f6b65ce988158f29" kindref="member">DAC_WaveGeneration_None</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>DAC_LFSRUnmask_TriangleAmplitude<sp/>member<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>DAC_InitStruct-&gt;<ref refid="struct_d_a_c___init_type_def_1a27ed27a544d50781b20d59cc55e6cef8" kindref="member">DAC_LFSRUnmask_TriangleAmplitude</ref><sp/>=<sp/><ref refid="group___d_a_c__lfsrunmask__triangleamplitude_1ga60794fd5092a332cfa82e1cee13945fc" kindref="member">DAC_LFSRUnmask_Bit0</ref>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>DAC_OutputBuffer<sp/>member<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>DAC_InitStruct-&gt;<ref refid="struct_d_a_c___init_type_def_1ad3e9e01486443e99f19e65a446b03ca6" kindref="member">DAC_OutputBuffer</ref><sp/>=<sp/><ref refid="group___d_a_c__output__buffer_1gab3f92803a8b6bc5fb3e4859908b5161f" kindref="member">DAC_OutputBuffer_Enable</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="group___d_a_c___private___functions_1ga323e61530d7fa9396c3bce9edb61f733" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c___private___functions_1ga323e61530d7fa9396c3bce9edb61f733" kindref="member">DAC_Cmd</ref>(uint32_t<sp/>DAC_Channel,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="174"><highlight class="normal">{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___d_a_c___channel__selection_1gafb2b9bdaccb3a5e3396925d7cba02cc3" kindref="member">IS_DAC_CHANNEL</ref>(DAC_Channel));</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>selected<sp/>DAC<sp/>channel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" kindref="member">DAC</ref>-&gt;CR<sp/>|=<sp/>(<ref refid="group___peripheral___registers___bits___definition_1gabd8cedbb3dda03d56ac0ba92d2d9cefd" kindref="member">DAC_CR_EN1</ref><sp/>&lt;&lt;<sp/>DAC_Channel);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>selected<sp/>DAC<sp/>channel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" kindref="member">DAC</ref>-&gt;CR<sp/>&amp;=<sp/>~(<ref refid="group___peripheral___registers___bits___definition_1gabd8cedbb3dda03d56ac0ba92d2d9cefd" kindref="member">DAC_CR_EN1</ref><sp/>&lt;&lt;<sp/>DAC_Channel);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(STM32F10X_LD_VL)<sp/>||<sp/>defined<sp/>(STM32F10X_MD_VL)<sp/>||<sp/>defined<sp/>(STM32F10X_HD_VL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DAC_ITConfig(uint32_t<sp/>DAC_Channel,<sp/>uint32_t<sp/>DAC_IT,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)<sp/><sp/></highlight></codeline>
<codeline lineno="204"><highlight class="normal">{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___d_a_c___channel__selection_1gafb2b9bdaccb3a5e3396925d7cba02cc3" kindref="member">IS_DAC_CHANNEL</ref>(DAC_Channel));</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(IS_DAC_IT(DAC_IT));<sp/></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>selected<sp/>DAC<sp/>interrupts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" kindref="member">DAC</ref>-&gt;CR<sp/>|=<sp/><sp/>(DAC_IT<sp/>&lt;&lt;<sp/>DAC_Channel);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>selected<sp/>DAC<sp/>interrupts<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" kindref="member">DAC</ref>-&gt;CR<sp/>&amp;=<sp/>(~(uint32_t)(DAC_IT<sp/>&lt;&lt;<sp/>DAC_Channel));</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="group___d_a_c___private___functions_1ga194cba38f60ace11658824f0250121f4" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c___private___functions_1ga194cba38f60ace11658824f0250121f4" kindref="member">DAC_DMACmd</ref>(uint32_t<sp/>DAC_Channel,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___d_a_c___channel__selection_1gafb2b9bdaccb3a5e3396925d7cba02cc3" kindref="member">IS_DAC_CHANNEL</ref>(DAC_Channel));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>selected<sp/>DAC<sp/>channel<sp/>DMA<sp/>request<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" kindref="member">DAC</ref>-&gt;CR<sp/>|=<sp/>(<ref refid="group___peripheral___registers___bits___definition_1ga995c19d8c8de9ee09057ec6151154e17" kindref="member">DAC_CR_DMAEN1</ref><sp/>&lt;&lt;<sp/>DAC_Channel);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>selected<sp/>DAC<sp/>channel<sp/>DMA<sp/>request<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" kindref="member">DAC</ref>-&gt;CR<sp/>&amp;=<sp/>~(<ref refid="group___peripheral___registers___bits___definition_1ga995c19d8c8de9ee09057ec6151154e17" kindref="member">DAC_CR_DMAEN1</ref><sp/>&lt;&lt;<sp/>DAC_Channel);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="group___d_a_c___private___functions_1ga46f9f7f6b9520a86e300fe966afe5fb3" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c___private___functions_1ga46f9f7f6b9520a86e300fe966afe5fb3" kindref="member">DAC_SoftwareTriggerCmd</ref>(uint32_t<sp/>DAC_Channel,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="261"><highlight class="normal">{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___d_a_c___channel__selection_1gafb2b9bdaccb3a5e3396925d7cba02cc3" kindref="member">IS_DAC_CHANNEL</ref>(DAC_Channel));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>software<sp/>trigger<sp/>for<sp/>the<sp/>selected<sp/>DAC<sp/>channel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" kindref="member">DAC</ref>-&gt;SWTRIGR<sp/>|=<sp/>(uint32_t)<ref refid="group___peripheral___registers___bits___definition_1ga970ef02dffaceb35ff1dd7aceb67acdd" kindref="member">DAC_SWTRIGR_SWTRIG1</ref><sp/>&lt;&lt;<sp/>(DAC_Channel<sp/>&gt;&gt;<sp/>4);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>software<sp/>trigger<sp/>for<sp/>the<sp/>selected<sp/>DAC<sp/>channel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" kindref="member">DAC</ref>-&gt;SWTRIGR<sp/>&amp;=<sp/>~((uint32_t)<ref refid="group___peripheral___registers___bits___definition_1ga970ef02dffaceb35ff1dd7aceb67acdd" kindref="member">DAC_SWTRIGR_SWTRIG1</ref><sp/>&lt;&lt;<sp/>(DAC_Channel<sp/>&gt;&gt;<sp/>4));</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal">}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="group___d_a_c___private___functions_1gab4d3b364a6b184dcd65f3b294ebf56dc" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c___private___functions_1gab4d3b364a6b184dcd65f3b294ebf56dc" kindref="member">DAC_DualSoftwareTriggerCmd</ref>(<ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="285"><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>software<sp/>trigger<sp/>for<sp/>both<sp/>DAC<sp/>channels<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" kindref="member">DAC</ref>-&gt;SWTRIGR<sp/>|=<sp/><ref refid="group___d_a_c___private___defines_1ga6401668f65168b2b689b49155f380bdd" kindref="member">DUAL_SWTRIG_SET</ref><sp/>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>software<sp/>trigger<sp/>for<sp/>both<sp/>DAC<sp/>channels<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" kindref="member">DAC</ref>-&gt;SWTRIGR<sp/>&amp;=<sp/><ref refid="group___d_a_c___private___defines_1gacd3ce00f8b25892532af267f26932ed7" kindref="member">DUAL_SWTRIG_RESET</ref>;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal">}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="group___d_a_c___private___functions_1gabd51ae6880821d4dcd923969ec19a19e" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c___private___functions_1gabd51ae6880821d4dcd923969ec19a19e" kindref="member">DAC_WaveGenerationCmd</ref>(uint32_t<sp/>DAC_Channel,<sp/>uint32_t<sp/>DAC_Wave,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState)</highlight></codeline>
<codeline lineno="315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___d_a_c___channel__selection_1gafb2b9bdaccb3a5e3396925d7cba02cc3" kindref="member">IS_DAC_CHANNEL</ref>(DAC_Channel));</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___d_a_c__wave__generation_1ga45c25065fb713820f6dbae0009376e1c" kindref="member">IS_DAC_WAVE</ref>(DAC_Wave));<sp/></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" kindref="member">IS_FUNCTIONAL_STATE</ref>(NewState));</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NewState<sp/>!=<sp/><ref refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" kindref="member">DISABLE</ref>)</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enable<sp/>the<sp/>selected<sp/>wave<sp/>generation<sp/>for<sp/>the<sp/>selected<sp/>DAC<sp/>channel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" kindref="member">DAC</ref>-&gt;CR<sp/>|=<sp/>DAC_Wave<sp/>&lt;&lt;<sp/>DAC_Channel;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disable<sp/>the<sp/>selected<sp/>wave<sp/>generation<sp/>for<sp/>the<sp/>selected<sp/>DAC<sp/>channel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" kindref="member">DAC</ref>-&gt;CR<sp/>&amp;=<sp/>~(DAC_Wave<sp/>&lt;&lt;<sp/>DAC_Channel);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="group___d_a_c___private___functions_1gad06b4230d2b17d1d13f41dce4c782461" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c___private___functions_1gad06b4230d2b17d1d13f41dce4c782461" kindref="member">DAC_SetChannel1Data</ref>(uint32_t<sp/>DAC_Align,<sp/>uint16_t<sp/>Data)</highlight></codeline>
<codeline lineno="343"><highlight class="normal">{<sp/><sp/></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><ref refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" kindref="member">__IO</ref><sp/>uint32_t<sp/>tmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___d_a_c__data__alignment_1ga7779c36606827a6a2c4423414a441bde" kindref="member">IS_DAC_ALIGN</ref>(DAC_Align));</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___d_a_c__data_1ga903e28d4971e172b37c1c2fc17c2a884" kindref="member">IS_DAC_DATA</ref>(Data));</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>(uint32_t)<ref refid="group___peripheral__memory__map_1gad18d0b914c7f68cecbee1a2d23a67d38" kindref="member">DAC_BASE</ref>;<sp/></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>tmp<sp/>+=<sp/><ref refid="group___d_a_c___private___defines_1gaf1305e3b7cfb0f898678baeab6e91cbf" kindref="member">DHR12R1_OFFSET</ref><sp/>+<sp/>DAC_Align;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>DAC<sp/>channel1<sp/>selected<sp/>data<sp/>holding<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>*(<ref refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" kindref="member">__IO</ref><sp/>uint32_t<sp/>*)<sp/>tmp<sp/>=<sp/>Data;</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="367" refid="group___d_a_c___private___functions_1ga44e12006ec186791378d132da8541552" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c___private___functions_1ga44e12006ec186791378d132da8541552" kindref="member">DAC_SetChannel2Data</ref>(uint32_t<sp/>DAC_Align,<sp/>uint16_t<sp/>Data)</highlight></codeline>
<codeline lineno="368"><highlight class="normal">{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><ref refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" kindref="member">__IO</ref><sp/>uint32_t<sp/>tmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___d_a_c__data__alignment_1ga7779c36606827a6a2c4423414a441bde" kindref="member">IS_DAC_ALIGN</ref>(DAC_Align));</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___d_a_c__data_1ga903e28d4971e172b37c1c2fc17c2a884" kindref="member">IS_DAC_DATA</ref>(Data));</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>(uint32_t)<ref refid="group___peripheral__memory__map_1gad18d0b914c7f68cecbee1a2d23a67d38" kindref="member">DAC_BASE</ref>;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>tmp<sp/>+=<sp/><ref refid="group___d_a_c___private___defines_1ga157b0fbccea090637eea09172fdd6a39" kindref="member">DHR12R2_OFFSET</ref><sp/>+<sp/>DAC_Align;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>DAC<sp/>channel2<sp/>selected<sp/>data<sp/>holding<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>*(<ref refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" kindref="member">__IO</ref><sp/>uint32_t<sp/>*)tmp<sp/>=<sp/>Data;</highlight></codeline>
<codeline lineno="380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="396" refid="group___d_a_c___private___functions_1ga4ca2cfdf56ab35a23f2517f23d7fbb24" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___d_a_c___private___functions_1ga4ca2cfdf56ab35a23f2517f23d7fbb24" kindref="member">DAC_SetDualChannelData</ref>(uint32_t<sp/>DAC_Align,<sp/>uint16_t<sp/>Data2,<sp/>uint16_t<sp/>Data1)</highlight></codeline>
<codeline lineno="397"><highlight class="normal">{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/>uint32_t<sp/>data<sp/>=<sp/>0,<sp/>tmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___d_a_c__data__alignment_1ga7779c36606827a6a2c4423414a441bde" kindref="member">IS_DAC_ALIGN</ref>(DAC_Align));</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___d_a_c__data_1ga903e28d4971e172b37c1c2fc17c2a884" kindref="member">IS_DAC_DATA</ref>(Data1));</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___d_a_c__data_1ga903e28d4971e172b37c1c2fc17c2a884" kindref="member">IS_DAC_DATA</ref>(Data2));</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>and<sp/>set<sp/>dual<sp/>DAC<sp/>data<sp/>holding<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(DAC_Align<sp/>==<sp/><ref refid="group___d_a_c__data__alignment_1gaa633fbcf85e97e12c4894eaed530dd8f" kindref="member">DAC_Align_8b_R</ref>)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>data<sp/>=<sp/>((uint32_t)Data2<sp/>&lt;&lt;<sp/>8)<sp/>|<sp/>Data1;<sp/></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>data<sp/>=<sp/>((uint32_t)Data2<sp/>&lt;&lt;<sp/>16)<sp/>|<sp/>Data1;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>(uint32_t)<ref refid="group___peripheral__memory__map_1gad18d0b914c7f68cecbee1a2d23a67d38" kindref="member">DAC_BASE</ref>;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>tmp<sp/>+=<sp/><ref refid="group___d_a_c___private___defines_1ga2893b0491ec29a95fd061e5e0fa029e3" kindref="member">DHR12RD_OFFSET</ref><sp/>+<sp/>DAC_Align;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>dual<sp/>DAC<sp/>selected<sp/>data<sp/>holding<sp/>register<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>*(<ref refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" kindref="member">__IO</ref><sp/>uint32_t<sp/>*)tmp<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="group___d_a_c___private___functions_1ga51274838de1e5dd012a82d7f44d7a50b" refkind="member"><highlight class="normal">uint16_t<sp/><ref refid="group___d_a_c___private___functions_1ga51274838de1e5dd012a82d7f44d7a50b" kindref="member">DAC_GetDataOutputValue</ref>(uint32_t<sp/>DAC_Channel)</highlight></codeline>
<codeline lineno="431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><ref refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" kindref="member">__IO</ref><sp/>uint32_t<sp/>tmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___d_a_c___channel__selection_1gafb2b9bdaccb3a5e3396925d7cba02cc3" kindref="member">IS_DAC_CHANNEL</ref>(DAC_Channel));</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>tmp<sp/>=<sp/>(uint32_t)<sp/><ref refid="group___peripheral__memory__map_1gad18d0b914c7f68cecbee1a2d23a67d38" kindref="member">DAC_BASE</ref><sp/>;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>tmp<sp/>+=<sp/><ref refid="group___d_a_c___private___defines_1ga051bab7263211bd232d13665339c1745" kindref="member">DOR_OFFSET</ref><sp/>+<sp/>((uint32_t)DAC_Channel<sp/>&gt;&gt;<sp/>2);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Returns<sp/>the<sp/>DAC<sp/>channel<sp/>data<sp/>output<sp/>register<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uint16_t)<sp/>(*(<ref refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" kindref="member">__IO</ref><sp/>uint32_t*)<sp/>tmp);</highlight></codeline>
<codeline lineno="442"><highlight class="normal">}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(STM32F10X_LD_VL)<sp/>||<sp/>defined<sp/>(STM32F10X_MD_VL)<sp/>||<sp/>defined<sp/>(STM32F10X_HD_VL)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref><sp/>DAC_GetFlagStatus(uint32_t<sp/>DAC_Channel,<sp/>uint32_t<sp/>DAC_FLAG)</highlight></codeline>
<codeline lineno="457"><highlight class="normal">{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___d_a_c___channel__selection_1gafb2b9bdaccb3a5e3396925d7cba02cc3" kindref="member">IS_DAC_CHANNEL</ref>(DAC_Channel));</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(IS_DAC_FLAG(DAC_FLAG));</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>status<sp/>of<sp/>the<sp/>specified<sp/>DAC<sp/>flag<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" kindref="member">DAC</ref>-&gt;SR<sp/>&amp;<sp/>(DAC_FLAG<sp/>&lt;&lt;<sp/>DAC_Channel))<sp/>!=<sp/>(uint8_t)<ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>)</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>DAC_FLAG<sp/>is<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" kindref="member">SET</ref>;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>DAC_FLAG<sp/>is<sp/>reset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>DAC_FLAG<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>bitstatus;</highlight></codeline>
<codeline lineno="476"><highlight class="normal">}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DAC_ClearFlag(uint32_t<sp/>DAC_Channel,<sp/>uint32_t<sp/>DAC_FLAG)</highlight></codeline>
<codeline lineno="490"><highlight class="normal">{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___d_a_c___channel__selection_1gafb2b9bdaccb3a5e3396925d7cba02cc3" kindref="member">IS_DAC_CHANNEL</ref>(DAC_Channel));</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(IS_DAC_FLAG(DAC_FLAG));</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>selected<sp/>DAC<sp/>flags<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><ref refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" kindref="member">DAC</ref>-&gt;SR<sp/>=<sp/>(DAC_FLAG<sp/>&lt;&lt;<sp/>DAC_Channel);</highlight></codeline>
<codeline lineno="497"><highlight class="normal">}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref><sp/>DAC_GetITStatus(uint32_t<sp/>DAC_Channel,<sp/>uint32_t<sp/>DAC_IT)</highlight></codeline>
<codeline lineno="511"><highlight class="normal">{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>uint32_t<sp/>enablestatus<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___d_a_c___channel__selection_1gafb2b9bdaccb3a5e3396925d7cba02cc3" kindref="member">IS_DAC_CHANNEL</ref>(DAC_Channel));</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(IS_DAC_IT(DAC_IT));</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Get<sp/>the<sp/>DAC_IT<sp/>enable<sp/>bit<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>enablestatus<sp/>=<sp/>(<ref refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" kindref="member">DAC</ref>-&gt;CR<sp/>&amp;<sp/>(DAC_IT<sp/>&lt;&lt;<sp/>DAC_Channel))<sp/>;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>status<sp/>of<sp/>the<sp/>specified<sp/>DAC<sp/>interrupt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(((<ref refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" kindref="member">DAC</ref>-&gt;SR<sp/>&amp;<sp/>(DAC_IT<sp/>&lt;&lt;<sp/>DAC_Channel))<sp/>!=<sp/>(uint32_t)<ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>)<sp/>&amp;&amp;<sp/>enablestatus)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>DAC_IT<sp/>is<sp/>set<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" kindref="member">SET</ref>;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>DAC_IT<sp/>is<sp/>reset<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>bitstatus<sp/>=<sp/><ref refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" kindref="member">RESET</ref>;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>DAC_IT<sp/>status<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><sp/>bitstatus;</highlight></codeline>
<codeline lineno="535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DAC_ClearITPendingBit(uint32_t<sp/>DAC_Channel,<sp/>uint32_t<sp/>DAC_IT)</highlight></codeline>
<codeline lineno="549"><highlight class="normal">{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>parameters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(<ref refid="group___d_a_c___channel__selection_1gafb2b9bdaccb3a5e3396925d7cba02cc3" kindref="member">IS_DAC_CHANNEL</ref>(DAC_Channel));</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><ref refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" kindref="member">assert_param</ref>(IS_DAC_IT(DAC_IT));<sp/></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>selected<sp/>DAC<sp/>interrupt<sp/>pending<sp/>bits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><ref refid="group___peripheral__declaration_1ga4aa2a4ab86ce00c23035e5cee2e7fc7e" kindref="member">DAC</ref>-&gt;SR<sp/>=<sp/>(DAC_IT<sp/>&lt;&lt;<sp/>DAC_Channel);</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="comment">/*******************<sp/>(C)<sp/>COPYRIGHT<sp/>2011<sp/>STMicroelectronics<sp/>*****END<sp/>OF<sp/>FILE****/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_dac.c"/>
  </compounddef>
</doxygen>
