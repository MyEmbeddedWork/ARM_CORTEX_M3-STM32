<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group___u_s_a_r_t___private___functions" kind="group">
    <compoundname>USART_Private_Functions</compoundname>
    <title>USART_Private_Functions</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga2f8e1ce72da21b6539d8e1f299ec3b0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_DeInit</definition>
        <argsstring>(USART_TypeDef *USARTx)</argsstring>
        <name>USART_DeInit</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <briefdescription>
<para>Deinitializes the USARTx peripheral registers to their default reset values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="130" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="130" bodyend="163"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___peripheral__declaration_1ga92871691058ff7ccffd7635930cb08da" compoundref="stm32f10x_8h" startline="1420">USART1</references>
        <references refid="group___r_c_c___exported___functions_1gad94553850ac07106a27ee85fec37efdf" compoundref="stm32f10x__rcc_8c" startline="1185" endline="1198">RCC_APB2PeriphResetCmd</references>
        <references refid="group___a_p_b2__peripheral_1ga14e1b3b6d84801c223a37a954b5b1910" compoundref="stm32f10x__rcc_8h" startline="510">RCC_APB2Periph_USART1</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" compoundref="stm32f10x_8h" startline="521">ENABLE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="group___peripheral__declaration_1gaf114a9eab03ca08a6fb720e511595930" compoundref="stm32f10x_8h" startline="1394">USART2</references>
        <references refid="group___r_c_c___exported___functions_1gab197ae4369c10b92640a733b40ed2801" compoundref="stm32f10x__rcc_8c" startline="1216" endline="1229">RCC_APB1PeriphResetCmd</references>
        <references refid="group___a_p_b1__peripheral_1gaa69c77220b943a42a4bacb8a3bf87dd0" compoundref="stm32f10x__rcc_8h" startline="540">RCC_APB1Periph_USART2</references>
        <references refid="group___peripheral__declaration_1ga2350115553c1fe0a7bc14e6a7ec6a225" compoundref="stm32f10x_8h" startline="1395">USART3</references>
        <references refid="group___a_p_b1__peripheral_1gaf72838a63d7d6200f251c1eb334cbaac" compoundref="stm32f10x__rcc_8h" startline="541">RCC_APB1Periph_USART3</references>
        <references refid="group___peripheral__declaration_1ga7c035f6f443c999fc043b2b7fb598800" compoundref="stm32f10x_8h" startline="1396">UART4</references>
        <references refid="group___a_p_b1__peripheral_1ga839d7ae3386622158210ecf53d9cd989" compoundref="stm32f10x__rcc_8h" startline="542">RCC_APB1Periph_UART4</references>
        <references refid="group___peripheral__declaration_1ga9274e37cf5e8a174fc5dd627b98ec0fe" compoundref="stm32f10x_8h" startline="1397">UART5</references>
        <references refid="group___a_p_b1__peripheral_1gaa00c73f88a7af45fb29df97b07acd856" compoundref="stm32f10x__rcc_8h" startline="543">RCC_APB1Periph_UART5</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga98da340ea0324002ba1b4263e91ab2ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_Init</definition>
        <argsstring>(USART_TypeDef *USARTx, USART_InitTypeDef *USART_InitStruct)</argsstring>
        <name>USART_Init</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type><ref refid="struct_u_s_a_r_t___init_type_def" kindref="compound">USART_InitTypeDef</ref> *</type>
          <declname>USART_InitStruct</declname>
        </param>
        <briefdescription>
<para>Initializes the USARTx peripheral according to the specified parameters in the USART_InitStruct . </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_InitStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <ref refid="struct_u_s_a_r_t___init_type_def" kindref="compound">USART_InitTypeDef</ref> structure that contains the configuration information for the specified USART peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="176" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="176" bodyend="273"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___flags_1ga9dc365e0a1e01031a8e0757a34b9d420" compoundref="stm32f10x__usart_8h" startline="347">IS_USART_BAUDRATE</references>
        <references refid="struct_u_s_a_r_t___init_type_def_1a6f763cb0e6044f838ee764ce437997b2" compoundref="stm32f10x__usart_8h" startline="58">USART_InitTypeDef::USART_BaudRate</references>
        <references refid="group___u_s_a_r_t___word___length_1ga5b07b29ee91f0bea4c10ec0fd74fbc04" compoundref="stm32f10x__usart_8h" startline="134">IS_USART_WORD_LENGTH</references>
        <references refid="struct_u_s_a_r_t___init_type_def_1a16d1fb7ccc2b51964f1bcfcbfba6d89d" compoundref="stm32f10x__usart_8h" startline="63">USART_InitTypeDef::USART_WordLength</references>
        <references refid="group___u_s_a_r_t___stop___bits_1ga6f9153c1fbee1058ba26ec88f0f20828" compoundref="stm32f10x__usart_8h" startline="148">IS_USART_STOPBITS</references>
        <references refid="struct_u_s_a_r_t___init_type_def_1ac745bceb79a6c4c2640fd8e8ce6639d6" compoundref="stm32f10x__usart_8h" startline="66">USART_InitTypeDef::USART_StopBits</references>
        <references refid="group___u_s_a_r_t___parity_1gaa87b2e338e0ccc42887d3c56901bee87" compoundref="stm32f10x__usart_8h" startline="163">IS_USART_PARITY</references>
        <references refid="struct_u_s_a_r_t___init_type_def_1a5ae66aba755bac37c5cf0dfbf529e2ed" compoundref="stm32f10x__usart_8h" startline="69">USART_InitTypeDef::USART_Parity</references>
        <references refid="group___u_s_a_r_t___mode_1gae9140e5ca405d2377fe0e82c79e136a2" compoundref="stm32f10x__usart_8h" startline="176">IS_USART_MODE</references>
        <references refid="struct_u_s_a_r_t___init_type_def_1a7d944d35d7d1fc79a63f249615148584" compoundref="stm32f10x__usart_8h" startline="76">USART_InitTypeDef::USART_Mode</references>
        <references refid="group___u_s_a_r_t___hardware___flow___control_1ga9b905eb465780173a2e98bc8b602c030" compoundref="stm32f10x__usart_8h" startline="188">IS_USART_HARDWARE_FLOW_CONTROL</references>
        <references refid="struct_u_s_a_r_t___init_type_def_1a9996edf3bfd90c36f03b4075969703f5" compoundref="stm32f10x__usart_8h" startline="79">USART_InitTypeDef::USART_HardwareFlowControl</references>
        <references refid="group___u_s_a_r_t___hardware___flow___control_1gaf3deaf4429b88db7753ee203f4797bd3" compoundref="stm32f10x__usart_8h" startline="184">USART_HardwareFlowControl_None</references>
        <references refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" compoundref="stm32f10x__usart_8h" startline="119">IS_USART_123_PERIPH</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" compoundref="stm32f10x_8h" startline="1244">USART_TypeDef::CR2</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga8a2294276016f30cb361a7f54ad07cd4" compoundref="stm32f10x__usart_8c" startline="62">CR2_STOP_CLEAR_Mask</references>
        <references refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" compoundref="stm32f10x_8h" startline="1242">USART_TypeDef::CR1</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga67f7dd35ea3d1296677e5fc50b88fa90" compoundref="stm32f10x__usart_8c" startline="55">CR1_CLEAR_Mask</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" compoundref="stm32f10x_8h" startline="1246">USART_TypeDef::CR3</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga085e8ef6bc8f5de45c5be95971715f7f" compoundref="stm32f10x__usart_8c" startline="75">CR3_CLEAR_Mask</references>
        <references refid="group___r_c_c___exported___functions_1ga3e9944fd1ed734275222bbb3e3f29993" compoundref="stm32f10x__rcc_8c" startline="908" endline="1031">RCC_GetClocksFreq</references>
        <references refid="group___peripheral__memory__map_1ga86162ab3f740db9026c1320d46938b4d" compoundref="stm32f10x_8h" startline="1327">USART1_BASE</references>
        <references refid="struct_r_c_c___clocks_type_def_1ad854f0b70a6c4cf6de6dbbdcbc99b856" compoundref="stm32f10x__rcc_8h" startline="51">RCC_ClocksTypeDef::PCLK2_Frequency</references>
        <references refid="struct_r_c_c___clocks_type_def_1add4cfc63c35178d187107edc764e0b8f" compoundref="stm32f10x__rcc_8h" startline="50">RCC_ClocksTypeDef::PCLK1_Frequency</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga11495857ca81074790c376317382140f" compoundref="stm32f10x__usart_8c" startline="84">CR1_OVER8_Set</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2044eb2a0a8a731400d309741bceb2f7" compoundref="stm32f10x_8h" startline="1240">USART_TypeDef::BRR</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga34e1faa2f312496c16cfd05155f4c8b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_StructInit</definition>
        <argsstring>(USART_InitTypeDef *USART_InitStruct)</argsstring>
        <name>USART_StructInit</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___init_type_def" kindref="compound">USART_InitTypeDef</ref> *</type>
          <declname>USART_InitStruct</declname>
        </param>
        <briefdescription>
<para>Fills each USART_InitStruct member with its default value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USART_InitStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <ref refid="struct_u_s_a_r_t___init_type_def" kindref="compound">USART_InitTypeDef</ref> structure which will be initialized. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="281" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="281" bodyend="290"/>
        <references refid="struct_u_s_a_r_t___init_type_def_1a6f763cb0e6044f838ee764ce437997b2" compoundref="stm32f10x__usart_8h" startline="58">USART_InitTypeDef::USART_BaudRate</references>
        <references refid="struct_u_s_a_r_t___init_type_def_1a16d1fb7ccc2b51964f1bcfcbfba6d89d" compoundref="stm32f10x__usart_8h" startline="63">USART_InitTypeDef::USART_WordLength</references>
        <references refid="group___u_s_a_r_t___word___length_1ga08682faddc657df85a93627b5a146c25" compoundref="stm32f10x__usart_8h" startline="131">USART_WordLength_8b</references>
        <references refid="struct_u_s_a_r_t___init_type_def_1ac745bceb79a6c4c2640fd8e8ce6639d6" compoundref="stm32f10x__usart_8h" startline="66">USART_InitTypeDef::USART_StopBits</references>
        <references refid="group___u_s_a_r_t___stop___bits_1gae2cb35620ba001f0d63e9e0be93e4a05" compoundref="stm32f10x__usart_8h" startline="144">USART_StopBits_1</references>
        <references refid="struct_u_s_a_r_t___init_type_def_1a5ae66aba755bac37c5cf0dfbf529e2ed" compoundref="stm32f10x__usart_8h" startline="69">USART_InitTypeDef::USART_Parity</references>
        <references refid="group___u_s_a_r_t___parity_1gab9deebcb0a859360dfec85074abaa3aa" compoundref="stm32f10x__usart_8h" startline="160">USART_Parity_No</references>
        <references refid="struct_u_s_a_r_t___init_type_def_1a7d944d35d7d1fc79a63f249615148584" compoundref="stm32f10x__usart_8h" startline="76">USART_InitTypeDef::USART_Mode</references>
        <references refid="group___u_s_a_r_t___mode_1gafefcc3d3c1a1f83b425784fa6289aecf" compoundref="stm32f10x__usart_8h" startline="174">USART_Mode_Rx</references>
        <references refid="group___u_s_a_r_t___mode_1ga22b2813509a062435ea68d086ec565b4" compoundref="stm32f10x__usart_8h" startline="175">USART_Mode_Tx</references>
        <references refid="struct_u_s_a_r_t___init_type_def_1a9996edf3bfd90c36f03b4075969703f5" compoundref="stm32f10x__usart_8h" startline="79">USART_InitTypeDef::USART_HardwareFlowControl</references>
        <references refid="group___u_s_a_r_t___hardware___flow___control_1gaf3deaf4429b88db7753ee203f4797bd3" compoundref="stm32f10x__usart_8h" startline="184">USART_HardwareFlowControl_None</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1gadb50c7a2175c91acd3728f8eefd0c63d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_ClockInit</definition>
        <argsstring>(USART_TypeDef *USARTx, USART_ClockInitTypeDef *USART_ClockInitStruct)</argsstring>
        <name>USART_ClockInit</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type><ref refid="struct_u_s_a_r_t___clock_init_type_def" kindref="compound">USART_ClockInitTypeDef</ref> *</type>
          <declname>USART_ClockInitStruct</declname>
        </param>
        <briefdescription>
<para>Initializes the USARTx peripheral Clock according to the specified parameters in the USART_ClockInitStruct . </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2, 3 to select the USART peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_ClockInitStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <ref refid="struct_u_s_a_r_t___clock_init_type_def" kindref="compound">USART_ClockInitTypeDef</ref> structure that contains the configuration information for the specified USART peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The Smart Card and Synchronous modes are not available for UART4 and UART5. </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="302" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="302" bodyend="325"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" compoundref="stm32f10x__usart_8h" startline="119">IS_USART_123_PERIPH</references>
        <references refid="group___u_s_a_r_t___clock_1ga0f1e1ba37690b21b7338ed3b06614cf6" compoundref="stm32f10x__usart_8h" startline="202">IS_USART_CLOCK</references>
        <references refid="struct_u_s_a_r_t___clock_init_type_def_1a229ba7c3f9a4d6d56513e6899f6c6693" compoundref="stm32f10x__usart_8h" startline="91">USART_ClockInitTypeDef::USART_Clock</references>
        <references refid="group___u_s_a_r_t___clock___polarity_1ga833e9d2e85ab84658c7a7c18bd0bc8b9" compoundref="stm32f10x__usart_8h" startline="214">IS_USART_CPOL</references>
        <references refid="struct_u_s_a_r_t___clock_init_type_def_1a01450cba8a40cf9a624b25979dc6aa77" compoundref="stm32f10x__usart_8h" startline="94">USART_ClockInitTypeDef::USART_CPOL</references>
        <references refid="group___u_s_a_r_t___clock___phase_1ga66fa1a3a757025fcd8dd069a90689f88" compoundref="stm32f10x__usart_8h" startline="226">IS_USART_CPHA</references>
        <references refid="struct_u_s_a_r_t___clock_init_type_def_1abda3a2172bd5819e1c207dc0d1c822d8" compoundref="stm32f10x__usart_8h" startline="97">USART_ClockInitTypeDef::USART_CPHA</references>
        <references refid="group___u_s_a_r_t___last___bit_1gaa941695e5612b53e9c2aca6a9fa0d695" compoundref="stm32f10x__usart_8h" startline="238">IS_USART_LASTBIT</references>
        <references refid="struct_u_s_a_r_t___clock_init_type_def_1ab1b28d63d2be6e57849666d78a4467bd" compoundref="stm32f10x__usart_8h" startline="100">USART_ClockInitTypeDef::USART_LastBit</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" compoundref="stm32f10x_8h" startline="1244">USART_TypeDef::CR2</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga846e1873279b2b0798cc34d76bd80592" compoundref="stm32f10x__usart_8c" startline="63">CR2_CLOCK_CLEAR_Mask</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga59df27d0adda18b16ee28d47672cc724" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_ClockStructInit</definition>
        <argsstring>(USART_ClockInitTypeDef *USART_ClockInitStruct)</argsstring>
        <name>USART_ClockStructInit</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___clock_init_type_def" kindref="compound">USART_ClockInitTypeDef</ref> *</type>
          <declname>USART_ClockInitStruct</declname>
        </param>
        <briefdescription>
<para>Fills each USART_ClockInitStruct member with its default value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USART_ClockInitStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <ref refid="struct_u_s_a_r_t___clock_init_type_def" kindref="compound">USART_ClockInitTypeDef</ref> structure which will be initialized. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="333" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="333" bodyend="340"/>
        <references refid="struct_u_s_a_r_t___clock_init_type_def_1a229ba7c3f9a4d6d56513e6899f6c6693" compoundref="stm32f10x__usart_8h" startline="91">USART_ClockInitTypeDef::USART_Clock</references>
        <references refid="group___u_s_a_r_t___clock_1ga56c12b81d19853c093e0a373d0c52fb5" compoundref="stm32f10x__usart_8h" startline="200">USART_Clock_Disable</references>
        <references refid="struct_u_s_a_r_t___clock_init_type_def_1a01450cba8a40cf9a624b25979dc6aa77" compoundref="stm32f10x__usart_8h" startline="94">USART_ClockInitTypeDef::USART_CPOL</references>
        <references refid="group___u_s_a_r_t___clock___polarity_1ga194d60b47d8042d39e843c52f3a6aa1a" compoundref="stm32f10x__usart_8h" startline="212">USART_CPOL_Low</references>
        <references refid="struct_u_s_a_r_t___clock_init_type_def_1abda3a2172bd5819e1c207dc0d1c822d8" compoundref="stm32f10x__usart_8h" startline="97">USART_ClockInitTypeDef::USART_CPHA</references>
        <references refid="group___u_s_a_r_t___clock___phase_1gab6c0fb052fb9bc418cf368c1a0e4643b" compoundref="stm32f10x__usart_8h" startline="224">USART_CPHA_1Edge</references>
        <references refid="struct_u_s_a_r_t___clock_init_type_def_1ab1b28d63d2be6e57849666d78a4467bd" compoundref="stm32f10x__usart_8h" startline="100">USART_ClockInitTypeDef::USART_LastBit</references>
        <references refid="group___u_s_a_r_t___last___bit_1ga129c89b9e0dbb3ce43ee92589b3324e5" compoundref="stm32f10x__usart_8h" startline="236">USART_LastBit_Disable</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga45e51626739c5f22a6567c8a85d1d85e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_Cmd</definition>
        <argsstring>(USART_TypeDef *USARTx, FunctionalState NewState)</argsstring>
        <name>USART_Cmd</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified USART peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the USARTx peripheral. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="351" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="351" bodyend="367"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" compoundref="stm32f10x_8h" startline="1242">USART_TypeDef::CR1</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga95f5821be56b1a5dbfdd38fdb37ed54c" compoundref="stm32f10x__usart_8c" startline="47">CR1_UE_Set</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga9c75a44192cb3dbbbf509cddfc47481c" compoundref="stm32f10x__usart_8c" startline="48">CR1_UE_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga6d8f2dd1f34060ae7e386e3e5d56b6f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_ITConfig</definition>
        <argsstring>(USART_TypeDef *USARTx, uint16_t USART_IT, FunctionalState NewState)</argsstring>
        <name>USART_ITConfig</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>USART_IT</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified USART interrupts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_IT</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the USART interrupt sources to be enabled or disabled. This parameter can be one of the following values: <itemizedlist>
<listitem><para>USART_IT_CTS: CTS change interrupt (not available for UART4 and UART5) </para></listitem>
<listitem><para>USART_IT_LBD: LIN Break detection interrupt </para></listitem>
<listitem><para>USART_IT_TXE: Transmit Data Register empty interrupt </para></listitem>
<listitem><para>USART_IT_TC: Transmission complete interrupt </para></listitem>
<listitem><para>USART_IT_RXNE: Receive Data register not empty interrupt </para></listitem>
<listitem><para>USART_IT_IDLE: Idle line detection interrupt </para></listitem>
<listitem><para>USART_IT_PE: Parity Error interrupt </para></listitem>
<listitem><para>USART_IT_ERR: Error interrupt(Frame error, noise error, overrun error) </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the specified USARTx interrupts. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="388" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="388" bodyend="431"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___interrupt__definition_1ga37ce140eae1938a414ff32afed5ef236" compoundref="stm32f10x__usart_8h" startline="259">IS_USART_CONFIG_IT</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___u_s_a_r_t___interrupt__definition_1gab49efbefaca2921e8cbe8f5146e99dbd" compoundref="stm32f10x__usart_8h" startline="254">USART_IT_CTS</references>
        <references refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" compoundref="stm32f10x__usart_8h" startline="119">IS_USART_123_PERIPH</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga401c753d4de6ab56fcb026c91b8c8487" compoundref="stm32f10x__usart_8c" startline="81">IT_Mask</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" compoundref="core__cm0_8h" startline="221">__IO</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga902857f199ebfba21c63d725354af66f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_DMACmd</definition>
        <argsstring>(USART_TypeDef *USARTx, uint16_t USART_DMAReq, FunctionalState NewState)</argsstring>
        <name>USART_DMACmd</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>USART_DMAReq</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the USART�s DMA interface. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_DMAReq</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the DMA request. This parameter can be any combination of the following values: <itemizedlist>
<listitem><para>USART_DMAReq_Tx: USART DMA transmit request </para></listitem>
<listitem><para>USART_DMAReq_Rx: USART DMA receive request </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the DMA Request sources. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The DMA mode is not available for UART5 except in the STM32 High density value line devices(STM32F10X_HD_VL). </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="448" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="448" bodyend="466"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___d_m_a___requests_1ga8be7a899d21d82de2ee0a763b4564dc3" compoundref="stm32f10x__usart_8h" startline="280">IS_USART_DMAREQ</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" compoundref="stm32f10x_8h" startline="1246">USART_TypeDef::CR3</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga65ec9928817f3f031dd9a4dfc95d6666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_SetAddress</definition>
        <argsstring>(USART_TypeDef *USARTx, uint8_t USART_Address)</argsstring>
        <name>USART_SetAddress</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>USART_Address</declname>
        </param>
        <briefdescription>
<para>Sets the address of the USART node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_Address</parametername>
</parameternamelist>
<parameterdescription>
<para>Indicates the address of the USART node. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="476" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="476" bodyend="498"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___flags_1ga194e771c3324f9e130b2887c701460a7" compoundref="stm32f10x__usart_8h" startline="348">IS_USART_ADDRESS</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" compoundref="stm32f10x_8h" startline="1244">USART_TypeDef::CR2</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga080c343a5a95d4419789b94405c27764" compoundref="stm32f10x__usart_8c" startline="56">CR2_Address_Mask</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga4965417c2412c36e462fcad50a8d5393" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_WakeUpConfig</definition>
        <argsstring>(USART_TypeDef *USARTx, uint16_t USART_WakeUp)</argsstring>
        <name>USART_WakeUpConfig</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>USART_WakeUp</declname>
        </param>
        <briefdescription>
<para>Selects the USART WakeUp method. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_WakeUp</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the USART wakeup method. This parameter can be one of the following values: <itemizedlist>
<listitem><para>USART_WakeUp_IdleLine: WakeUp by an idle line detection </para></listitem>
<listitem><para>USART_WakeUp_AddressMark: WakeUp by an address mark </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="511" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="511" bodyend="519"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___wake_up__methods_1ga3611be417bdb82f42dc2ca17584271f9" compoundref="stm32f10x__usart_8h" startline="292">IS_USART_WAKEUP</references>
        <references refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" compoundref="stm32f10x_8h" startline="1242">USART_TypeDef::CR1</references>
        <references refid="group___u_s_a_r_t___private___defines_1gae4045dea092c3cbfe07d14fef39195ce" compoundref="stm32f10x__usart_8c" startline="50">CR1_WAKE_Mask</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1gac27b78ce445a16fe33851d2f87781c02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_ReceiverWakeUpCmd</definition>
        <argsstring>(USART_TypeDef *USARTx, FunctionalState NewState)</argsstring>
        <name>USART_ReceiverWakeUpCmd</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Determines if the USART is in mute mode or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the USART mute mode. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="530" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="530" bodyend="546"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" compoundref="stm32f10x_8h" startline="1242">USART_TypeDef::CR1</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga5cb566b7c5e126e5ef11dd25bba50ffa" compoundref="stm32f10x__usart_8c" startline="52">CR1_RWU_Set</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga064a46d19ffffddd410e969798d335ee" compoundref="stm32f10x__usart_8c" startline="53">CR1_RWU_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga7bc2d291831cbc5e53e73337308029b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_LINBreakDetectLengthConfig</definition>
        <argsstring>(USART_TypeDef *USARTx, uint16_t USART_LINBreakDetectLength)</argsstring>
        <name>USART_LINBreakDetectLengthConfig</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>USART_LINBreakDetectLength</declname>
        </param>
        <briefdescription>
<para>Sets the USART LIN Break detection length. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_LINBreakDetectLength</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the LIN break detection length. This parameter can be one of the following values: <itemizedlist>
<listitem><para>USART_LINBreakDetectLength_10b: 10-bit break detection </para></listitem>
<listitem><para>USART_LINBreakDetectLength_11b: 11-bit break detection </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="559" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="559" bodyend="567"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___l_i_n___break___detection___length_1gaa7a45d542b1df5da1160777ad4a80d72" compoundref="stm32f10x__usart_8h" startline="304">IS_USART_LIN_BREAK_DETECT_LENGTH</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" compoundref="stm32f10x_8h" startline="1244">USART_TypeDef::CR2</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga9b365a89de44809a52895090e9050646" compoundref="stm32f10x__usart_8c" startline="61">CR2_LBDL_Mask</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga9fdd6296f4ca4acdfcbd58bf56bd4185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_LINCmd</definition>
        <argsstring>(USART_TypeDef *USARTx, FunctionalState NewState)</argsstring>
        <name>USART_LINCmd</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the USART�s LIN mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the USART LIN mode. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="578" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="578" bodyend="594"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" compoundref="stm32f10x_8h" startline="1244">USART_TypeDef::CR2</references>
        <references refid="group___u_s_a_r_t___private___defines_1gabc3f2b022d70a11fd0605e58cb23023f" compoundref="stm32f10x__usart_8c" startline="58">CR2_LINEN_Set</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga7b8fbe7be4c85c16ea1c1e3c9fa95b05" compoundref="stm32f10x__usart_8c" startline="59">CR2_LINEN_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga0b43d42da9540f446d494bf69823c6fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_SendData</definition>
        <argsstring>(USART_TypeDef *USARTx, uint16_t Data)</argsstring>
        <name>USART_SendData</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
<para>Transmits single data through the USARTx peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>the data to transmit. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="604" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="604" bodyend="612"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___flags_1gafd6307e41818e076d31f3c24cb5ba135" compoundref="stm32f10x__usart_8h" startline="349">IS_USART_DATA</references>
        <references refid="struct_u_s_a_r_t___type_def_1accee34aaec89aad4aeef512bba173ae5" compoundref="stm32f10x_8h" startline="1238">USART_TypeDef::DR</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1gac67a91845b0b1d54d31bdfb1c5e9867c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t USART_ReceiveData</definition>
        <argsstring>(USART_TypeDef *USARTx)</argsstring>
        <name>USART_ReceiveData</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <briefdescription>
<para>Returns the most recent received data by the USARTx peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>received data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="621" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="621" bodyend="628"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="struct_u_s_a_r_t___type_def_1accee34aaec89aad4aeef512bba173ae5" compoundref="stm32f10x_8h" startline="1238">USART_TypeDef::DR</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga39a3d33e23ee28529fa8f7259ce6811e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_SendBreak</definition>
        <argsstring>(USART_TypeDef *USARTx)</argsstring>
        <name>USART_SendBreak</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <briefdescription>
<para>Transmits break characters. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="637" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="637" bodyend="644"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" compoundref="stm32f10x_8h" startline="1242">USART_TypeDef::CR1</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga2813b7fa1263aecfeefa48f8a55938b9" compoundref="stm32f10x__usart_8c" startline="54">CR1_SBK_Set</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1gac4a35c6acd71ae7e0d67c1f03f0a8777" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_SetGuardTime</definition>
        <argsstring>(USART_TypeDef *USARTx, uint8_t USART_GuardTime)</argsstring>
        <name>USART_SetGuardTime</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>USART_GuardTime</declname>
        </param>
        <briefdescription>
<para>Sets the specified USART guard time. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the USART peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_GuardTime</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the guard time. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The guard time bits are not available for UART4 and UART5. </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="653" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="653" bodyend="662"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" compoundref="stm32f10x__usart_8h" startline="119">IS_USART_123_PERIPH</references>
        <references refid="struct_u_s_a_r_t___type_def_1abe51502097b1fd281d0a2a1b157d769e" compoundref="stm32f10x_8h" startline="1248">USART_TypeDef::GTPR</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga2fe593d0c308e2245bb66905930b3ebb" compoundref="stm32f10x__usart_8c" startline="79">GTPR_LSB_Mask</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1gaf5da8f2eee8245425584d85d4f62cc33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_SetPrescaler</definition>
        <argsstring>(USART_TypeDef *USARTx, uint8_t USART_Prescaler)</argsstring>
        <name>USART_SetPrescaler</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>USART_Prescaler</declname>
        </param>
        <briefdescription>
<para>Sets the system clock prescaler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_Prescaler</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the prescaler clock. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The function is used for IrDA mode with UART4 and UART5. </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="673" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="673" bodyend="694"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="struct_u_s_a_r_t___type_def_1abe51502097b1fd281d0a2a1b157d769e" compoundref="stm32f10x_8h" startline="1248">USART_TypeDef::GTPR</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga405b4222892bafdf1d084de5efd24d70" compoundref="stm32f10x__usart_8c" startline="80">GTPR_MSB_Mask</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1gabd1347e244c623447151ba3a5e986c5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_SmartCardCmd</definition>
        <argsstring>(USART_TypeDef *USARTx, FunctionalState NewState)</argsstring>
        <name>USART_SmartCardCmd</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the USART�s Smart Card mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the USART peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the Smart Card mode. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The Smart Card mode is not available for UART4 and UART5. </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="704" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="704" bodyend="719"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" compoundref="stm32f10x__usart_8h" startline="119">IS_USART_123_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" compoundref="stm32f10x_8h" startline="1246">USART_TypeDef::CR3</references>
        <references refid="group___u_s_a_r_t___private___defines_1gab47df7b36b4f1315953f6aa45de2fb61" compoundref="stm32f10x__usart_8c" startline="65">CR3_SCEN_Set</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga294c473dc7f8ff3e9cbaa0675c8c75f3" compoundref="stm32f10x__usart_8c" startline="66">CR3_SCEN_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga62e22f47e38aa53f2edce8771f7a5dfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_SmartCardNACKCmd</definition>
        <argsstring>(USART_TypeDef *USARTx, FunctionalState NewState)</argsstring>
        <name>USART_SmartCardNACKCmd</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables NACK transmission. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1, 2 or 3 to select the USART peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the NACK transmission. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The Smart Card mode is not available for UART4 and UART5. </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="729" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="729" bodyend="744"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" compoundref="stm32f10x__usart_8h" startline="119">IS_USART_123_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" compoundref="stm32f10x_8h" startline="1246">USART_TypeDef::CR3</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga950cc9f7251709854754add7d9aaca60" compoundref="stm32f10x__usart_8c" startline="68">CR3_NACK_Set</references>
        <references refid="group___u_s_a_r_t___private___defines_1gabed0cac273ff4faf009e8c35243c1e10" compoundref="stm32f10x__usart_8c" startline="69">CR3_NACK_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1gaaa23b05fe0e1896bad90da7f82750831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_HalfDuplexCmd</definition>
        <argsstring>(USART_TypeDef *USARTx, FunctionalState NewState)</argsstring>
        <name>USART_HalfDuplexCmd</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the USART�s Half Duplex communication. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the USART Communication. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="755" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="755" bodyend="771"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" compoundref="stm32f10x_8h" startline="1246">USART_TypeDef::CR3</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga0c5c30ea9777d0c8c6f1b5ff85dfca3c" compoundref="stm32f10x__usart_8c" startline="71">CR3_HDSEL_Set</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga762c72448ba24f3487dfa457a8dcc9fc" compoundref="stm32f10x__usart_8c" startline="72">CR3_HDSEL_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga3897bab07491d9239f8a238a9a7cddea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_OverSampling8Cmd</definition>
        <argsstring>(USART_TypeDef *USARTx, FunctionalState NewState)</argsstring>
        <name>USART_OverSampling8Cmd</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the USART&apos;s 8x oversampling mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the USART one bit sampling method. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function has to be called before calling <ref refid="group___u_s_a_r_t___private___functions_1ga98da340ea0324002ba1b4263e91ab2ff" kindref="member">USART_Init()</ref> function in order to have correct baudrate Divider value. </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="786" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="786" bodyend="802"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" compoundref="stm32f10x_8h" startline="1242">USART_TypeDef::CR1</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga11495857ca81074790c376317382140f" compoundref="stm32f10x__usart_8c" startline="84">CR1_OVER8_Set</references>
        <references refid="group___u_s_a_r_t___private___defines_1gaf84165f2974000906c495b3c27dc5121" compoundref="stm32f10x__usart_8c" startline="85">CR1_OVER8_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga3ed89ea8765d851510cfe90f7d90cbbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_OneBitMethodCmd</definition>
        <argsstring>(USART_TypeDef *USARTx, FunctionalState NewState)</argsstring>
        <name>USART_OneBitMethodCmd</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the USART&apos;s one bit sampling method. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the USART one bit sampling method. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="813" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="813" bodyend="829"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" compoundref="stm32f10x_8h" startline="1246">USART_TypeDef::CR3</references>
        <references refid="group___u_s_a_r_t___private___defines_1gac512024dda541435acfe0b50de925105" compoundref="stm32f10x__usart_8c" startline="88">CR3_ONEBITE_Set</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga55dc289819dde550630df98267bbef52" compoundref="stm32f10x__usart_8c" startline="89">CR3_ONEBITE_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga81a0cd36199040bf6d266b57babd678e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_IrDAConfig</definition>
        <argsstring>(USART_TypeDef *USARTx, uint16_t USART_IrDAMode)</argsstring>
        <name>USART_IrDAConfig</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>USART_IrDAMode</declname>
        </param>
        <briefdescription>
<para>Configures the USART&apos;s IrDA interface. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_IrDAMode</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the IrDA mode. This parameter can be one of the following values: <itemizedlist>
<listitem><para>USART_IrDAMode_LowPower </para></listitem>
<listitem><para>USART_IrDAMode_Normal </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="842" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="842" bodyend="850"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___ir_d_a___low___power_1ga7790838ff8ee71089da2c0e5bceee569" compoundref="stm32f10x__usart_8h" startline="317">IS_USART_IRDA_MODE</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" compoundref="stm32f10x_8h" startline="1246">USART_TypeDef::CR3</references>
        <references refid="group___u_s_a_r_t___private___defines_1gaea5d8d002a34c3a587719533db2c17f9" compoundref="stm32f10x__usart_8c" startline="74">CR3_IRLP_Mask</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1gabff56ebb494fdfadcc6ef4fe9ac8dd24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_IrDACmd</definition>
        <argsstring>(USART_TypeDef *USARTx, FunctionalState NewState)</argsstring>
        <name>USART_IrDACmd</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the USART&apos;s IrDA interface. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the IrDA mode. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="861" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="861" bodyend="877"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" compoundref="stm32f10x_8h" startline="1246">USART_TypeDef::CR3</references>
        <references refid="group___u_s_a_r_t___private___defines_1gad5dd1d08f3836f9a3c3f3cc0c66a8b8f" compoundref="stm32f10x__usart_8c" startline="77">CR3_IREN_Set</references>
        <references refid="group___u_s_a_r_t___private___defines_1gad1520358de97e48fe18780e5cc5296bd" compoundref="stm32f10x__usart_8c" startline="78">CR3_IREN_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga144630722defc9e312f0ad280b68e9da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref></type>
        <definition>FlagStatus USART_GetFlagStatus</definition>
        <argsstring>(USART_TypeDef *USARTx, uint16_t USART_FLAG)</argsstring>
        <name>USART_GetFlagStatus</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>USART_FLAG</declname>
        </param>
        <briefdescription>
<para>Checks whether the specified USART flag is set or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_FLAG</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the flag to check. This parameter can be one of the following values: <itemizedlist>
<listitem><para>USART_FLAG_CTS: CTS Change flag (not available for UART4 and UART5) </para></listitem>
<listitem><para>USART_FLAG_LBD: LIN Break detection flag </para></listitem>
<listitem><para>USART_FLAG_TXE: Transmit data register empty flag </para></listitem>
<listitem><para>USART_FLAG_TC: Transmission Complete flag </para></listitem>
<listitem><para>USART_FLAG_RXNE: Receive data register not empty flag </para></listitem>
<listitem><para>USART_FLAG_IDLE: Idle Line detection flag </para></listitem>
<listitem><para>USART_FLAG_ORE: OverRun Error flag </para></listitem>
<listitem><para>USART_FLAG_NE: Noise Error flag </para></listitem>
<listitem><para>USART_FLAG_FE: Framing Error flag </para></listitem>
<listitem><para>USART_FLAG_PE: Parity Error flag </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of USART_FLAG (SET or RESET). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="898" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="898" bodyend="919"/>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___flags_1ga3e20747ce7c97a36718933c0cb3dac29" compoundref="stm32f10x__usart_8h" startline="337">IS_USART_FLAG</references>
        <references refid="group___u_s_a_r_t___flags_1ga94b7272319cca88a65075d5cb6048441" compoundref="stm32f10x__usart_8h" startline="327">USART_FLAG_CTS</references>
        <references refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" compoundref="stm32f10x__usart_8h" startline="119">IS_USART_123_PERIPH</references>
        <references refid="struct_u_s_a_r_t___type_def_1a3f1fd9f0c004d3087caeba4815faa41c" compoundref="stm32f10x_8h" startline="1236">USART_TypeDef::SR</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" compoundref="stm32f10x_8h" startline="519">SET</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1gad962e148fc466ae1b45b288f6c91d966" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_ClearFlag</definition>
        <argsstring>(USART_TypeDef *USARTx, uint16_t USART_FLAG)</argsstring>
        <name>USART_ClearFlag</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>USART_FLAG</declname>
        </param>
        <briefdescription>
<para>Clears the USARTx&apos;s pending flags. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_FLAG</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the flag to clear. This parameter can be any combination of the following values: <itemizedlist>
<listitem><para>USART_FLAG_CTS: CTS Change flag (not available for UART4 and UART5). </para></listitem>
<listitem><para>USART_FLAG_LBD: LIN Break detection flag. </para></listitem>
<listitem><para>USART_FLAG_TC: Transmission Complete flag. </para></listitem>
<listitem><para>USART_FLAG_RXNE: Receive data register not empty flag.</para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun error) and IDLE (Idle line detected) flags are cleared by software sequence: a read operation to USART_SR register (<ref refid="group___u_s_a_r_t___private___functions_1ga144630722defc9e312f0ad280b68e9da" kindref="member">USART_GetFlagStatus()</ref>) followed by a read operation to USART_DR register (<ref refid="group___u_s_a_r_t___private___functions_1gac67a91845b0b1d54d31bdfb1c5e9867c" kindref="member">USART_ReceiveData()</ref>).</para></listitem><listitem><para>RXNE flag can be also cleared by a read to the USART_DR register (<ref refid="group___u_s_a_r_t___private___functions_1gac67a91845b0b1d54d31bdfb1c5e9867c" kindref="member">USART_ReceiveData()</ref>).</para></listitem><listitem><para>TC flag can be also cleared by software sequence: a read operation to USART_SR register (<ref refid="group___u_s_a_r_t___private___functions_1ga144630722defc9e312f0ad280b68e9da" kindref="member">USART_GetFlagStatus()</ref>) followed by a write operation to USART_DR register (<ref refid="group___u_s_a_r_t___private___functions_1ga0b43d42da9540f446d494bf69823c6fb" kindref="member">USART_SendData()</ref>).</para></listitem><listitem><para>TXE flag is cleared only by a write to the USART_DR register (<ref refid="group___u_s_a_r_t___private___functions_1ga0b43d42da9540f446d494bf69823c6fb" kindref="member">USART_SendData()</ref>). </para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="947" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="947" bodyend="959"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___flags_1gadc905fdce8defba31c00c95554a26bc3" compoundref="stm32f10x__usart_8h" startline="343">IS_USART_CLEAR_FLAG</references>
        <references refid="group___u_s_a_r_t___flags_1ga94b7272319cca88a65075d5cb6048441" compoundref="stm32f10x__usart_8h" startline="327">USART_FLAG_CTS</references>
        <references refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" compoundref="stm32f10x__usart_8h" startline="119">IS_USART_123_PERIPH</references>
        <references refid="struct_u_s_a_r_t___type_def_1a3f1fd9f0c004d3087caeba4815faa41c" compoundref="stm32f10x_8h" startline="1236">USART_TypeDef::SR</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga93d8f031241bcdbe938d091a85295445" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref></type>
        <definition>ITStatus USART_GetITStatus</definition>
        <argsstring>(USART_TypeDef *USARTx, uint16_t USART_IT)</argsstring>
        <name>USART_GetITStatus</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>USART_IT</declname>
        </param>
        <briefdescription>
<para>Checks whether the specified USART interrupt has occurred or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_IT</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the USART interrupt source to check. This parameter can be one of the following values: <itemizedlist>
<listitem><para>USART_IT_CTS: CTS change interrupt (not available for UART4 and UART5) </para></listitem>
<listitem><para>USART_IT_LBD: LIN Break detection interrupt </para></listitem>
<listitem><para>USART_IT_TXE: Tansmit Data Register empty interrupt </para></listitem>
<listitem><para>USART_IT_TC: Transmission complete interrupt </para></listitem>
<listitem><para>USART_IT_RXNE: Receive Data register not empty interrupt </para></listitem>
<listitem><para>USART_IT_IDLE: Idle line detection interrupt </para></listitem>
<listitem><para>USART_IT_ORE: OverRun Error interrupt </para></listitem>
<listitem><para>USART_IT_NE: Noise Error interrupt </para></listitem>
<listitem><para>USART_IT_FE: Framing Error interrupt </para></listitem>
<listitem><para>USART_IT_PE: Parity Error interrupt </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of USART_IT (SET or RESET). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="980" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="980" bodyend="1025"/>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___interrupt__definition_1ga9a8014793a383d710eaaf4185f2b795d" compoundref="stm32f10x__usart_8h" startline="263">IS_USART_GET_IT</references>
        <references refid="group___u_s_a_r_t___interrupt__definition_1gab49efbefaca2921e8cbe8f5146e99dbd" compoundref="stm32f10x__usart_8h" startline="254">USART_IT_CTS</references>
        <references refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" compoundref="stm32f10x__usart_8h" startline="119">IS_USART_123_PERIPH</references>
        <references refid="group___u_s_a_r_t___private___defines_1ga401c753d4de6ab56fcb026c91b8c8487" compoundref="stm32f10x__usart_8c" startline="81">IT_Mask</references>
        <references refid="struct_u_s_a_r_t___type_def_1a5de50313b1437f7f926093f00902d37a" compoundref="stm32f10x_8h" startline="1242">USART_TypeDef::CR1</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2a494156d185762e4596696796c393bc" compoundref="stm32f10x_8h" startline="1244">USART_TypeDef::CR2</references>
        <references refid="struct_u_s_a_r_t___type_def_1a2b9d1df38cb1d745305c8190a8707a0f" compoundref="stm32f10x_8h" startline="1246">USART_TypeDef::CR3</references>
        <references refid="struct_u_s_a_r_t___type_def_1a3f1fd9f0c004d3087caeba4815faa41c" compoundref="stm32f10x_8h" startline="1236">USART_TypeDef::SR</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" compoundref="stm32f10x_8h" startline="519">SET</references>
      </memberdef>
      <memberdef kind="function" id="group___u_s_a_r_t___private___functions_1ga1fc25d0338695063be5e50156955d9bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void USART_ClearITPendingBit</definition>
        <argsstring>(USART_TypeDef *USARTx, uint16_t USART_IT)</argsstring>
        <name>USART_ClearITPendingBit</name>
        <param>
          <type><ref refid="struct_u_s_a_r_t___type_def" kindref="compound">USART_TypeDef</ref> *</type>
          <declname>USARTx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>USART_IT</declname>
        </param>
        <briefdescription>
<para>Clears the USARTx&apos;s interrupt pending bits. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>USARTx</parametername>
</parameternamelist>
<parameterdescription>
<para>Select the USART or the UART peripheral. This parameter can be one of the following values: USART1, USART2, USART3, UART4 or UART5. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>USART_IT</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the interrupt pending bit to clear. This parameter can be one of the following values: <itemizedlist>
<listitem><para>USART_IT_CTS: CTS change interrupt (not available for UART4 and UART5) </para></listitem>
<listitem><para>USART_IT_LBD: LIN Break detection interrupt </para></listitem>
<listitem><para>USART_IT_TC: Transmission complete interrupt. </para></listitem>
<listitem><para>USART_IT_RXNE: Receive Data register not empty interrupt.</para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun error) and IDLE (Idle line detected) pending bits are cleared by software sequence: a read operation to USART_SR register (<ref refid="group___u_s_a_r_t___private___functions_1ga93d8f031241bcdbe938d091a85295445" kindref="member">USART_GetITStatus()</ref>) followed by a read operation to USART_DR register (<ref refid="group___u_s_a_r_t___private___functions_1gac67a91845b0b1d54d31bdfb1c5e9867c" kindref="member">USART_ReceiveData()</ref>).</para></listitem><listitem><para>RXNE pending bit can be also cleared by a read to the USART_DR register (<ref refid="group___u_s_a_r_t___private___functions_1gac67a91845b0b1d54d31bdfb1c5e9867c" kindref="member">USART_ReceiveData()</ref>).</para></listitem><listitem><para>TC pending bit can be also cleared by software sequence: a read operation to USART_SR register (<ref refid="group___u_s_a_r_t___private___functions_1ga93d8f031241bcdbe938d091a85295445" kindref="member">USART_GetITStatus()</ref>) followed by a write operation to USART_DR register (<ref refid="group___u_s_a_r_t___private___functions_1ga0b43d42da9540f446d494bf69823c6fb" kindref="member">USART_SendData()</ref>).</para></listitem><listitem><para>TXE pending bit is cleared only by a write to the USART_DR register (<ref refid="group___u_s_a_r_t___private___functions_1ga0b43d42da9540f446d494bf69823c6fb" kindref="member">USART_SendData()</ref>). </para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" line="1054" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" bodystart="1054" bodyend="1080"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___u_s_a_r_t___exported___constants_1gae890b8e77c1b84a77c485a353949f7eb" compoundref="stm32f10x__usart_8h" startline="113">IS_USART_ALL_PERIPH</references>
        <references refid="group___u_s_a_r_t___interrupt__definition_1ga3ceda175140b84eea02a2261ebda4efd" compoundref="stm32f10x__usart_8h" startline="268">IS_USART_CLEAR_IT</references>
        <references refid="group___u_s_a_r_t___interrupt__definition_1gab49efbefaca2921e8cbe8f5146e99dbd" compoundref="stm32f10x__usart_8h" startline="254">USART_IT_CTS</references>
        <references refid="group___u_s_a_r_t___exported___constants_1ga30e128c5edde23e1315724c0b2000d0d" compoundref="stm32f10x__usart_8h" startline="119">IS_USART_123_PERIPH</references>
        <references refid="struct_u_s_a_r_t___type_def_1a3f1fd9f0c004d3087caeba4815faa41c" compoundref="stm32f10x_8h" startline="1236">USART_TypeDef::SR</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
