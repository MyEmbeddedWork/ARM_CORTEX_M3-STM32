<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="stm32f10x__i2c_8h" kind="file" language="C++">
    <compoundname>stm32f10x_i2c.h</compoundname>
    <includes refid="stm32f10x_8h" local="yes">stm32f10x.h</includes>
    <includedby refid="stm32f10x__conf_8h" local="yes">C:/Users/anilj/Desktop/cmsis/sorc/include/stm32f10x_conf.h</includedby>
    <includedby refid="stm32f10x__i2c_8c" local="yes">C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c</includedby>
    <incdepgraph>
      <node id="637">
        <label>system_stm32f10x.h</label>
        <link refid="system__stm32f10x_8h"/>
      </node>
      <node id="634">
        <label>stdint.h</label>
      </node>
      <node id="631">
        <label>C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h</label>
        <link refid="stm32f10x__i2c_8h"/>
        <childnode refid="632" relation="include">
        </childnode>
      </node>
      <node id="633">
        <label>core_cm3.h</label>
        <link refid="core__cm3_8h"/>
        <childnode refid="634" relation="include">
        </childnode>
        <childnode refid="635" relation="include">
        </childnode>
        <childnode refid="636" relation="include">
        </childnode>
      </node>
      <node id="636">
        <label>core_cmFunc.h</label>
        <link refid="core__cm_func_8h"/>
      </node>
      <node id="635">
        <label>core_cmInstr.h</label>
        <link refid="core__cm_instr_8h"/>
      </node>
      <node id="632">
        <label>stm32f10x.h</label>
        <link refid="stm32f10x_8h"/>
        <childnode refid="633" relation="include">
        </childnode>
        <childnode refid="637" relation="include">
        </childnode>
        <childnode refid="634" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="638">
        <label>C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h</label>
        <link refid="stm32f10x__i2c_8h"/>
        <childnode refid="639" relation="include">
        </childnode>
        <childnode refid="640" relation="include">
        </childnode>
      </node>
      <node id="639">
        <label>C:/Users/anilj/Desktop/cmsis/sorc/include/stm32f10x_conf.h</label>
        <link refid="stm32f10x__conf_8h"/>
      </node>
      <node id="640">
        <label>C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c</label>
        <link refid="stm32f10x__i2c_8c"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_i2_c___init_type_def" prot="public">I2C_InitTypeDef</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" prot="public" static="no">
        <name>IS_I2C_ALL_PERIPH</name>
        <param><defname>PERIPH</defname></param>
        <initializer>(((PERIPH) == <ref refid="group___peripheral__declaration_1gab45d257574da6fe1f091cc45b7eda6cc" kindref="member">I2C1</ref>) || \
                                   ((PERIPH) == <ref refid="group___peripheral__declaration_1gafa60ac20c1921ef1002083bb3e1f5d16" kindref="member">I2C2</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="86" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__mode_1ga8bc3b0555ca31b6f8423bc2ada45d1ac" prot="public" static="no">
        <name>I2C_Mode_I2C</name>
        <initializer>((uint16_t)0x0000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="92" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__mode_1gaf0cf66bc1f4986ba8a9925da924e06da" prot="public" static="no">
        <name>I2C_Mode_SMBusDevice</name>
        <initializer>((uint16_t)0x0002)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="93" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__mode_1gacfd37619c8d91dea5dec2921840acede" prot="public" static="no">
        <name>I2C_Mode_SMBusHost</name>
        <initializer>((uint16_t)0x000A)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="94" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__mode_1ga58464e1fe94a79bab721137a544baf79" prot="public" static="no">
        <name>IS_I2C_MODE</name>
        <param><defname>MODE</defname></param>
        <initializer>(((MODE) == <ref refid="group___i2_c__mode_1ga8bc3b0555ca31b6f8423bc2ada45d1ac" kindref="member">I2C_Mode_I2C</ref>) || \
                           ((MODE) == <ref refid="group___i2_c__mode_1gaf0cf66bc1f4986ba8a9925da924e06da" kindref="member">I2C_Mode_SMBusDevice</ref>) || \
                           ((MODE) == <ref refid="group___i2_c__mode_1gacfd37619c8d91dea5dec2921840acede" kindref="member">I2C_Mode_SMBusHost</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="95" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__duty__cycle__in__fast__mode_1ga2b4ff186808a8095fc2d1b8193f30ce1" prot="public" static="no">
        <name>I2C_DutyCycle_16_9</name>
        <initializer>((uint16_t)0x4000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I2C fast mode Tlow/Thigh = 16/9 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="106" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__duty__cycle__in__fast__mode_1gafe0af31970aceef0fa8df6a10bef35db" prot="public" static="no">
        <name>I2C_DutyCycle_2</name>
        <initializer>((uint16_t)0xBFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>I2C fast mode Tlow/Thigh = 2 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="107" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__duty__cycle__in__fast__mode_1gae9b3276d9b6ec872ee4fafa2b2fafb83" prot="public" static="no">
        <name>IS_I2C_DUTY_CYCLE</name>
        <param><defname>CYCLE</defname></param>
        <initializer>(((CYCLE) == <ref refid="group___i2_c__duty__cycle__in__fast__mode_1ga2b4ff186808a8095fc2d1b8193f30ce1" kindref="member">I2C_DutyCycle_16_9</ref>) || \
                                  ((CYCLE) == <ref refid="group___i2_c__duty__cycle__in__fast__mode_1gafe0af31970aceef0fa8df6a10bef35db" kindref="member">I2C_DutyCycle_2</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="108" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__acknowledgement_1ga616466f8ef5a47237cdbf7ac578ec507" prot="public" static="no">
        <name>I2C_Ack_Enable</name>
        <initializer>((uint16_t)0x0400)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="118" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__acknowledgement_1gadb5f47c052ac6bae1aa58c724e339e36" prot="public" static="no">
        <name>I2C_Ack_Disable</name>
        <initializer>((uint16_t)0x0000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="119" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__acknowledgement_1ga6401bedc842e784a2bb78b3aa21af19d" prot="public" static="no">
        <name>IS_I2C_ACK_STATE</name>
        <param><defname>STATE</defname></param>
        <initializer>(((STATE) == <ref refid="group___i2_c__acknowledgement_1ga616466f8ef5a47237cdbf7ac578ec507" kindref="member">I2C_Ack_Enable</ref>) || \
                                 ((STATE) == <ref refid="group___i2_c__acknowledgement_1gadb5f47c052ac6bae1aa58c724e339e36" kindref="member">I2C_Ack_Disable</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="120" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__transfer__direction_1ga9895ee2d7d8cc8ba4daafafa1c3ce1ac" prot="public" static="no">
        <name>I2C_Direction_Transmitter</name>
        <initializer>((uint8_t)0x00)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="130" column="10" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__transfer__direction_1gafe3b9b98552980ca56c8e21a90040fa0" prot="public" static="no">
        <name>I2C_Direction_Receiver</name>
        <initializer>((uint8_t)0x01)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="131" column="10" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__transfer__direction_1ga33368efe652bc25b4f4b74f02ce0657e" prot="public" static="no">
        <name>IS_I2C_DIRECTION</name>
        <param><defname>DIRECTION</defname></param>
        <initializer>(((DIRECTION) == <ref refid="group___i2_c__transfer__direction_1ga9895ee2d7d8cc8ba4daafafa1c3ce1ac" kindref="member">I2C_Direction_Transmitter</ref>) || \
                                     ((DIRECTION) == <ref refid="group___i2_c__transfer__direction_1gafe3b9b98552980ca56c8e21a90040fa0" kindref="member">I2C_Direction_Receiver</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="132" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__acknowledged__address_1ga5e5ad2148f9da14457c7b59357acee97" prot="public" static="no">
        <name>I2C_AcknowledgedAddress_7bit</name>
        <initializer>((uint16_t)0x4000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="142" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__acknowledged__address_1gaf0bb8f71795f046ad9f6c1fc7fe0fc53" prot="public" static="no">
        <name>I2C_AcknowledgedAddress_10bit</name>
        <initializer>((uint16_t)0xC000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="143" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__acknowledged__address_1ga26a3af0a468f7226ed72fde27528c0ba" prot="public" static="no">
        <name>IS_I2C_ACKNOWLEDGE_ADDRESS</name>
        <param><defname>ADDRESS</defname></param>
        <initializer>(((ADDRESS) == <ref refid="group___i2_c__acknowledged__address_1ga5e5ad2148f9da14457c7b59357acee97" kindref="member">I2C_AcknowledgedAddress_7bit</ref>) || \
                                             ((ADDRESS) == <ref refid="group___i2_c__acknowledged__address_1gaf0bb8f71795f046ad9f6c1fc7fe0fc53" kindref="member">I2C_AcknowledgedAddress_10bit</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="144" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__registers_1ga4b9e7934e490c3540e50cf2f1d0a7688" prot="public" static="no">
        <name>I2C_Register_CR1</name>
        <initializer>((uint8_t)0x00)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="154" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__registers_1gaf278337dd03b6ae56eac3f335381eca3" prot="public" static="no">
        <name>I2C_Register_CR2</name>
        <initializer>((uint8_t)0x04)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="155" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__registers_1ga706317a00c0d450e95c00efd2afe1836" prot="public" static="no">
        <name>I2C_Register_OAR1</name>
        <initializer>((uint8_t)0x08)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="156" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__registers_1gaffdc1902493456dea95216a39fc54e2b" prot="public" static="no">
        <name>I2C_Register_OAR2</name>
        <initializer>((uint8_t)0x0C)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="157" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__registers_1gaea281721e7a8461d90bf59898487c096" prot="public" static="no">
        <name>I2C_Register_DR</name>
        <initializer>((uint8_t)0x10)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="158" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__registers_1gaf3bc5f4dc87513e2eceba4f503c14d6a" prot="public" static="no">
        <name>I2C_Register_SR1</name>
        <initializer>((uint8_t)0x14)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="159" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="159" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__registers_1ga0b5f7949e449223ec97e0169d79d007d" prot="public" static="no">
        <name>I2C_Register_SR2</name>
        <initializer>((uint8_t)0x18)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="160" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__registers_1ga7a0de765650408f3915b54141f052c5b" prot="public" static="no">
        <name>I2C_Register_CCR</name>
        <initializer>((uint8_t)0x1C)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="161" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__registers_1ga488c25a0a9f2c572af28768589fcbab2" prot="public" static="no">
        <name>I2C_Register_TRISE</name>
        <initializer>((uint8_t)0x20)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="162" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="162" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__registers_1ga37206b258f7930065c308ec7d35f243e" prot="public" static="no">
        <name>IS_I2C_REGISTER</name>
        <param><defname>REGISTER</defname></param>
        <initializer>(((REGISTER) == <ref refid="group___i2_c__registers_1ga4b9e7934e490c3540e50cf2f1d0a7688" kindref="member">I2C_Register_CR1</ref>) || \
                                   ((REGISTER) == <ref refid="group___i2_c__registers_1gaf278337dd03b6ae56eac3f335381eca3" kindref="member">I2C_Register_CR2</ref>) || \
                                   ((REGISTER) == <ref refid="group___i2_c__registers_1ga706317a00c0d450e95c00efd2afe1836" kindref="member">I2C_Register_OAR1</ref>) || \
                                   ((REGISTER) == <ref refid="group___i2_c__registers_1gaffdc1902493456dea95216a39fc54e2b" kindref="member">I2C_Register_OAR2</ref>) || \
                                   ((REGISTER) == <ref refid="group___i2_c__registers_1gaea281721e7a8461d90bf59898487c096" kindref="member">I2C_Register_DR</ref>) || \
                                   ((REGISTER) == <ref refid="group___i2_c__registers_1gaf3bc5f4dc87513e2eceba4f503c14d6a" kindref="member">I2C_Register_SR1</ref>) || \
                                   ((REGISTER) == <ref refid="group___i2_c__registers_1ga0b5f7949e449223ec97e0169d79d007d" kindref="member">I2C_Register_SR2</ref>) || \
                                   ((REGISTER) == <ref refid="group___i2_c__registers_1ga7a0de765650408f3915b54141f052c5b" kindref="member">I2C_Register_CCR</ref>) || \
                                   ((REGISTER) == <ref refid="group___i2_c__registers_1ga488c25a0a9f2c572af28768589fcbab2" kindref="member">I2C_Register_TRISE</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="163" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___s_m_bus__alert__pin__level_1ga6f923166107afb8aad1d7d1a87048d6e" prot="public" static="no">
        <name>I2C_SMBusAlert_Low</name>
        <initializer>((uint16_t)0x2000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="180" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___s_m_bus__alert__pin__level_1gac3ab64f43ef90f0f83f9c88981aaa862" prot="public" static="no">
        <name>I2C_SMBusAlert_High</name>
        <initializer>((uint16_t)0xDFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="181" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___s_m_bus__alert__pin__level_1ga61b0c91563eb4bd598329241fe7d3bb4" prot="public" static="no">
        <name>IS_I2C_SMBUS_ALERT</name>
        <param><defname>ALERT</defname></param>
        <initializer>(((ALERT) == <ref refid="group___i2_c___s_m_bus__alert__pin__level_1ga6f923166107afb8aad1d7d1a87048d6e" kindref="member">I2C_SMBusAlert_Low</ref>) || \
                                   ((ALERT) == <ref refid="group___i2_c___s_m_bus__alert__pin__level_1gac3ab64f43ef90f0f83f9c88981aaa862" kindref="member">I2C_SMBusAlert_High</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="182" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___p_e_c__position_1ga74d0996efe6e278fb28d053ba78fccc5" prot="public" static="no">
        <name>I2C_PECPosition_Next</name>
        <initializer>((uint16_t)0x0800)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="192" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___p_e_c__position_1ga8a393364dd651f88bcaebac71c1c52c7" prot="public" static="no">
        <name>I2C_PECPosition_Current</name>
        <initializer>((uint16_t)0xF7FF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="193" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___p_e_c__position_1gac8611a62b06256b1b3c60d4859a016ef" prot="public" static="no">
        <name>IS_I2C_PEC_POSITION</name>
        <param><defname>POSITION</defname></param>
        <initializer>(((POSITION) == <ref refid="group___i2_c___p_e_c__position_1ga74d0996efe6e278fb28d053ba78fccc5" kindref="member">I2C_PECPosition_Next</ref>) || \
                                       ((POSITION) == <ref refid="group___i2_c___p_e_c__position_1ga8a393364dd651f88bcaebac71c1c52c7" kindref="member">I2C_PECPosition_Current</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="194" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___n_c_a_k__position_1gacb512a4bd4841a763b6ec51606687fca" prot="public" static="no">
        <name>I2C_NACKPosition_Next</name>
        <initializer>((uint16_t)0x0800)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="204" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___n_c_a_k__position_1ga8d91c1e62730a9d927ca8e9ec4f7ef8f" prot="public" static="no">
        <name>I2C_NACKPosition_Current</name>
        <initializer>((uint16_t)0xF7FF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="205" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___n_c_a_k__position_1ga631b4b1674a12aa2b3b27360983029e3" prot="public" static="no">
        <name>IS_I2C_NACK_POSITION</name>
        <param><defname>POSITION</defname></param>
        <initializer>(((POSITION) == <ref refid="group___i2_c___n_c_a_k__position_1gacb512a4bd4841a763b6ec51606687fca" kindref="member">I2C_NACKPosition_Next</ref>) || \
                                         ((POSITION) == <ref refid="group___i2_c___n_c_a_k__position_1ga8d91c1e62730a9d927ca8e9ec4f7ef8f" kindref="member">I2C_NACKPosition_Current</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="206" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__interrupts__definition_1gad3ff3f405b882aa4d2f91310aa1cc0df" prot="public" static="no">
        <name>I2C_IT_BUF</name>
        <initializer>((uint16_t)0x0400)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="216" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__interrupts__definition_1gadd59efa313e1598a084a1e5ec3905b02" prot="public" static="no">
        <name>I2C_IT_EVT</name>
        <initializer>((uint16_t)0x0200)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="217" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__interrupts__definition_1gadba3667b439cbf4ba1e6e9aec961ab03" prot="public" static="no">
        <name>I2C_IT_ERR</name>
        <initializer>((uint16_t)0x0100)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="218" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__interrupts__definition_1gae2695a081871336881f9105d6c847c4f" prot="public" static="no">
        <name>IS_I2C_CONFIG_IT</name>
        <param><defname>IT</defname></param>
        <initializer>((((IT) &amp; (uint16_t)0xF8FF) == 0x00) &amp;&amp; ((IT) != 0x00))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="219" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__interrupts__definition_1gab6049d4dd856a085127752e01ebb8120" prot="public" static="no">
        <name>I2C_IT_SMBALERT</name>
        <initializer>((uint32_t)0x01008000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="228" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__interrupts__definition_1ga45ce34b163b456a5fb3833f1264d93b4" prot="public" static="no">
        <name>I2C_IT_TIMEOUT</name>
        <initializer>((uint32_t)0x01004000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="229" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__interrupts__definition_1ga23069e7787c4f052f34887c02bc44100" prot="public" static="no">
        <name>I2C_IT_PECERR</name>
        <initializer>((uint32_t)0x01001000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="230" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__interrupts__definition_1ga8e1e9e73d9057ccfce3493b5cf672833" prot="public" static="no">
        <name>I2C_IT_OVR</name>
        <initializer>((uint32_t)0x01000800)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="231" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__interrupts__definition_1gabfb721ac5783336e6d2334f635e2e91b" prot="public" static="no">
        <name>I2C_IT_AF</name>
        <initializer>((uint32_t)0x01000400)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="232" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__interrupts__definition_1ga2439154bee2a45a4147921cec18177d1" prot="public" static="no">
        <name>I2C_IT_ARLO</name>
        <initializer>((uint32_t)0x01000200)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="233" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__interrupts__definition_1gad9aec016c98df6dbb95a5c10b180c202" prot="public" static="no">
        <name>I2C_IT_BERR</name>
        <initializer>((uint32_t)0x01000100)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="234" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__interrupts__definition_1gacb41229da2cd9460c3272cfb13aa29d3" prot="public" static="no">
        <name>I2C_IT_TXE</name>
        <initializer>((uint32_t)0x06000080)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="235" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__interrupts__definition_1gac95135720c0de2fd01c44c3f7b6c81d4" prot="public" static="no">
        <name>I2C_IT_RXNE</name>
        <initializer>((uint32_t)0x06000040)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="236" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__interrupts__definition_1ga741e098abb485b327c7668518117e415" prot="public" static="no">
        <name>I2C_IT_STOPF</name>
        <initializer>((uint32_t)0x02000010)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="237" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__interrupts__definition_1ga8a9bc5a1dee3bbd41347b19cf117c0f3" prot="public" static="no">
        <name>I2C_IT_ADD10</name>
        <initializer>((uint32_t)0x02000008)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="238" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__interrupts__definition_1gaef469fef934f655614b7cffd00b87ceb" prot="public" static="no">
        <name>I2C_IT_BTF</name>
        <initializer>((uint32_t)0x02000004)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="239" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__interrupts__definition_1gaf68f1eda33dcb13626597f477d044025" prot="public" static="no">
        <name>I2C_IT_ADDR</name>
        <initializer>((uint32_t)0x02000002)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="240" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__interrupts__definition_1gaec2fb9bbd0e1b128b4450b2a7b312896" prot="public" static="no">
        <name>I2C_IT_SB</name>
        <initializer>((uint32_t)0x02000001)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="241" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__interrupts__definition_1ga368c05fc9aadd7bb4d23280791b5a751" prot="public" static="no">
        <name>IS_I2C_CLEAR_IT</name>
        <param><defname>IT</defname></param>
        <initializer>((((IT) &amp; (uint16_t)0x20FF) == 0x00) &amp;&amp; ((IT) != (uint16_t)0x00))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="243" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__interrupts__definition_1gab3d113f3d6b6e6f7896c5d7a8d8c2d01" prot="public" static="no">
        <name>IS_I2C_GET_IT</name>
        <param><defname>IT</defname></param>
        <initializer>(((IT) == <ref refid="group___i2_c__interrupts__definition_1gab6049d4dd856a085127752e01ebb8120" kindref="member">I2C_IT_SMBALERT</ref>) || ((IT) == <ref refid="group___i2_c__interrupts__definition_1ga45ce34b163b456a5fb3833f1264d93b4" kindref="member">I2C_IT_TIMEOUT</ref>) || \
                           ((IT) == <ref refid="group___i2_c__interrupts__definition_1ga23069e7787c4f052f34887c02bc44100" kindref="member">I2C_IT_PECERR</ref>) || ((IT) == <ref refid="group___i2_c__interrupts__definition_1ga8e1e9e73d9057ccfce3493b5cf672833" kindref="member">I2C_IT_OVR</ref>) || \
                           ((IT) == <ref refid="group___i2_c__interrupts__definition_1gabfb721ac5783336e6d2334f635e2e91b" kindref="member">I2C_IT_AF</ref>) || ((IT) == <ref refid="group___i2_c__interrupts__definition_1ga2439154bee2a45a4147921cec18177d1" kindref="member">I2C_IT_ARLO</ref>) || \
                           ((IT) == <ref refid="group___i2_c__interrupts__definition_1gad9aec016c98df6dbb95a5c10b180c202" kindref="member">I2C_IT_BERR</ref>) || ((IT) == <ref refid="group___i2_c__interrupts__definition_1gacb41229da2cd9460c3272cfb13aa29d3" kindref="member">I2C_IT_TXE</ref>) || \
                           ((IT) == <ref refid="group___i2_c__interrupts__definition_1gac95135720c0de2fd01c44c3f7b6c81d4" kindref="member">I2C_IT_RXNE</ref>) || ((IT) == <ref refid="group___i2_c__interrupts__definition_1ga741e098abb485b327c7668518117e415" kindref="member">I2C_IT_STOPF</ref>) || \
                           ((IT) == <ref refid="group___i2_c__interrupts__definition_1ga8a9bc5a1dee3bbd41347b19cf117c0f3" kindref="member">I2C_IT_ADD10</ref>) || ((IT) == <ref refid="group___i2_c__interrupts__definition_1gaef469fef934f655614b7cffd00b87ceb" kindref="member">I2C_IT_BTF</ref>) || \
                           ((IT) == <ref refid="group___i2_c__interrupts__definition_1gaf68f1eda33dcb13626597f477d044025" kindref="member">I2C_IT_ADDR</ref>) || ((IT) == <ref refid="group___i2_c__interrupts__definition_1gaec2fb9bbd0e1b128b4450b2a7b312896" kindref="member">I2C_IT_SB</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="245" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1ga3755b783aa73568659478c2e2e45e27f" prot="public" static="no">
        <name>I2C_FLAG_DUALF</name>
        <initializer>((uint32_t)0x00800000)</initializer>
        <briefdescription>
<para>SR2 register flags. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="264" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1gaf15403a1852f39aaadbb8942ba98d97e" prot="public" static="no">
        <name>I2C_FLAG_SMBHOST</name>
        <initializer>((uint32_t)0x00400000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="265" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="265" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1ga371fb29861d1cd41736253e804c67ad5" prot="public" static="no">
        <name>I2C_FLAG_SMBDEFAULT</name>
        <initializer>((uint32_t)0x00200000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="266" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1gab3a93b6840ad406c2fc09e0e96c59b88" prot="public" static="no">
        <name>I2C_FLAG_GENCALL</name>
        <initializer>((uint32_t)0x00100000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="267" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="267" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1ga0359a5f960670d51cb17e659d32498ea" prot="public" static="no">
        <name>I2C_FLAG_TRA</name>
        <initializer>((uint32_t)0x00040000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="268" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1ga50f69f043d99600221076100823b6ff3" prot="public" static="no">
        <name>I2C_FLAG_BUSY</name>
        <initializer>((uint32_t)0x00020000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="269" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="269" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1gae8e6a404cbfd70420d278d520304f368" prot="public" static="no">
        <name>I2C_FLAG_MSL</name>
        <initializer>((uint32_t)0x00010000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="270" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="270" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1ga4e1d7cd1574d03ba501c27483300c1be" prot="public" static="no">
        <name>I2C_FLAG_SMBALERT</name>
        <initializer>((uint32_t)0x10008000)</initializer>
        <briefdescription>
<para>SR1 register flags. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="276" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1ga89c8d5d8ccc77a8619fafe9b39d1cc74" prot="public" static="no">
        <name>I2C_FLAG_TIMEOUT</name>
        <initializer>((uint32_t)0x10004000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="277" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1ga6c7addb6413f165f42bcc87506ea8467" prot="public" static="no">
        <name>I2C_FLAG_PECERR</name>
        <initializer>((uint32_t)0x10001000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="278" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1gab579673c8ac920db199aa7f18e547fb3" prot="public" static="no">
        <name>I2C_FLAG_OVR</name>
        <initializer>((uint32_t)0x10000800)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="279" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1ga2f89dbba9b964e6ade1480705e7a97d4" prot="public" static="no">
        <name>I2C_FLAG_AF</name>
        <initializer>((uint32_t)0x10000400)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="280" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1gae1e67936f4780e42b8bbe04ac9c20a7b" prot="public" static="no">
        <name>I2C_FLAG_ARLO</name>
        <initializer>((uint32_t)0x10000200)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="281" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1ga0454176b6ddd5c402abc3ef5953a21ad" prot="public" static="no">
        <name>I2C_FLAG_BERR</name>
        <initializer>((uint32_t)0x10000100)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="282" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1gaeda14a3e9d02ff20a0d001bba9328f3d" prot="public" static="no">
        <name>I2C_FLAG_TXE</name>
        <initializer>((uint32_t)0x10000080)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="283" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1gad53c5b70a186f699f187c7a641ab0dac" prot="public" static="no">
        <name>I2C_FLAG_RXNE</name>
        <initializer>((uint32_t)0x10000040)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="284" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1gacc7d993963e199a6ddba391dab8da896" prot="public" static="no">
        <name>I2C_FLAG_STOPF</name>
        <initializer>((uint32_t)0x10000010)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="285" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1ga316c78cbf34b74da96d69f702a0d1444" prot="public" static="no">
        <name>I2C_FLAG_ADD10</name>
        <initializer>((uint32_t)0x10000008)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="286" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1ga4dc3d44342007a5cd21c3baa0d938606" prot="public" static="no">
        <name>I2C_FLAG_BTF</name>
        <initializer>((uint32_t)0x10000004)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="287" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1ga5472d1196e934e0cc471aba8f66af416" prot="public" static="no">
        <name>I2C_FLAG_ADDR</name>
        <initializer>((uint32_t)0x10000002)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="288" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1gae009ab84be03fcc438625b1c39376ad4" prot="public" static="no">
        <name>I2C_FLAG_SB</name>
        <initializer>((uint32_t)0x10000001)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="289" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1ga66c8180841350c47627c323acfe42ee9" prot="public" static="no">
        <name>IS_I2C_CLEAR_FLAG</name>
        <param><defname>FLAG</defname></param>
        <initializer>((((FLAG) &amp; (uint16_t)0x20FF) == 0x00) &amp;&amp; ((FLAG) != (uint16_t)0x00))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="291" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__flags__definition_1ga1a2c2a7c50cd8e33e532918106b4f6ce" prot="public" static="no">
        <name>IS_I2C_GET_FLAG</name>
        <param><defname>FLAG</defname></param>
        <initializer>(((FLAG) == <ref refid="group___i2_c__flags__definition_1ga3755b783aa73568659478c2e2e45e27f" kindref="member">I2C_FLAG_DUALF</ref>) || ((FLAG) == <ref refid="group___i2_c__flags__definition_1gaf15403a1852f39aaadbb8942ba98d97e" kindref="member">I2C_FLAG_SMBHOST</ref>) || \
                               ((FLAG) == <ref refid="group___i2_c__flags__definition_1ga371fb29861d1cd41736253e804c67ad5" kindref="member">I2C_FLAG_SMBDEFAULT</ref>) || ((FLAG) == <ref refid="group___i2_c__flags__definition_1gab3a93b6840ad406c2fc09e0e96c59b88" kindref="member">I2C_FLAG_GENCALL</ref>) || \
                               ((FLAG) == <ref refid="group___i2_c__flags__definition_1ga0359a5f960670d51cb17e659d32498ea" kindref="member">I2C_FLAG_TRA</ref>) || ((FLAG) == <ref refid="group___i2_c__flags__definition_1ga50f69f043d99600221076100823b6ff3" kindref="member">I2C_FLAG_BUSY</ref>) || \
                               ((FLAG) == <ref refid="group___i2_c__flags__definition_1gae8e6a404cbfd70420d278d520304f368" kindref="member">I2C_FLAG_MSL</ref>) || ((FLAG) == <ref refid="group___i2_c__flags__definition_1ga4e1d7cd1574d03ba501c27483300c1be" kindref="member">I2C_FLAG_SMBALERT</ref>) || \
                               ((FLAG) == <ref refid="group___i2_c__flags__definition_1ga89c8d5d8ccc77a8619fafe9b39d1cc74" kindref="member">I2C_FLAG_TIMEOUT</ref>) || ((FLAG) == <ref refid="group___i2_c__flags__definition_1ga6c7addb6413f165f42bcc87506ea8467" kindref="member">I2C_FLAG_PECERR</ref>) || \
                               ((FLAG) == <ref refid="group___i2_c__flags__definition_1gab579673c8ac920db199aa7f18e547fb3" kindref="member">I2C_FLAG_OVR</ref>) || ((FLAG) == <ref refid="group___i2_c__flags__definition_1ga2f89dbba9b964e6ade1480705e7a97d4" kindref="member">I2C_FLAG_AF</ref>) || \
                               ((FLAG) == <ref refid="group___i2_c__flags__definition_1gae1e67936f4780e42b8bbe04ac9c20a7b" kindref="member">I2C_FLAG_ARLO</ref>) || ((FLAG) == <ref refid="group___i2_c__flags__definition_1ga0454176b6ddd5c402abc3ef5953a21ad" kindref="member">I2C_FLAG_BERR</ref>) || \
                               ((FLAG) == <ref refid="group___i2_c__flags__definition_1gaeda14a3e9d02ff20a0d001bba9328f3d" kindref="member">I2C_FLAG_TXE</ref>) || ((FLAG) == <ref refid="group___i2_c__flags__definition_1gad53c5b70a186f699f187c7a641ab0dac" kindref="member">I2C_FLAG_RXNE</ref>) || \
                               ((FLAG) == <ref refid="group___i2_c__flags__definition_1gacc7d993963e199a6ddba391dab8da896" kindref="member">I2C_FLAG_STOPF</ref>) || ((FLAG) == <ref refid="group___i2_c__flags__definition_1ga316c78cbf34b74da96d69f702a0d1444" kindref="member">I2C_FLAG_ADD10</ref>) || \
                               ((FLAG) == <ref refid="group___i2_c__flags__definition_1ga4dc3d44342007a5cd21c3baa0d938606" kindref="member">I2C_FLAG_BTF</ref>) || ((FLAG) == <ref refid="group___i2_c__flags__definition_1ga5472d1196e934e0cc471aba8f66af416" kindref="member">I2C_FLAG_ADDR</ref>) || \
                               ((FLAG) == <ref refid="group___i2_c__flags__definition_1gae009ab84be03fcc438625b1c39376ad4" kindref="member">I2C_FLAG_SB</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="293" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___events_1gaeef8c22ac035122b06e31b360ac7aeb3" prot="public" static="no">
        <name>I2C_EVENT_MASTER_MODE_SELECT</name>
        <initializer>((uint32_t)0x00030001)  /* BUSY, MSL and SB flag */</initializer>
        <briefdescription>
<para>Communication start. </para>        </briefdescription>
        <detaileddescription>
<para>After sending the START condition (<ref refid="group___i2_c___exported___functions_1ga36c522b471588be9779c878222ccb20f" kindref="member">I2C_GenerateSTART()</ref> function) the master has to wait for this event. It means that the Start condition has been correctly released on the I2C bus (the bus is free, no other devices is communicating). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="325" column="10" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___events_1ga2361a6e60b7dc86fb682dd06fbd3edb7" prot="public" static="no">
        <name>I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED</name>
        <initializer>((uint32_t)0x00070082)  /* BUSY, MSL, ADDR, TXE and TRA flags */</initializer>
        <briefdescription>
<para>Address Acknowledge. </para>        </briefdescription>
        <detaileddescription>
<para>After checking on EV5 (start condition correctly released on the bus), the master sends the address of the slave(s) with which it will communicate (<ref refid="group___i2_c___exported___functions_1ga009fc2a5b2313c36da39ece39a1156a6" kindref="member">I2C_Send7bitAddress()</ref> function, it also determines the direction of the communication: Master transmitter or Receiver). Then the master has to wait that a slave acknowledges his address. If an acknowledge is sent on the bus, one of the following events will be set:</para><para>1) In case of Master Receiver (7-bit addressing): the I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED event is set.</para><para>2) In case of Master Transmitter (7-bit addressing): the I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED is set</para><para>3) In case of 10-Bit addressing mode, the master (just after generating the START and checking on EV5) has to send the header of 10-bit addressing mode (<ref refid="group___i2_c___exported___functions_1ga7bd9e70b8eafde0dd5eb42b0d95fe1a9" kindref="member">I2C_SendData()</ref> function). Then master should wait on EV9. It means that the 10-bit addressing header has been correctly sent on the bus. Then master should send the second part of the 10-bit address (LSB) using the function <ref refid="group___i2_c___exported___functions_1ga009fc2a5b2313c36da39ece39a1156a6" kindref="member">I2C_Send7bitAddress()</ref>. Then master should wait for event EV6. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="353" column="10" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___events_1gabfde82864432ddb87b6462234d542e60" prot="public" static="no">
        <name>I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED</name>
        <initializer>((uint32_t)0x00030002)  /* BUSY, MSL and ADDR flags */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="354" column="10" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___events_1gad04882597bbf542c6fee7a9c837fbc8c" prot="public" static="no">
        <name>I2C_EVENT_MASTER_MODE_ADDRESS10</name>
        <initializer>((uint32_t)0x00030008)  /* BUSY, MSL and ADD10 flags */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="356" column="10" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___events_1ga6bcf2ae49961e07e27cf9fdf334719e3" prot="public" static="no">
        <name>I2C_EVENT_MASTER_BYTE_RECEIVED</name>
        <initializer>((uint32_t)0x00030040)  /* BUSY, MSL and RXNE flags */</initializer>
        <briefdescription>
<para>Communication events. </para>        </briefdescription>
        <detaileddescription>
<para>If a communication is established (START condition generated and slave address acknowledged) then the master has to check on one of the following events for communication procedures:</para><para>1) Master Receiver mode: The master has to wait on the event EV7 then to read the data received from the slave (<ref refid="group___i2_c___exported___functions_1gaeaaa4b6f77f50eb57465148c55d27fb2" kindref="member">I2C_ReceiveData()</ref> function).</para><para>2) Master Transmitter mode: The master has to send data (<ref refid="group___i2_c___exported___functions_1ga7bd9e70b8eafde0dd5eb42b0d95fe1a9" kindref="member">I2C_SendData()</ref> function) then to wait on event EV8 or EV8_2. These two events are similar:<itemizedlist>
<listitem><para>EV8 means that the data has been written in the data register and is being shifted out.</para></listitem><listitem><para>EV8_2 means that the data has been physically shifted out and output on the bus. In most cases, using EV8 is sufficient for the application. Using EV8_2 leads to a slower communication but ensure more reliable test. EV8_2 is also more suitable than EV8 for testing on the last data transmission (before Stop condition generation).</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>In case the user software does not guarantee that this event EV7 is managed before the current byte end of transfer, then user may check on EV7 and BTF flag at the same time (ie. (I2C_EVENT_MASTER_BYTE_RECEIVED | I2C_FLAG_BTF)). In this case the communication may be slower. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="389" column="10" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___events_1ga037ac1e67e44ee085acac6f034bd73b2" prot="public" static="no">
        <name>I2C_EVENT_MASTER_BYTE_TRANSMITTING</name>
        <initializer>((uint32_t)0x00070080) /* TRA, BUSY, MSL, TXE flags */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="393" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___events_1ga8fe3b96b54e3c38e1de5d48536039c8f" prot="public" static="no">
        <name>I2C_EVENT_MASTER_BYTE_TRANSMITTED</name>
        <initializer>((uint32_t)0x00070084)  /* TRA, BUSY, MSL, TXE and BTF flags */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="395" column="10" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___events_1ga6cf0e334704618b024eee604849f50f7" prot="public" static="no">
        <name>I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED</name>
        <initializer>((uint32_t)0x00020002) /* BUSY and ADDR flags */</initializer>
        <briefdescription>
<para>Communication start events. </para>        </briefdescription>
        <detaileddescription>
<para>Wait on one of these events at the start of the communication. It means that the I2C peripheral detected a Start condition on the bus (generated by master device) followed by the peripheral address. The peripheral generates an ACK condition on the bus (if the acknowledge feature is enabled through function <ref refid="group___i2_c___exported___functions_1ga7bb44e894d68a7991f564c43fb187486" kindref="member">I2C_AcknowledgeConfig()</ref>) and the events listed above are set :</para><para>1) In normal case (only one address managed by the slave), when the address sent by the master matches the own address of the peripheral (configured by I2C_OwnAddress1 field) the I2C_EVENT_SLAVE_XXX_ADDRESS_MATCHED event is set (where XXX could be TRANSMITTER or RECEIVER).</para><para>2) In case the address sent by the master matches the second address of the peripheral (configured by the function <ref refid="group___i2_c___exported___functions_1ga7be2cc634a613c8e3539137e897a22df" kindref="member">I2C_OwnAddress2Config()</ref> and enabled by the function <ref refid="group___i2_c___exported___functions_1ga02145a333a56e79557d6ef4ea03fc313" kindref="member">I2C_DualAddressCmd()</ref>) the events I2C_EVENT_SLAVE_XXX_SECONDADDRESS_MATCHED (where XXX could be TRANSMITTER or RECEIVER) are set.</para><para>3) In case the address sent by the master is General Call (address 0x00) and if the General Call is enabled for the peripheral (using function <ref refid="group___i2_c___exported___functions_1ga65c740fc8d7b3b9f15cc432d8699d471" kindref="member">I2C_GeneralCallCmd()</ref>) the following event is set I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="430" column="10" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="430" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___events_1ga3fa381c1fd9a95c8ae13c6cc402b1327" prot="public" static="no">
        <name>I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED</name>
        <initializer>((uint32_t)0x00060082) /* TRA, BUSY, TXE and ADDR flags */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="431" column="10" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___events_1ga17e78ab01fa980b3df10f8d9f6864c48" prot="public" static="no">
        <name>I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED</name>
        <initializer>((uint32_t)0x00820000)  /* DUALF and BUSY flags */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="434" column="10" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___events_1ga6221aa204356bec9146f800ccfc99fc1" prot="public" static="no">
        <name>I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED</name>
        <initializer>((uint32_t)0x00860080)  /* DUALF, TRA, BUSY and TXE flags */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="435" column="10" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___events_1ga15195f6def95f688ae9725899f49ea23" prot="public" static="no">
        <name>I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED</name>
        <initializer>((uint32_t)0x00120000)  /* GENCALL and BUSY flags */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="438" column="10" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___events_1ga8b244626839940569c6c8bbfc4efe21d" prot="public" static="no">
        <name>I2C_EVENT_SLAVE_BYTE_RECEIVED</name>
        <initializer>((uint32_t)0x00020040)  /* BUSY and RXNE flags */</initializer>
        <briefdescription>
<para>Communication events. </para>        </briefdescription>
        <detaileddescription>
<para>Wait on one of these events when EV1 has already been checked and:</para><para><itemizedlist>
<listitem><para>Slave RECEIVER mode:<itemizedlist>
<listitem><para>EV2: When the application is expecting a data byte to be received.</para></listitem><listitem><para>EV4: When the application is expecting the end of the communication: master sends a stop condition and data transmission is stopped.</para></listitem></itemizedlist>
</para></listitem><listitem><para>Slave Transmitter mode:<itemizedlist>
<listitem><para>EV3: When a byte has been transmitted by the slave and the application is expecting the end of the byte transmission. The two events I2C_EVENT_SLAVE_BYTE_TRANSMITTED and I2C_EVENT_SLAVE_BYTE_TRANSMITTING are similar. The second one can optionally be used when the user software doesn&apos;t guarantee the EV3 is managed before the current byte end of transfer.</para></listitem><listitem><para>EV3_2: When the master sends a NACK in order to tell slave that data transmission shall end (before sending the STOP condition). In this case slave has to stop sending data bytes and expect a Stop condition on the bus.</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>In case the user software does not guarantee that the event EV2 is managed before the current byte end of transfer, then user may check on EV2 and BTF flag at the same time (ie. (I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_BTF)). In this case the communication may be slower. </para></simplesect>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="469" column="10" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___events_1ga3148d8d7087e418959bc31e2646b2941" prot="public" static="no">
        <name>I2C_EVENT_SLAVE_STOP_DETECTED</name>
        <initializer>((uint32_t)0x00000010)  /* STOPF flag */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="471" column="10" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="471" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___events_1ga50652880323b8c2746b5afbdfea03fe1" prot="public" static="no">
        <name>I2C_EVENT_SLAVE_BYTE_TRANSMITTED</name>
        <initializer>((uint32_t)0x00060084)  /* TRA, BUSY, TXE and BTF flags */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="475" column="10" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___events_1gaa574c93a99497649f3d8e7ff53796231" prot="public" static="no">
        <name>I2C_EVENT_SLAVE_BYTE_TRANSMITTING</name>
        <initializer>((uint32_t)0x00060080)  /* TRA, BUSY and TXE flags */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="476" column="10" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="476" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___events_1ga249bd611f1ca64653c0bfc606c591088" prot="public" static="no">
        <name>I2C_EVENT_SLAVE_ACK_FAILURE</name>
        <initializer>((uint32_t)0x00000400)  /* AF flag */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="478" column="10" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="478" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c___events_1ga4b42e6936006195f89ff4f763d366970" prot="public" static="no">
        <name>IS_I2C_EVENT</name>
        <param><defname>EVENT</defname></param>
        <initializer>(((EVENT) == <ref refid="group___i2_c___events_1ga3fa381c1fd9a95c8ae13c6cc402b1327" kindref="member">I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED</ref>) || \
                             ((EVENT) == <ref refid="group___i2_c___events_1ga6cf0e334704618b024eee604849f50f7" kindref="member">I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED</ref>) || \
                             ((EVENT) == <ref refid="group___i2_c___events_1ga6221aa204356bec9146f800ccfc99fc1" kindref="member">I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED</ref>) || \
                             ((EVENT) == <ref refid="group___i2_c___events_1ga17e78ab01fa980b3df10f8d9f6864c48" kindref="member">I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED</ref>) || \
                             ((EVENT) == <ref refid="group___i2_c___events_1ga15195f6def95f688ae9725899f49ea23" kindref="member">I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED</ref>) || \
                             ((EVENT) == <ref refid="group___i2_c___events_1ga8b244626839940569c6c8bbfc4efe21d" kindref="member">I2C_EVENT_SLAVE_BYTE_RECEIVED</ref>) || \
                             ((EVENT) == (<ref refid="group___i2_c___events_1ga8b244626839940569c6c8bbfc4efe21d" kindref="member">I2C_EVENT_SLAVE_BYTE_RECEIVED</ref> | <ref refid="group___i2_c__flags__definition_1ga3755b783aa73568659478c2e2e45e27f" kindref="member">I2C_FLAG_DUALF</ref>)) || \
                             ((EVENT) == (<ref refid="group___i2_c___events_1ga8b244626839940569c6c8bbfc4efe21d" kindref="member">I2C_EVENT_SLAVE_BYTE_RECEIVED</ref> | <ref refid="group___i2_c__flags__definition_1gab3a93b6840ad406c2fc09e0e96c59b88" kindref="member">I2C_FLAG_GENCALL</ref>)) || \
                             ((EVENT) == <ref refid="group___i2_c___events_1ga50652880323b8c2746b5afbdfea03fe1" kindref="member">I2C_EVENT_SLAVE_BYTE_TRANSMITTED</ref>) || \
                             ((EVENT) == (<ref refid="group___i2_c___events_1ga50652880323b8c2746b5afbdfea03fe1" kindref="member">I2C_EVENT_SLAVE_BYTE_TRANSMITTED</ref> | <ref refid="group___i2_c__flags__definition_1ga3755b783aa73568659478c2e2e45e27f" kindref="member">I2C_FLAG_DUALF</ref>)) || \
                             ((EVENT) == (<ref refid="group___i2_c___events_1ga50652880323b8c2746b5afbdfea03fe1" kindref="member">I2C_EVENT_SLAVE_BYTE_TRANSMITTED</ref> | <ref refid="group___i2_c__flags__definition_1gab3a93b6840ad406c2fc09e0e96c59b88" kindref="member">I2C_FLAG_GENCALL</ref>)) || \
                             ((EVENT) == <ref refid="group___i2_c___events_1ga3148d8d7087e418959bc31e2646b2941" kindref="member">I2C_EVENT_SLAVE_STOP_DETECTED</ref>) || \
                             ((EVENT) == <ref refid="group___i2_c___events_1gaeef8c22ac035122b06e31b360ac7aeb3" kindref="member">I2C_EVENT_MASTER_MODE_SELECT</ref>) || \
                             ((EVENT) == <ref refid="group___i2_c___events_1ga2361a6e60b7dc86fb682dd06fbd3edb7" kindref="member">I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED</ref>) || \
                             ((EVENT) == <ref refid="group___i2_c___events_1gabfde82864432ddb87b6462234d542e60" kindref="member">I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED</ref>) || \
                             ((EVENT) == <ref refid="group___i2_c___events_1ga6bcf2ae49961e07e27cf9fdf334719e3" kindref="member">I2C_EVENT_MASTER_BYTE_RECEIVED</ref>) || \
                             ((EVENT) == <ref refid="group___i2_c___events_1ga8fe3b96b54e3c38e1de5d48536039c8f" kindref="member">I2C_EVENT_MASTER_BYTE_TRANSMITTED</ref>) || \
                             ((EVENT) == <ref refid="group___i2_c___events_1ga037ac1e67e44ee085acac6f034bd73b2" kindref="member">I2C_EVENT_MASTER_BYTE_TRANSMITTING</ref>) || \
                             ((EVENT) == <ref refid="group___i2_c___events_1gad04882597bbf542c6fee7a9c837fbc8c" kindref="member">I2C_EVENT_MASTER_MODE_ADDRESS10</ref>) || \
                             ((EVENT) == <ref refid="group___i2_c___events_1ga249bd611f1ca64653c0bfc606c591088" kindref="member">I2C_EVENT_SLAVE_ACK_FAILURE</ref>))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="482" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="482" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__own__address1_1gad84e8b9523d45b6105b4d5cb68994a79" prot="public" static="no">
        <name>IS_I2C_OWN_ADDRESS1</name>
        <param><defname>ADDRESS1</defname></param>
        <initializer>((ADDRESS1) &lt;= 0x3FF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="510" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="510" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i2_c__clock__speed_1gae0d731df1b264d853703716c29309b9b" prot="public" static="no">
        <name>IS_I2C_CLOCK_SPEED</name>
        <param><defname>SPEED</defname></param>
        <initializer>(((SPEED) &gt;= 0x1) &amp;&amp; ((SPEED) &lt;= 400000))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="519" column="9" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" bodystart="519" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga2ee214364603059ad5d9089f749f5bfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_DeInit</definition>
        <argsstring>(I2C_TypeDef *I2Cx)</argsstring>
        <name>I2C_DeInit</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <briefdescription>
<para>Deinitializes the I2Cx peripheral registers to their default reset values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="540" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="162" bodyend="181"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___peripheral__declaration_1gab45d257574da6fe1f091cc45b7eda6cc" compoundref="stm32f10x_8h" startline="1398">I2C1</references>
        <references refid="group___r_c_c___exported___functions_1gab197ae4369c10b92640a733b40ed2801" compoundref="stm32f10x__rcc_8c" startline="1216" endline="1229">RCC_APB1PeriphResetCmd</references>
        <references refid="group___a_p_b1__peripheral_1ga594f87d504f7d63697d841033d1538f6" compoundref="stm32f10x__rcc_8h" startline="544">RCC_APB1Periph_I2C1</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1a7d46875fa3ebd2c34d2756950eda83bf" compoundref="stm32f10x_8h" startline="521">ENABLE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="group___a_p_b1__peripheral_1ga8eaeded403b5a2277fbfb3896c639416" compoundref="stm32f10x__rcc_8h" startline="545">RCC_APB1Periph_I2C2</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1gaac29465bca70fbc91c2f922ab67bb88e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_Init</definition>
        <argsstring>(I2C_TypeDef *I2Cx, I2C_InitTypeDef *I2C_InitStruct)</argsstring>
        <name>I2C_Init</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type><ref refid="struct_i2_c___init_type_def" kindref="compound">I2C_InitTypeDef</ref> *</type>
          <declname>I2C_InitStruct</declname>
        </param>
        <briefdescription>
<para>Initializes the I2Cx peripheral according to the specified parameters in the I2C_InitStruct. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I2C_InitStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a <ref refid="struct_i2_c___init_type_def" kindref="compound">I2C_InitTypeDef</ref> structure that contains the configuration information for the specified I2C peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="541" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="191" bodyend="304"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___i2_c__clock__speed_1gae0d731df1b264d853703716c29309b9b" compoundref="stm32f10x__i2c_8h" startline="519">IS_I2C_CLOCK_SPEED</references>
        <references refid="struct_i2_c___init_type_def_1a737c289f4515ae4cb642db0412762169" compoundref="stm32f10x__i2c_8h" startline="58">I2C_InitTypeDef::I2C_ClockSpeed</references>
        <references refid="group___i2_c__mode_1ga58464e1fe94a79bab721137a544baf79" compoundref="stm32f10x__i2c_8h" startline="95">IS_I2C_MODE</references>
        <references refid="struct_i2_c___init_type_def_1ad5cf353c5b6968b3610b70ca593cec52" compoundref="stm32f10x__i2c_8h" startline="61">I2C_InitTypeDef::I2C_Mode</references>
        <references refid="group___i2_c__duty__cycle__in__fast__mode_1gae9b3276d9b6ec872ee4fafa2b2fafb83" compoundref="stm32f10x__i2c_8h" startline="108">IS_I2C_DUTY_CYCLE</references>
        <references refid="struct_i2_c___init_type_def_1aff23b28652359513dfd268dee54c3279" compoundref="stm32f10x__i2c_8h" startline="64">I2C_InitTypeDef::I2C_DutyCycle</references>
        <references refid="group___i2_c__own__address1_1gad84e8b9523d45b6105b4d5cb68994a79" compoundref="stm32f10x__i2c_8h" startline="510">IS_I2C_OWN_ADDRESS1</references>
        <references refid="struct_i2_c___init_type_def_1a08543cb71b4b2a89ad81a2cefff12b53" compoundref="stm32f10x__i2c_8h" startline="67">I2C_InitTypeDef::I2C_OwnAddress1</references>
        <references refid="group___i2_c__acknowledgement_1ga6401bedc842e784a2bb78b3aa21af19d" compoundref="stm32f10x__i2c_8h" startline="120">IS_I2C_ACK_STATE</references>
        <references refid="struct_i2_c___init_type_def_1a7bcae26f098e897832e5e42b055f8c98" compoundref="stm32f10x__i2c_8h" startline="70">I2C_InitTypeDef::I2C_Ack</references>
        <references refid="group___i2_c__acknowledged__address_1ga26a3af0a468f7226ed72fde27528c0ba" compoundref="stm32f10x__i2c_8h" startline="144">IS_I2C_ACKNOWLEDGE_ADDRESS</references>
        <references refid="struct_i2_c___init_type_def_1a300e847972f50b0d25c4f13be5d93d79" compoundref="stm32f10x__i2c_8h" startline="73">I2C_InitTypeDef::I2C_AcknowledgedAddress</references>
        <references refid="struct_i2_c___type_def_1ac8bff45acc455489620d50e697a24c9d" compoundref="stm32f10x_8h" startline="1032">I2C_TypeDef::CR2</references>
        <references refid="group___i2_c___private___defines_1ga2bcf74bd8fc3aaa931faf750d1afe405" compoundref="stm32f10x__i2c_8c" startline="100">CR2_FREQ_Reset</references>
        <references refid="group___r_c_c___exported___functions_1ga3e9944fd1ed734275222bbb3e3f29993" compoundref="stm32f10x__rcc_8c" startline="908" endline="1031">RCC_GetClocksFreq</references>
        <references refid="struct_r_c_c___clocks_type_def_1add4cfc63c35178d187107edc764e0b8f" compoundref="stm32f10x__rcc_8h" startline="50">RCC_ClocksTypeDef::PCLK1_Frequency</references>
        <references refid="struct_i2_c___type_def_1ad35ea0b199cefb757de20e9b78168534" compoundref="stm32f10x_8h" startline="1030">I2C_TypeDef::CR1</references>
        <references refid="group___i2_c___private___defines_1ga21dc289f16c502a2bc0a88e1514a8ee0" compoundref="stm32f10x__i2c_8c" startline="50">CR1_PE_Reset</references>
        <references refid="struct_i2_c___type_def_1aaba7a808e4dfae5cc06b197c298af206" compoundref="stm32f10x_8h" startline="1046">I2C_TypeDef::TRISE</references>
        <references refid="group___i2_c__duty__cycle__in__fast__mode_1gafe0af31970aceef0fa8df6a10bef35db" compoundref="stm32f10x__i2c_8h" startline="107">I2C_DutyCycle_2</references>
        <references refid="group___i2_c__duty__cycle__in__fast__mode_1ga2b4ff186808a8095fc2d1b8193f30ce1" compoundref="stm32f10x__i2c_8h" startline="106">I2C_DutyCycle_16_9</references>
        <references refid="group___i2_c___private___defines_1ga07695fd4c06df54def77840118f83a0d" compoundref="stm32f10x__i2c_8c" startline="117">CCR_CCR_Set</references>
        <references refid="group___i2_c___private___defines_1ga3af49180596b283514782708ac85606e" compoundref="stm32f10x__i2c_8c" startline="114">CCR_FS_Set</references>
        <references refid="struct_i2_c___type_def_1a1775e779008da2b4d1807c2b5033b8a5" compoundref="stm32f10x_8h" startline="1044">I2C_TypeDef::CCR</references>
        <references refid="group___i2_c___private___defines_1ga913b708338087f3ffc2fba2b05a38917" compoundref="stm32f10x__i2c_8c" startline="49">CR1_PE_Set</references>
        <references refid="group___i2_c___private___defines_1ga67f7dd35ea3d1296677e5fc50b88fa90" compoundref="stm32f10x__i2c_8c" startline="89">CR1_CLEAR_Mask</references>
        <references refid="struct_i2_c___type_def_1ad218fdcb9606477c1d63f8ee38d3c5c9" compoundref="stm32f10x_8h" startline="1034">I2C_TypeDef::OAR1</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga08582aca6d7d7910cd5cbff0d9def350" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_StructInit</definition>
        <argsstring>(I2C_InitTypeDef *I2C_InitStruct)</argsstring>
        <name>I2C_StructInit</name>
        <param>
          <type><ref refid="struct_i2_c___init_type_def" kindref="compound">I2C_InitTypeDef</ref> *</type>
          <declname>I2C_InitStruct</declname>
        </param>
        <briefdescription>
<para>Fills each I2C_InitStruct member with its default value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2C_InitStruct</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to an <ref refid="struct_i2_c___init_type_def" kindref="compound">I2C_InitTypeDef</ref> structure which will be initialized. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="542" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="311" bodyend="326"/>
        <references refid="struct_i2_c___init_type_def_1a737c289f4515ae4cb642db0412762169" compoundref="stm32f10x__i2c_8h" startline="58">I2C_InitTypeDef::I2C_ClockSpeed</references>
        <references refid="struct_i2_c___init_type_def_1ad5cf353c5b6968b3610b70ca593cec52" compoundref="stm32f10x__i2c_8h" startline="61">I2C_InitTypeDef::I2C_Mode</references>
        <references refid="group___i2_c__mode_1ga8bc3b0555ca31b6f8423bc2ada45d1ac" compoundref="stm32f10x__i2c_8h" startline="92">I2C_Mode_I2C</references>
        <references refid="struct_i2_c___init_type_def_1aff23b28652359513dfd268dee54c3279" compoundref="stm32f10x__i2c_8h" startline="64">I2C_InitTypeDef::I2C_DutyCycle</references>
        <references refid="group___i2_c__duty__cycle__in__fast__mode_1gafe0af31970aceef0fa8df6a10bef35db" compoundref="stm32f10x__i2c_8h" startline="107">I2C_DutyCycle_2</references>
        <references refid="struct_i2_c___init_type_def_1a08543cb71b4b2a89ad81a2cefff12b53" compoundref="stm32f10x__i2c_8h" startline="67">I2C_InitTypeDef::I2C_OwnAddress1</references>
        <references refid="struct_i2_c___init_type_def_1a7bcae26f098e897832e5e42b055f8c98" compoundref="stm32f10x__i2c_8h" startline="70">I2C_InitTypeDef::I2C_Ack</references>
        <references refid="group___i2_c__acknowledgement_1gadb5f47c052ac6bae1aa58c724e339e36" compoundref="stm32f10x__i2c_8h" startline="119">I2C_Ack_Disable</references>
        <references refid="struct_i2_c___init_type_def_1a300e847972f50b0d25c4f13be5d93d79" compoundref="stm32f10x__i2c_8h" startline="73">I2C_InitTypeDef::I2C_AcknowledgedAddress</references>
        <references refid="group___i2_c__acknowledged__address_1ga5e5ad2148f9da14457c7b59357acee97" compoundref="stm32f10x__i2c_8h" startline="142">I2C_AcknowledgedAddress_7bit</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga7e1323c9133c2cb424dfb5b10b7d2f0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_Cmd</definition>
        <argsstring>(I2C_TypeDef *I2Cx, FunctionalState NewState)</argsstring>
        <name>I2C_Cmd</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified I2C peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the I2Cx peripheral. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="543" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="335" bodyend="350"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_i2_c___type_def_1ad35ea0b199cefb757de20e9b78168534" compoundref="stm32f10x_8h" startline="1030">I2C_TypeDef::CR1</references>
        <references refid="group___i2_c___private___defines_1ga913b708338087f3ffc2fba2b05a38917" compoundref="stm32f10x__i2c_8c" startline="49">CR1_PE_Set</references>
        <references refid="group___i2_c___private___defines_1ga21dc289f16c502a2bc0a88e1514a8ee0" compoundref="stm32f10x__i2c_8c" startline="50">CR1_PE_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga38502ce11e5ec923e0f6476aaa35b45c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_DMACmd</definition>
        <argsstring>(I2C_TypeDef *I2Cx, FunctionalState NewState)</argsstring>
        <name>I2C_DMACmd</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified I2C DMA requests. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the I2C DMA transfer. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="544" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="359" bodyend="374"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_i2_c___type_def_1ac8bff45acc455489620d50e697a24c9d" compoundref="stm32f10x_8h" startline="1032">I2C_TypeDef::CR2</references>
        <references refid="group___i2_c___private___defines_1gafe82da50fa03bd5ecb36340da64c87ca" compoundref="stm32f10x__i2c_8c" startline="92">CR2_DMAEN_Set</references>
        <references refid="group___i2_c___private___defines_1gabe742f89a768e29b9a2d86f7782991a6" compoundref="stm32f10x__i2c_8c" startline="93">CR2_DMAEN_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1gab2e994c5681eb6ec7c26a03ffe1de060" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_DMALastTransferCmd</definition>
        <argsstring>(I2C_TypeDef *I2Cx, FunctionalState NewState)</argsstring>
        <name>I2C_DMALastTransferCmd</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Specifies if the next DMA transfer will be the last one. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the I2C DMA last transfer. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="545" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="383" bodyend="398"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_i2_c___type_def_1ac8bff45acc455489620d50e697a24c9d" compoundref="stm32f10x_8h" startline="1032">I2C_TypeDef::CR2</references>
        <references refid="group___i2_c___private___defines_1ga3604dd2f23b0f15a088ef6fe9731485a" compoundref="stm32f10x__i2c_8c" startline="96">CR2_LAST_Set</references>
        <references refid="group___i2_c___private___defines_1ga904e044226182269485936bad8314f84" compoundref="stm32f10x__i2c_8c" startline="97">CR2_LAST_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga36c522b471588be9779c878222ccb20f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_GenerateSTART</definition>
        <argsstring>(I2C_TypeDef *I2Cx, FunctionalState NewState)</argsstring>
        <name>I2C_GenerateSTART</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Generates I2Cx communication START condition. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the I2C START condition generation. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="546" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="407" bodyend="422"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_i2_c___type_def_1ad35ea0b199cefb757de20e9b78168534" compoundref="stm32f10x_8h" startline="1030">I2C_TypeDef::CR1</references>
        <references refid="group___i2_c___private___defines_1ga53820dd338da9779d039718148184ef9" compoundref="stm32f10x__i2c_8c" startline="53">CR1_START_Set</references>
        <references refid="group___i2_c___private___defines_1gacc62242e31a380aec2ef9f836b3cf19d" compoundref="stm32f10x__i2c_8c" startline="54">CR1_START_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga5c92cb573ca0ae58cc465e5400246561" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_GenerateSTOP</definition>
        <argsstring>(I2C_TypeDef *I2Cx, FunctionalState NewState)</argsstring>
        <name>I2C_GenerateSTOP</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Generates I2Cx communication STOP condition. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the I2C STOP condition generation. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="547" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="431" bodyend="446"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_i2_c___type_def_1ad35ea0b199cefb757de20e9b78168534" compoundref="stm32f10x_8h" startline="1030">I2C_TypeDef::CR1</references>
        <references refid="group___i2_c___private___defines_1gac14ffc5548d2c30d21c49612c57e52be" compoundref="stm32f10x__i2c_8c" startline="57">CR1_STOP_Set</references>
        <references refid="group___i2_c___private___defines_1gac44124bc7b468c7dee8188712e407e02" compoundref="stm32f10x__i2c_8c" startline="58">CR1_STOP_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga7bb44e894d68a7991f564c43fb187486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_AcknowledgeConfig</definition>
        <argsstring>(I2C_TypeDef *I2Cx, FunctionalState NewState)</argsstring>
        <name>I2C_AcknowledgeConfig</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified I2C acknowledge feature. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the I2C Acknowledgement. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="548" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="455" bodyend="470"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_i2_c___type_def_1ad35ea0b199cefb757de20e9b78168534" compoundref="stm32f10x_8h" startline="1030">I2C_TypeDef::CR1</references>
        <references refid="group___i2_c___private___defines_1ga1f74487a0fbffdcd8a4c440c732dc316" compoundref="stm32f10x__i2c_8c" startline="61">CR1_ACK_Set</references>
        <references refid="group___i2_c___private___defines_1gaa8bcbe2f6089d896aff8e7770368aada" compoundref="stm32f10x__i2c_8c" startline="62">CR1_ACK_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga7be2cc634a613c8e3539137e897a22df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_OwnAddress2Config</definition>
        <argsstring>(I2C_TypeDef *I2Cx, uint8_t Address)</argsstring>
        <name>I2C_OwnAddress2Config</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>Address</declname>
        </param>
        <briefdescription>
<para>Configures the specified I2C own address2. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Address</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the 7bit I2C own address2. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="549" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="478" bodyend="507"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="struct_i2_c___type_def_1a03189e2a57c81ae5d103739b72f52c93" compoundref="stm32f10x_8h" startline="1036">I2C_TypeDef::OAR2</references>
        <references refid="group___i2_c___private___defines_1ga243036db699954e290f48e6743323054" compoundref="stm32f10x__i2c_8c" startline="111">OAR2_ADD2_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga02145a333a56e79557d6ef4ea03fc313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_DualAddressCmd</definition>
        <argsstring>(I2C_TypeDef *I2Cx, FunctionalState NewState)</argsstring>
        <name>I2C_DualAddressCmd</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified I2C dual addressing mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the I2C dual addressing mode. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="550" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="516" bodyend="531"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_i2_c___type_def_1a03189e2a57c81ae5d103739b72f52c93" compoundref="stm32f10x_8h" startline="1036">I2C_TypeDef::OAR2</references>
        <references refid="group___i2_c___private___defines_1ga859551657f688e5efdb3f573e78ee979" compoundref="stm32f10x__i2c_8c" startline="107">OAR2_ENDUAL_Set</references>
        <references refid="group___i2_c___private___defines_1gaae86eb7689c73e34388cfbd03b8d9ecd" compoundref="stm32f10x__i2c_8c" startline="108">OAR2_ENDUAL_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga65c740fc8d7b3b9f15cc432d8699d471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_GeneralCallCmd</definition>
        <argsstring>(I2C_TypeDef *I2Cx, FunctionalState NewState)</argsstring>
        <name>I2C_GeneralCallCmd</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified I2C general call feature. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the I2C General call. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="551" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="540" bodyend="555"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_i2_c___type_def_1ad35ea0b199cefb757de20e9b78168534" compoundref="stm32f10x_8h" startline="1030">I2C_TypeDef::CR1</references>
        <references refid="group___i2_c___private___defines_1gadcd99a681046a2315f4bc72c9f461f0e" compoundref="stm32f10x__i2c_8c" startline="65">CR1_ENGC_Set</references>
        <references refid="group___i2_c___private___defines_1gab51161052b055a5eecb0aad447a776e5" compoundref="stm32f10x__i2c_8c" startline="66">CR1_ENGC_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga58fed146a06cb81d2940604e460de047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_ITConfig</definition>
        <argsstring>(I2C_TypeDef *I2Cx, uint16_t I2C_IT, FunctionalState NewState)</argsstring>
        <name>I2C_ITConfig</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>I2C_IT</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified I2C interrupts. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I2C_IT</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the I2C interrupts sources to be enabled or disabled. This parameter can be any combination of the following values: <itemizedlist>
<listitem><para>I2C_IT_BUF: Buffer interrupt mask </para></listitem>
<listitem><para>I2C_IT_EVT: Event interrupt mask </para></listitem>
<listitem><para>I2C_IT_ERR: Error interrupt mask </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the specified I2C interrupts. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="552" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="569" bodyend="586"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___i2_c__interrupts__definition_1gae2695a081871336881f9105d6c847c4f" compoundref="stm32f10x__i2c_8h" startline="219">IS_I2C_CONFIG_IT</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_i2_c___type_def_1ac8bff45acc455489620d50e697a24c9d" compoundref="stm32f10x_8h" startline="1032">I2C_TypeDef::CR2</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga7bd9e70b8eafde0dd5eb42b0d95fe1a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_SendData</definition>
        <argsstring>(I2C_TypeDef *I2Cx, uint8_t Data)</argsstring>
        <name>I2C_SendData</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>Data</declname>
        </param>
        <briefdescription>
<para>Sends a data byte through the I2Cx peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>Byte to be transmitted.. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="553" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="594" bodyend="600"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="struct_i2_c___type_def_1a5c1551b886fbb8e801b9203f6d7dc7c5" compoundref="stm32f10x_8h" startline="1038">I2C_TypeDef::DR</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1gaeaaa4b6f77f50eb57465148c55d27fb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t I2C_ReceiveData</definition>
        <argsstring>(I2C_TypeDef *I2Cx)</argsstring>
        <name>I2C_ReceiveData</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <briefdescription>
<para>Returns the most recent received data by the I2Cx peripheral. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the received data. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="554" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="607" bodyend="613"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="struct_i2_c___type_def_1a5c1551b886fbb8e801b9203f6d7dc7c5" compoundref="stm32f10x_8h" startline="1038">I2C_TypeDef::DR</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga009fc2a5b2313c36da39ece39a1156a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_Send7bitAddress</definition>
        <argsstring>(I2C_TypeDef *I2Cx, uint8_t Address, uint8_t I2C_Direction)</argsstring>
        <name>I2C_Send7bitAddress</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>Address</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>I2C_Direction</declname>
        </param>
        <briefdescription>
<para>Transmits the address byte to select the slave device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Address</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the slave address which will be transmitted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I2C_Direction</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies whether the I2C device will be a Transmitter or a Receiver. This parameter can be one of the following values <itemizedlist>
<listitem><para>I2C_Direction_Transmitter: Transmitter mode </para></listitem>
<listitem><para>I2C_Direction_Receiver: Receiver mode </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None.</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="555" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="625" bodyend="652"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___i2_c__transfer__direction_1ga33368efe652bc25b4f4b74f02ce0657e" compoundref="stm32f10x__i2c_8h" startline="132">IS_I2C_DIRECTION</references>
        <references refid="group___i2_c__transfer__direction_1ga9895ee2d7d8cc8ba4daafafa1c3ce1ac" compoundref="stm32f10x__i2c_8h" startline="130">I2C_Direction_Transmitter</references>
        <references refid="group___i2_c___private___defines_1gaeb56bf422fd13e68c82783df63f425ab" compoundref="stm32f10x__i2c_8c" startline="103">OAR1_ADD0_Set</references>
        <references refid="group___i2_c___private___defines_1gac5c2ac4577b70e1d7618b7fa1d715e3a" compoundref="stm32f10x__i2c_8c" startline="104">OAR1_ADD0_Reset</references>
        <references refid="struct_i2_c___type_def_1a5c1551b886fbb8e801b9203f6d7dc7c5" compoundref="stm32f10x_8h" startline="1038">I2C_TypeDef::DR</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga8021dc796d15f997356b0583d6346805" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t I2C_ReadRegister</definition>
        <argsstring>(I2C_TypeDef *I2Cx, uint8_t I2C_Register)</argsstring>
        <name>I2C_ReadRegister</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>I2C_Register</declname>
        </param>
        <briefdescription>
<para>Reads the specified I2C register and returns its value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2C_Register</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the register to read. This parameter can be one of the following values: <itemizedlist>
<listitem><para>I2C_Register_CR1: CR1 register. </para></listitem>
<listitem><para>I2C_Register_CR2: CR2 register. </para></listitem>
<listitem><para>I2C_Register_OAR1: OAR1 register. </para></listitem>
<listitem><para>I2C_Register_OAR2: OAR2 register. </para></listitem>
<listitem><para>I2C_Register_DR: DR register. </para></listitem>
<listitem><para>I2C_Register_SR1: SR1 register. </para></listitem>
<listitem><para>I2C_Register_SR2: SR2 register. </para></listitem>
<listitem><para>I2C_Register_CCR: CCR register. </para></listitem>
<listitem><para>I2C_Register_TRISE: TRISE register. </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>value of the read register. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="556" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="669" bodyend="682"/>
        <references refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" compoundref="core__cm0_8h" startline="221">__IO</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___i2_c__registers_1ga37206b258f7930065c308ec7d35f243e" compoundref="stm32f10x__i2c_8h" startline="163">IS_I2C_REGISTER</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga1289c908aeb882443aba323b459c638b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_SoftwareResetCmd</definition>
        <argsstring>(I2C_TypeDef *I2Cx, FunctionalState NewState)</argsstring>
        <name>I2C_SoftwareResetCmd</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified I2C software reset. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the I2C software reset. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="557" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="691" bodyend="706"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_i2_c___type_def_1ad35ea0b199cefb757de20e9b78168534" compoundref="stm32f10x_8h" startline="1030">I2C_TypeDef::CR1</references>
        <references refid="group___i2_c___private___defines_1ga0e067bb108052ea0e8e49feb194c2ca0" compoundref="stm32f10x__i2c_8c" startline="69">CR1_SWRST_Set</references>
        <references refid="group___i2_c___private___defines_1gab41b615034ed8f830ef4900a0fcefc39" compoundref="stm32f10x__i2c_8c" startline="70">CR1_SWRST_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1gad08ebffc3a234d84e6405ec115bd74f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_NACKPositionConfig</definition>
        <argsstring>(I2C_TypeDef *I2Cx, uint16_t I2C_NACKPosition)</argsstring>
        <name>I2C_NACKPositionConfig</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>I2C_NACKPosition</declname>
        </param>
        <briefdescription>
<para>Selects the specified I2C NACK position in master receiver mode. This function is useful in I2C Master Receiver mode when the number of data to be received is equal to 2. In this case, this function should be called (with parameter I2C_NACKPosition_Next) before data reception starts,as described in the 2-byte reception procedure recommended in Reference Manual in Section: Master receiver. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I2C_NACKPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the NACK position. This parameter can be one of the following values: <itemizedlist>
<listitem><para>I2C_NACKPosition_Next: indicates that the next byte will be the last received byte. </para></listitem>
<listitem><para>I2C_NACKPosition_Current: indicates that current byte is the last received byte.</para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function configures the same bit (POS) as <ref refid="group___i2_c___private___functions_1ga5d0f939bdd45542502827bf408f24161" kindref="member">I2C_PECPositionConfig()</ref> but is intended to be used in I2C mode while <ref refid="group___i2_c___private___functions_1ga5d0f939bdd45542502827bf408f24161" kindref="member">I2C_PECPositionConfig()</ref> is intended to used in SMBUS mode.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="558" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="729" bodyend="746"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___i2_c___n_c_a_k__position_1ga631b4b1674a12aa2b3b27360983029e3" compoundref="stm32f10x__i2c_8h" startline="206">IS_I2C_NACK_POSITION</references>
        <references refid="group___i2_c___n_c_a_k__position_1gacb512a4bd4841a763b6ec51606687fca" compoundref="stm32f10x__i2c_8h" startline="204">I2C_NACKPosition_Next</references>
        <references refid="struct_i2_c___type_def_1ad35ea0b199cefb757de20e9b78168534" compoundref="stm32f10x_8h" startline="1030">I2C_TypeDef::CR1</references>
        <references refid="group___i2_c___n_c_a_k__position_1ga8d91c1e62730a9d927ca8e9ec4f7ef8f" compoundref="stm32f10x__i2c_8h" startline="205">I2C_NACKPosition_Current</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga75a810776d9710d2f6d9c5d9e93241c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_SMBusAlertConfig</definition>
        <argsstring>(I2C_TypeDef *I2Cx, uint16_t I2C_SMBusAlert)</argsstring>
        <name>I2C_SMBusAlertConfig</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>I2C_SMBusAlert</declname>
        </param>
        <briefdescription>
<para>Drives the SMBusAlert pin high or low for the specified I2C. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I2C_SMBusAlert</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies SMBAlert pin level. This parameter can be one of the following values: <itemizedlist>
<listitem><para>I2C_SMBusAlert_Low: SMBAlert pin driven low </para></listitem>
<listitem><para>I2C_SMBusAlert_High: SMBAlert pin driven high </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="559" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="757" bodyend="772"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___i2_c___s_m_bus__alert__pin__level_1ga61b0c91563eb4bd598329241fe7d3bb4" compoundref="stm32f10x__i2c_8h" startline="182">IS_I2C_SMBUS_ALERT</references>
        <references refid="group___i2_c___s_m_bus__alert__pin__level_1ga6f923166107afb8aad1d7d1a87048d6e" compoundref="stm32f10x__i2c_8h" startline="180">I2C_SMBusAlert_Low</references>
        <references refid="struct_i2_c___type_def_1ad35ea0b199cefb757de20e9b78168534" compoundref="stm32f10x_8h" startline="1030">I2C_TypeDef::CR1</references>
        <references refid="group___i2_c___s_m_bus__alert__pin__level_1gac3ab64f43ef90f0f83f9c88981aaa862" compoundref="stm32f10x__i2c_8h" startline="181">I2C_SMBusAlert_High</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1gaa27d1440290fe601e730b6980999afe3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_TransmitPEC</definition>
        <argsstring>(I2C_TypeDef *I2Cx, FunctionalState NewState)</argsstring>
        <name>I2C_TransmitPEC</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified I2C PEC transfer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the I2C PEC transmission. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="560" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="781" bodyend="796"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_i2_c___type_def_1ad35ea0b199cefb757de20e9b78168534" compoundref="stm32f10x_8h" startline="1030">I2C_TypeDef::CR1</references>
        <references refid="group___i2_c___private___defines_1gad0ab853d291338d4cf3aee736353f0b8" compoundref="stm32f10x__i2c_8c" startline="73">CR1_PEC_Set</references>
        <references refid="group___i2_c___private___defines_1gabb6969dfa44c3539ef93f04f8136c3c7" compoundref="stm32f10x__i2c_8c" startline="74">CR1_PEC_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga5d0f939bdd45542502827bf408f24161" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_PECPositionConfig</definition>
        <argsstring>(I2C_TypeDef *I2Cx, uint16_t I2C_PECPosition)</argsstring>
        <name>I2C_PECPositionConfig</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>I2C_PECPosition</declname>
        </param>
        <briefdescription>
<para>Selects the specified I2C PEC position. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I2C_PECPosition</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the PEC position. This parameter can be one of the following values: <itemizedlist>
<listitem><para>I2C_PECPosition_Next: indicates that the next byte is PEC </para></listitem>
<listitem><para>I2C_PECPosition_Current: indicates that current byte is PEC</para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function configures the same bit (POS) as <ref refid="group___i2_c___private___functions_1gad08ebffc3a234d84e6405ec115bd74f1" kindref="member">I2C_NACKPositionConfig()</ref> but is intended to be used in SMBUS mode while <ref refid="group___i2_c___private___functions_1gad08ebffc3a234d84e6405ec115bd74f1" kindref="member">I2C_NACKPositionConfig()</ref> is intended to used in I2C mode.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="561" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="812" bodyend="827"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___i2_c___p_e_c__position_1gac8611a62b06256b1b3c60d4859a016ef" compoundref="stm32f10x__i2c_8h" startline="194">IS_I2C_PEC_POSITION</references>
        <references refid="group___i2_c___p_e_c__position_1ga74d0996efe6e278fb28d053ba78fccc5" compoundref="stm32f10x__i2c_8h" startline="192">I2C_PECPosition_Next</references>
        <references refid="struct_i2_c___type_def_1ad35ea0b199cefb757de20e9b78168534" compoundref="stm32f10x_8h" startline="1030">I2C_TypeDef::CR1</references>
        <references refid="group___i2_c___p_e_c__position_1ga8a393364dd651f88bcaebac71c1c52c7" compoundref="stm32f10x__i2c_8h" startline="193">I2C_PECPosition_Current</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1gae86801251359226c35745e0a258388b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_CalculatePEC</definition>
        <argsstring>(I2C_TypeDef *I2Cx, FunctionalState NewState)</argsstring>
        <name>I2C_CalculatePEC</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the PEC value calculation of the transferred bytes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the I2Cx PEC value calculation. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="562" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="836" bodyend="851"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_i2_c___type_def_1ad35ea0b199cefb757de20e9b78168534" compoundref="stm32f10x_8h" startline="1030">I2C_TypeDef::CR1</references>
        <references refid="group___i2_c___private___defines_1ga7fdf69341e5debc3244812012ae332e6" compoundref="stm32f10x__i2c_8c" startline="77">CR1_ENPEC_Set</references>
        <references refid="group___i2_c___private___defines_1gabd33104d7b8e4673fa330f4ca3a97e44" compoundref="stm32f10x__i2c_8c" startline="78">CR1_ENPEC_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga7bf75e7c27c0e1d73e70fc0e1c7cd1dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t I2C_GetPEC</definition>
        <argsstring>(I2C_TypeDef *I2Cx)</argsstring>
        <name>I2C_GetPEC</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <briefdescription>
<para>Returns the PEC value for the specified I2C. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>PEC value. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="563" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="858" bodyend="874"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="struct_i2_c___type_def_1a95c7f729b10eb2acafe499d9c9a81a83" compoundref="stm32f10x_8h" startline="1042">I2C_TypeDef::SR2</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga66d86742bf1be58b17ef8779ffc79d02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_ARPCmd</definition>
        <argsstring>(I2C_TypeDef *I2Cx, FunctionalState NewState)</argsstring>
        <name>I2C_ARPCmd</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified I2C ARP. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the I2Cx ARP. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="564" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="883" bodyend="898"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_i2_c___type_def_1ad35ea0b199cefb757de20e9b78168534" compoundref="stm32f10x_8h" startline="1030">I2C_TypeDef::CR1</references>
        <references refid="group___i2_c___private___defines_1ga73cfd7b486b4279fc6a83de64ab23985" compoundref="stm32f10x__i2c_8c" startline="81">CR1_ENARP_Set</references>
        <references refid="group___i2_c___private___defines_1ga173b065ec9b7b33c0fa0bf71c0fa2207" compoundref="stm32f10x__i2c_8c" startline="82">CR1_ENARP_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga7459feb3b1dfcd3e4f6574002ca7d3bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_StretchClockCmd</definition>
        <argsstring>(I2C_TypeDef *I2Cx, FunctionalState NewState)</argsstring>
        <name>I2C_StretchClockCmd</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref></type>
          <declname>NewState</declname>
        </param>
        <briefdescription>
<para>Enables or disables the specified I2C Clock stretching. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NewState</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of the I2Cx Clock stretching. This parameter can be: ENABLE or DISABLE. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="565" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="907" bodyend="922"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___exported__types_1gaffaf7c3f537d7a3370b1bbdda67a2bf6" compoundref="stm32f10x_8h" startline="522">IS_FUNCTIONAL_STATE</references>
        <references refid="group___exported__types_1ggac9a7e9a35d2513ec15c3b537aaa4fba1ad3a9df141be0ccf10389b640f492b26d" compoundref="stm32f10x_8h" startline="521">DISABLE</references>
        <references refid="struct_i2_c___type_def_1ad35ea0b199cefb757de20e9b78168534" compoundref="stm32f10x_8h" startline="1030">I2C_TypeDef::CR1</references>
        <references refid="group___i2_c___private___defines_1gac4abee43c3523527780f200adf465bc0" compoundref="stm32f10x__i2c_8c" startline="85">CR1_NOSTRETCH_Set</references>
        <references refid="group___i2_c___private___defines_1ga9a1609fd4bbcc38fc6423836730c8fa0" compoundref="stm32f10x__i2c_8c" startline="86">CR1_NOSTRETCH_Reset</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1gaa570f76bc34e5b0531b29b1a90af1275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_FastModeDutyCycleConfig</definition>
        <argsstring>(I2C_TypeDef *I2Cx, uint16_t I2C_DutyCycle)</argsstring>
        <name>I2C_FastModeDutyCycleConfig</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>I2C_DutyCycle</declname>
        </param>
        <briefdescription>
<para>Selects the specified I2C fast mode duty cycle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I2C_DutyCycle</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the fast mode duty cycle. This parameter can be one of the following values: <itemizedlist>
<listitem><para>I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2 </para></listitem>
<listitem><para>I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9 </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="566" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="933" bodyend="948"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___i2_c__duty__cycle__in__fast__mode_1gae9b3276d9b6ec872ee4fafa2b2fafb83" compoundref="stm32f10x__i2c_8h" startline="108">IS_I2C_DUTY_CYCLE</references>
        <references refid="group___i2_c__duty__cycle__in__fast__mode_1ga2b4ff186808a8095fc2d1b8193f30ce1" compoundref="stm32f10x__i2c_8h" startline="106">I2C_DutyCycle_16_9</references>
        <references refid="struct_i2_c___type_def_1a1775e779008da2b4d1807c2b5033b8a5" compoundref="stm32f10x_8h" startline="1044">I2C_TypeDef::CCR</references>
        <references refid="group___i2_c__duty__cycle__in__fast__mode_1gafe0af31970aceef0fa8df6a10bef35db" compoundref="stm32f10x__i2c_8h" startline="107">I2C_DutyCycle_2</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga2d5701342f9d4c1f09bf9d3cdcacc326" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___exported__types_1ga8333b96c67f83cba354b3407fcbb6ee8" kindref="member">ErrorStatus</ref></type>
        <definition>ErrorStatus I2C_CheckEvent</definition>
        <argsstring>(I2C_TypeDef *I2Cx, uint32_t I2C_EVENT)</argsstring>
        <name>I2C_CheckEvent</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>I2C_EVENT</declname>
        </param>
        <briefdescription>
<para>I2C State Monitoring Functions. </para>        </briefdescription>
        <detaileddescription>
<para>This I2C driver provides three different ways for I2C state monitoring depending on the application requirements and constraints:</para><para>1) Basic state monitoring: Using <ref refid="group___i2_c___private___functions_1ga2d5701342f9d4c1f09bf9d3cdcacc326" kindref="member">I2C_CheckEvent()</ref> function: It compares the status registers (SR1 and SR2) content to a given event (can be the combination of one or more flags). It returns SUCCESS if the current status includes the given flags and returns ERROR if one or more flags are missing in the current status.<itemizedlist>
<listitem><para>When to use:<itemizedlist>
<listitem><para>This function is suitable for most applications as well as for startup activity since the events are fully described in the product reference manual (RM0008).</para></listitem><listitem><para>It is also suitable for users who need to define their own events.</para></listitem></itemizedlist>
</para></listitem><listitem><para>Limitations:<itemizedlist>
<listitem><para>If an error occurs (ie. error flags are set besides to the monitored flags), the <ref refid="group___i2_c___private___functions_1ga2d5701342f9d4c1f09bf9d3cdcacc326" kindref="member">I2C_CheckEvent()</ref> function may return SUCCESS despite the communication hold or corrupted real state. In this case, it is advised to use error interrupts to monitor the error events and handle them in the interrupt IRQ handler.</para><para><simplesect kind="note"><para>For error management, it is advised to use the following functions:<itemizedlist>
<listitem><para><ref refid="group___i2_c___private___functions_1ga58fed146a06cb81d2940604e460de047" kindref="member">I2C_ITConfig()</ref> to configure and enable the error interrupts (I2C_IT_ERR).</para></listitem><listitem><para>I2Cx_ER_IRQHandler() which is called when the error interrupt occurs. Where x is the peripheral instance (I2C1, I2C2 ...)</para></listitem><listitem><para><ref refid="group___i2_c___private___functions_1ga15c95d0ed124f029621a2061b1677ee7" kindref="member">I2C_GetFlagStatus()</ref> or <ref refid="group___i2_c___private___functions_1ga447771fbbd94a56f3570b9f430a069ba" kindref="member">I2C_GetITStatus()</ref> to be called into I2Cx_ER_IRQHandler() in order to determine which error occurred.</para></listitem><listitem><para><ref refid="group___i2_c___private___functions_1ga9d4f8fe9f7232696114b5578b1223963" kindref="member">I2C_ClearFlag()</ref> or <ref refid="group___i2_c___private___functions_1ga110dda440fa200b5f77349df19b3e6bb" kindref="member">I2C_ClearITPendingBit()</ref> and/or <ref refid="group___i2_c___private___functions_1ga1289c908aeb882443aba323b459c638b" kindref="member">I2C_SoftwareResetCmd()</ref> and/or I2C_GenerateStop() in order to clear the error flag and source, and return to correct communication status.</para></listitem></itemizedlist>
</para></simplesect>
2) Advanced state monitoring: Using the function <ref refid="group___i2_c___private___functions_1ga29237aea9b5a3ead33167e1d027e9f1a" kindref="member">I2C_GetLastEvent()</ref> which returns the image of both status registers in a single word (uint32_t) (Status Register 2 value is shifted left by 16 bits and concatenated to Status Register 1).</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para><para>When to use:<itemizedlist>
<listitem><para>This function is suitable for the same applications above but it allows to overcome the limitations of <ref refid="group___i2_c___private___functions_1ga15c95d0ed124f029621a2061b1677ee7" kindref="member">I2C_GetFlagStatus()</ref> function (see below). The returned value could be compared to events already defined in the library (<ref refid="stm32f10x__i2c_8h" kindref="compound">stm32f10x_i2c.h</ref>) or to custom values defined by user.</para></listitem><listitem><para>This function is suitable when multiple flags are monitored at the same time.</para></listitem><listitem><para>At the opposite of <ref refid="group___i2_c___private___functions_1ga2d5701342f9d4c1f09bf9d3cdcacc326" kindref="member">I2C_CheckEvent()</ref> function, this function allows user to choose when an event is accepted (when all events flags are set and no other flags are set or just when the needed flags are set like <ref refid="group___i2_c___private___functions_1ga2d5701342f9d4c1f09bf9d3cdcacc326" kindref="member">I2C_CheckEvent()</ref> function).</para></listitem></itemizedlist>
</para><para>Limitations:<itemizedlist>
<listitem><para>User may need to define his own events.</para></listitem><listitem><para>Same remark concerning the error management is applicable for this function if user decides to check only regular communication flags (and ignores error flags).</para></listitem></itemizedlist>
</para><para>3) Flag-based state monitoring: Using the function <ref refid="group___i2_c___private___functions_1ga15c95d0ed124f029621a2061b1677ee7" kindref="member">I2C_GetFlagStatus()</ref> which simply returns the status of one single flag (ie. I2C_FLAG_RXNE ...).<itemizedlist>
<listitem><para>When to use:<itemizedlist>
<listitem><para>This function could be used for specific applications or in debug phase.</para></listitem><listitem><para>It is suitable when only one flag checking is needed (most I2C events are monitored through multiple flags).</para></listitem></itemizedlist>
</para></listitem><listitem><para>Limitations:<itemizedlist>
<listitem><para>When calling this function, the Status register is accessed. Some flags are cleared when the status register is accessed. So checking the status of one Flag, may clear other ones.</para></listitem><listitem><para>Function may need to be called twice or more in order to monitor one single event.</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para><para>1) Basic state monitoring</para><para>This I2C driver provides three different ways for I2C state monitoring depending on the application requirements and constraints:</para><para>1) Basic state monitoring: Using <ref refid="group___i2_c___private___functions_1ga2d5701342f9d4c1f09bf9d3cdcacc326" kindref="member">I2C_CheckEvent()</ref> function: It compares the status registers (SR1 and SR2) content to a given event (can be the combination of one or more flags). It returns SUCCESS if the current status includes the given flags and returns ERROR if one or more flags are missing in the current status.<itemizedlist>
<listitem><para>When to use:<itemizedlist>
<listitem><para>This function is suitable for most applications as well as for startup activity since the events are fully described in the product reference manual (RM0008).</para></listitem><listitem><para>It is also suitable for users who need to define their own events.</para></listitem></itemizedlist>
</para></listitem><listitem><para>Limitations:<itemizedlist>
<listitem><para>If an error occurs (ie. error flags are set besides to the monitored flags), the <ref refid="group___i2_c___private___functions_1ga2d5701342f9d4c1f09bf9d3cdcacc326" kindref="member">I2C_CheckEvent()</ref> function may return SUCCESS despite the communication hold or corrupted real state. In this case, it is advised to use error interrupts to monitor the error events and handle them in the interrupt IRQ handler.</para><para><simplesect kind="note"><para>For error management, it is advised to use the following functions:<itemizedlist>
<listitem><para><ref refid="group___i2_c___private___functions_1ga58fed146a06cb81d2940604e460de047" kindref="member">I2C_ITConfig()</ref> to configure and enable the error interrupts (I2C_IT_ERR).</para></listitem><listitem><para>I2Cx_ER_IRQHandler() which is called when the error interrupt occurs. Where x is the peripheral instance (I2C1, I2C2 ...)</para></listitem><listitem><para><ref refid="group___i2_c___private___functions_1ga15c95d0ed124f029621a2061b1677ee7" kindref="member">I2C_GetFlagStatus()</ref> or <ref refid="group___i2_c___private___functions_1ga447771fbbd94a56f3570b9f430a069ba" kindref="member">I2C_GetITStatus()</ref> to be called into I2Cx_ER_IRQHandler() in order to determine which error occured.</para></listitem><listitem><para><ref refid="group___i2_c___private___functions_1ga9d4f8fe9f7232696114b5578b1223963" kindref="member">I2C_ClearFlag()</ref> or <ref refid="group___i2_c___private___functions_1ga110dda440fa200b5f77349df19b3e6bb" kindref="member">I2C_ClearITPendingBit()</ref> and/or <ref refid="group___i2_c___private___functions_1ga1289c908aeb882443aba323b459c638b" kindref="member">I2C_SoftwareResetCmd()</ref> and/or I2C_GenerateStop() in order to clear the error flag and source, and return to correct communication status.</para></listitem></itemizedlist>
</para></simplesect>
2) Advanced state monitoring: Using the function <ref refid="group___i2_c___private___functions_1ga29237aea9b5a3ead33167e1d027e9f1a" kindref="member">I2C_GetLastEvent()</ref> which returns the image of both status registers in a single word (uint32_t) (Status Register 2 value is shifted left by 16 bits and concatenated to Status Register 1).</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para><para>When to use:<itemizedlist>
<listitem><para>This function is suitable for the same applications above but it allows to overcome the mentioned limitation of <ref refid="group___i2_c___private___functions_1ga15c95d0ed124f029621a2061b1677ee7" kindref="member">I2C_GetFlagStatus()</ref> function. The returned value could be compared to events already defined in the library (<ref refid="stm32f10x__i2c_8h" kindref="compound">stm32f10x_i2c.h</ref>) or to custom values defined by user.</para></listitem><listitem><para>This function is suitable when multiple flags are monitored at the same time.</para></listitem><listitem><para>At the opposite of <ref refid="group___i2_c___private___functions_1ga2d5701342f9d4c1f09bf9d3cdcacc326" kindref="member">I2C_CheckEvent()</ref> function, this function allows user to choose when an event is accepted (when all events flags are set and no other flags are set or just when the needed flags are set like <ref refid="group___i2_c___private___functions_1ga2d5701342f9d4c1f09bf9d3cdcacc326" kindref="member">I2C_CheckEvent()</ref> function).</para></listitem></itemizedlist>
</para><para>Limitations:<itemizedlist>
<listitem><para>User may need to define his own events.</para></listitem><listitem><para>Same remark concerning the error management is applicable for this function if user decides to check only regular communication flags (and ignores error flags).</para></listitem></itemizedlist>
</para><para>3) Flag-based state monitoring: Using the function <ref refid="group___i2_c___private___functions_1ga15c95d0ed124f029621a2061b1677ee7" kindref="member">I2C_GetFlagStatus()</ref> which simply returns the status of one single flag (ie. I2C_FLAG_RXNE ...).<itemizedlist>
<listitem><para>When to use:<itemizedlist>
<listitem><para>This function could be used for specific applications or in debug phase.</para></listitem><listitem><para>It is suitable when only one flag checking is needed (most I2C events are monitored through multiple flags).</para></listitem></itemizedlist>
</para></listitem><listitem><para>Limitations:<itemizedlist>
<listitem><para>When calling this function, the Status register is accessed. Some flags are cleared when the status register is accessed. So checking the status of one Flag, may clear other ones.</para></listitem><listitem><para>Function may need to be called twice or more in order to monitor one single event.</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para><para>For detailed description of Events, please refer to section I2C_Events in <ref refid="stm32f10x__i2c_8h" kindref="compound">stm32f10x_i2c.h</ref> file.</para><para>1) Basic state monitoring Checks whether the last I2Cx Event is equal to the one passed as parameter. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I2C_EVENT</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the event to be checked. This parameter can be one of the following values: <itemizedlist>
<listitem><para>I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED : EV1 </para></listitem>
<listitem><para>I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED : EV1 </para></listitem>
<listitem><para>I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED : EV1 </para></listitem>
<listitem><para>I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED : EV1 </para></listitem>
<listitem><para>I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED : EV1 </para></listitem>
<listitem><para>I2C_EVENT_SLAVE_BYTE_RECEIVED : EV2 </para></listitem>
<listitem><para>(I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_DUALF) : EV2 </para></listitem>
<listitem><para>(I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_GENCALL) : EV2 </para></listitem>
<listitem><para>I2C_EVENT_SLAVE_BYTE_TRANSMITTED : EV3 </para></listitem>
<listitem><para>(I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_DUALF) : EV3 </para></listitem>
<listitem><para>(I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_GENCALL) : EV3 </para></listitem>
<listitem><para>I2C_EVENT_SLAVE_ACK_FAILURE : EV3_2 </para></listitem>
<listitem><para>I2C_EVENT_SLAVE_STOP_DETECTED : EV4 </para></listitem>
<listitem><para>I2C_EVENT_MASTER_MODE_SELECT : EV5 </para></listitem>
<listitem><para>I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED : EV6 </para></listitem>
<listitem><para>I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED : EV6 </para></listitem>
<listitem><para>I2C_EVENT_MASTER_BYTE_RECEIVED : EV7 </para></listitem>
<listitem><para>I2C_EVENT_MASTER_BYTE_TRANSMITTING : EV8 </para></listitem>
<listitem><para>I2C_EVENT_MASTER_BYTE_TRANSMITTED : EV8_2 </para></listitem>
<listitem><para>I2C_EVENT_MASTER_MODE_ADDRESS10 : EV9</para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>: For detailed description of Events, please refer to section I2C_Events in <ref refid="stm32f10x__i2c_8h" kindref="compound">stm32f10x_i2c.h</ref> file.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>An</parametername>
</parameternamelist>
<parameterdescription>
<para>ErrorStatus enumeration value:<itemizedlist>
<listitem><para>SUCCESS: Last event is equal to the I2C_EVENT</para></listitem><listitem><para>ERROR: Last event is different from the I2C_EVENT </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="651" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="1073" bodyend="1104"/>
        <references refid="group___exported__types_1gga8333b96c67f83cba354b3407fcbb6ee8a2fd6f336d08340583bd620a7f5694c90" compoundref="stm32f10x_8h" startline="524">ERROR</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___i2_c___events_1ga4b42e6936006195f89ff4f763d366970" compoundref="stm32f10x__i2c_8h" startline="482">IS_I2C_EVENT</references>
        <references refid="struct_i2_c___type_def_1ae1602cd1c9cad449523099c97138f991" compoundref="stm32f10x_8h" startline="1040">I2C_TypeDef::SR1</references>
        <references refid="struct_i2_c___type_def_1a95c7f729b10eb2acafe499d9c9a81a83" compoundref="stm32f10x_8h" startline="1042">I2C_TypeDef::SR2</references>
        <references refid="group___i2_c___private___defines_1ga2be62bf481cd44de9ab604efe5595ff6" compoundref="stm32f10x__i2c_8c" startline="120">FLAG_Mask</references>
        <references refid="group___exported__types_1gga8333b96c67f83cba354b3407fcbb6ee8ac7f69f7c9e5aea9b8f54cf02870e2bf8" compoundref="stm32f10x_8h" startline="524">SUCCESS</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga29237aea9b5a3ead33167e1d027e9f1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t I2C_GetLastEvent</definition>
        <argsstring>(I2C_TypeDef *I2Cx)</argsstring>
        <name>I2C_GetLastEvent</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <briefdescription>
<para>Returns the last I2Cx Event. </para>        </briefdescription>
        <detaileddescription>
<para>2) Advanced state monitoring</para><para>2) Advanced state monitoring <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>: For detailed description of Events, please refer to section I2C_Events in <ref refid="stm32f10x__i2c_8h" kindref="compound">stm32f10x_i2c.h</ref> file.</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>last event </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="657" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="1121" bodyend="1139"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="struct_i2_c___type_def_1ae1602cd1c9cad449523099c97138f991" compoundref="stm32f10x_8h" startline="1040">I2C_TypeDef::SR1</references>
        <references refid="struct_i2_c___type_def_1a95c7f729b10eb2acafe499d9c9a81a83" compoundref="stm32f10x_8h" startline="1042">I2C_TypeDef::SR2</references>
        <references refid="group___i2_c___private___defines_1ga2be62bf481cd44de9ab604efe5595ff6" compoundref="stm32f10x__i2c_8c" startline="120">FLAG_Mask</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga15c95d0ed124f029621a2061b1677ee7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref></type>
        <definition>FlagStatus I2C_GetFlagStatus</definition>
        <argsstring>(I2C_TypeDef *I2Cx, uint32_t I2C_FLAG)</argsstring>
        <name>I2C_GetFlagStatus</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>I2C_FLAG</declname>
        </param>
        <briefdescription>
<para>Checks whether the specified I2C flag is set or not. </para>        </briefdescription>
        <detaileddescription>
<para>3) Flag-based state monitoring</para><para>3) Flag-based state monitoring <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I2C_FLAG</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the flag to check. This parameter can be one of the following values: <itemizedlist>
<listitem><para>I2C_FLAG_DUALF: Dual flag (Slave mode) </para></listitem>
<listitem><para>I2C_FLAG_SMBHOST: SMBus host header (Slave mode) </para></listitem>
<listitem><para>I2C_FLAG_SMBDEFAULT: SMBus default header (Slave mode) </para></listitem>
<listitem><para>I2C_FLAG_GENCALL: General call header flag (Slave mode) </para></listitem>
<listitem><para>I2C_FLAG_TRA: Transmitter/Receiver flag </para></listitem>
<listitem><para>I2C_FLAG_BUSY: Bus busy flag </para></listitem>
<listitem><para>I2C_FLAG_MSL: Master/Slave flag </para></listitem>
<listitem><para>I2C_FLAG_SMBALERT: SMBus Alert flag </para></listitem>
<listitem><para>I2C_FLAG_TIMEOUT: Timeout or Tlow error flag </para></listitem>
<listitem><para>I2C_FLAG_PECERR: PEC error in reception flag </para></listitem>
<listitem><para>I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode) </para></listitem>
<listitem><para>I2C_FLAG_AF: Acknowledge failure flag </para></listitem>
<listitem><para>I2C_FLAG_ARLO: Arbitration lost flag (Master mode) </para></listitem>
<listitem><para>I2C_FLAG_BERR: Bus error flag </para></listitem>
<listitem><para>I2C_FLAG_TXE: Data register empty flag (Transmitter) </para></listitem>
<listitem><para>I2C_FLAG_RXNE: Data register not empty (Receiver) flag </para></listitem>
<listitem><para>I2C_FLAG_STOPF: Stop detection flag (Slave mode) </para></listitem>
<listitem><para>I2C_FLAG_ADD10: 10-bit header sent flag (Master mode) </para></listitem>
<listitem><para>I2C_FLAG_BTF: Byte transfer finished flag </para></listitem>
<listitem><para>I2C_FLAG_ADDR: Address sent flag (Master mode) &quot;ADSL&quot; Address matched flag (Slave mode)&quot;ENDA&quot; </para></listitem>
<listitem><para>I2C_FLAG_SB: Start bit flag (Master mode) </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of I2C_FLAG (SET or RESET). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="663" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="1176" bodyend="1220"/>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
        <references refid="core__cm0_8h_1aec43007d9998a0a0e01faede4133d6be" compoundref="core__cm0_8h" startline="221">__IO</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___i2_c__flags__definition_1ga1a2c2a7c50cd8e33e532918106b4f6ce" compoundref="stm32f10x__i2c_8h" startline="293">IS_I2C_GET_FLAG</references>
        <references refid="group___i2_c___private___defines_1ga2be62bf481cd44de9ab604efe5595ff6" compoundref="stm32f10x__i2c_8c" startline="120">FLAG_Mask</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" compoundref="stm32f10x_8h" startline="519">SET</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga9d4f8fe9f7232696114b5578b1223963" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_ClearFlag</definition>
        <argsstring>(I2C_TypeDef *I2Cx, uint32_t I2C_FLAG)</argsstring>
        <name>I2C_ClearFlag</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>I2C_FLAG</declname>
        </param>
        <briefdescription>
<para>Clears the I2Cx&apos;s pending flags. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I2C_FLAG</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the flag to clear. This parameter can be any combination of the following values: <itemizedlist>
<listitem><para>I2C_FLAG_SMBALERT: SMBus Alert flag </para></listitem>
<listitem><para>I2C_FLAG_TIMEOUT: Timeout or Tlow error flag </para></listitem>
<listitem><para>I2C_FLAG_PECERR: PEC error in reception flag </para></listitem>
<listitem><para>I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode) </para></listitem>
<listitem><para>I2C_FLAG_AF: Acknowledge failure flag </para></listitem>
<listitem><para>I2C_FLAG_ARLO: Arbitration lost flag (Master mode) </para></listitem>
<listitem><para>I2C_FLAG_BERR: Bus error flag</para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>STOPF (STOP detection) is cleared by software sequence: a read operation to I2C_SR1 register (<ref refid="group___i2_c___private___functions_1ga15c95d0ed124f029621a2061b1677ee7" kindref="member">I2C_GetFlagStatus()</ref>) followed by a write operation to I2C_CR1 register (<ref refid="group___i2_c___private___functions_1ga7e1323c9133c2cb424dfb5b10b7d2f0b" kindref="member">I2C_Cmd()</ref> to re-enable the I2C peripheral).</para></listitem><listitem><para>ADD10 (10-bit header sent) is cleared by software sequence: a read operation to I2C_SR1 (<ref refid="group___i2_c___private___functions_1ga15c95d0ed124f029621a2061b1677ee7" kindref="member">I2C_GetFlagStatus()</ref>) followed by writing the second byte of the address in DR register.</para></listitem><listitem><para>BTF (Byte Transfer Finished) is cleared by software sequence: a read operation to I2C_SR1 register (<ref refid="group___i2_c___private___functions_1ga15c95d0ed124f029621a2061b1677ee7" kindref="member">I2C_GetFlagStatus()</ref>) followed by a read/write to I2C_DR register (<ref refid="group___i2_c___private___functions_1ga7bd9e70b8eafde0dd5eb42b0d95fe1a9" kindref="member">I2C_SendData()</ref>).</para></listitem><listitem><para>ADDR (Address sent) is cleared by software sequence: a read operation to I2C_SR1 register (<ref refid="group___i2_c___private___functions_1ga15c95d0ed124f029621a2061b1677ee7" kindref="member">I2C_GetFlagStatus()</ref>) followed by a read operation to I2C_SR2 register ((void)(I2Cx-&gt;SR2)).</para></listitem><listitem><para>SB (Start Bit) is cleared software sequence: a read operation to I2C_SR1 register (<ref refid="group___i2_c___private___functions_1ga15c95d0ed124f029621a2061b1677ee7" kindref="member">I2C_GetFlagStatus()</ref>) followed by a write operation to I2C_DR register (<ref refid="group___i2_c___private___functions_1ga7bd9e70b8eafde0dd5eb42b0d95fe1a9" kindref="member">I2C_SendData()</ref>). </para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="669" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="1255" bodyend="1265"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___i2_c__flags__definition_1ga66c8180841350c47627c323acfe42ee9" compoundref="stm32f10x__i2c_8h" startline="291">IS_I2C_CLEAR_FLAG</references>
        <references refid="group___i2_c___private___defines_1ga2be62bf481cd44de9ab604efe5595ff6" compoundref="stm32f10x__i2c_8c" startline="120">FLAG_Mask</references>
        <references refid="struct_i2_c___type_def_1ae1602cd1c9cad449523099c97138f991" compoundref="stm32f10x_8h" startline="1040">I2C_TypeDef::SR1</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga447771fbbd94a56f3570b9f430a069ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref></type>
        <definition>ITStatus I2C_GetITStatus</definition>
        <argsstring>(I2C_TypeDef *I2Cx, uint32_t I2C_IT)</argsstring>
        <name>I2C_GetITStatus</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>I2C_IT</declname>
        </param>
        <briefdescription>
<para>Checks whether the specified I2C interrupt has occurred or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I2C_IT</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the interrupt source to check. This parameter can be one of the following values: <itemizedlist>
<listitem><para>I2C_IT_SMBALERT: SMBus Alert flag </para></listitem>
<listitem><para>I2C_IT_TIMEOUT: Timeout or Tlow error flag </para></listitem>
<listitem><para>I2C_IT_PECERR: PEC error in reception flag </para></listitem>
<listitem><para>I2C_IT_OVR: Overrun/Underrun flag (Slave mode) </para></listitem>
<listitem><para>I2C_IT_AF: Acknowledge failure flag </para></listitem>
<listitem><para>I2C_IT_ARLO: Arbitration lost flag (Master mode) </para></listitem>
<listitem><para>I2C_IT_BERR: Bus error flag </para></listitem>
<listitem><para>I2C_IT_TXE: Data register empty flag (Transmitter) </para></listitem>
<listitem><para>I2C_IT_RXNE: Data register not empty (Receiver) flag </para></listitem>
<listitem><para>I2C_IT_STOPF: Stop detection flag (Slave mode) </para></listitem>
<listitem><para>I2C_IT_ADD10: 10-bit header sent flag (Master mode) </para></listitem>
<listitem><para>I2C_IT_BTF: Byte transfer finished flag </para></listitem>
<listitem><para>I2C_IT_ADDR: Address sent flag (Master mode) &quot;ADSL&quot; Address matched flag (Slave mode)&quot;ENDAD&quot; </para></listitem>
<listitem><para>I2C_IT_SB: Start bit flag (Master mode) </para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>The</parametername>
</parameternamelist>
<parameterdescription>
<para>new state of I2C_IT (SET or RESET). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="670" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="1289" bodyend="1317"/>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffa589b7d94a3d91d145720e2fed0eb3a05" compoundref="stm32f10x_8h" startline="519">RESET</references>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___i2_c__interrupts__definition_1gab3d113f3d6b6e6f7896c5d7a8d8c2d01" compoundref="stm32f10x__i2c_8h" startline="245">IS_I2C_GET_IT</references>
        <references refid="group___i2_c___private___defines_1gab99e12994e073c2a681a6cf68492b3e2" compoundref="stm32f10x__i2c_8c" startline="123">ITEN_Mask</references>
        <references refid="struct_i2_c___type_def_1ac8bff45acc455489620d50e697a24c9d" compoundref="stm32f10x_8h" startline="1032">I2C_TypeDef::CR2</references>
        <references refid="group___i2_c___private___defines_1ga2be62bf481cd44de9ab604efe5595ff6" compoundref="stm32f10x__i2c_8c" startline="120">FLAG_Mask</references>
        <references refid="struct_i2_c___type_def_1ae1602cd1c9cad449523099c97138f991" compoundref="stm32f10x_8h" startline="1040">I2C_TypeDef::SR1</references>
        <references refid="group___exported__types_1gga89136caac2e14c55151f527ac02daaffab44c8101cc294c074709ec1b14211792" compoundref="stm32f10x_8h" startline="519">SET</references>
      </memberdef>
      <memberdef kind="function" id="group___i2_c___exported___functions_1ga110dda440fa200b5f77349df19b3e6bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void I2C_ClearITPendingBit</definition>
        <argsstring>(I2C_TypeDef *I2Cx, uint32_t I2C_IT)</argsstring>
        <name>I2C_ClearITPendingBit</name>
        <param>
          <type><ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref> *</type>
          <declname>I2Cx</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>I2C_IT</declname>
        </param>
        <briefdescription>
<para>Clears the I2Cx�s interrupt pending bits. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I2Cx</parametername>
</parameternamelist>
<parameterdescription>
<para>where x can be 1 or 2 to select the I2C peripheral. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I2C_IT</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the interrupt pending bit to clear. This parameter can be any combination of the following values: <itemizedlist>
<listitem><para>I2C_IT_SMBALERT: SMBus Alert interrupt </para></listitem>
<listitem><para>I2C_IT_TIMEOUT: Timeout or Tlow error interrupt </para></listitem>
<listitem><para>I2C_IT_PECERR: PEC error in reception interrupt </para></listitem>
<listitem><para>I2C_IT_OVR: Overrun/Underrun interrupt (Slave mode) </para></listitem>
<listitem><para>I2C_IT_AF: Acknowledge failure interrupt </para></listitem>
<listitem><para>I2C_IT_ARLO: Arbitration lost interrupt (Master mode) </para></listitem>
<listitem><para>I2C_IT_BERR: Bus error interrupt</para></listitem>
</itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><itemizedlist>
<listitem><para>STOPF (STOP detection) is cleared by software sequence: a read operation to I2C_SR1 register (<ref refid="group___i2_c___private___functions_1ga447771fbbd94a56f3570b9f430a069ba" kindref="member">I2C_GetITStatus()</ref>) followed by a write operation to I2C_CR1 register (<ref refid="group___i2_c___private___functions_1ga7e1323c9133c2cb424dfb5b10b7d2f0b" kindref="member">I2C_Cmd()</ref> to re-enable the I2C peripheral).</para></listitem><listitem><para>ADD10 (10-bit header sent) is cleared by software sequence: a read operation to I2C_SR1 (<ref refid="group___i2_c___private___functions_1ga447771fbbd94a56f3570b9f430a069ba" kindref="member">I2C_GetITStatus()</ref>) followed by writing the second byte of the address in I2C_DR register.</para></listitem><listitem><para>BTF (Byte Transfer Finished) is cleared by software sequence: a read operation to I2C_SR1 register (<ref refid="group___i2_c___private___functions_1ga447771fbbd94a56f3570b9f430a069ba" kindref="member">I2C_GetITStatus()</ref>) followed by a read/write to I2C_DR register (<ref refid="group___i2_c___private___functions_1ga7bd9e70b8eafde0dd5eb42b0d95fe1a9" kindref="member">I2C_SendData()</ref>).</para></listitem><listitem><para>ADDR (Address sent) is cleared by software sequence: a read operation to I2C_SR1 register (<ref refid="group___i2_c___private___functions_1ga447771fbbd94a56f3570b9f430a069ba" kindref="member">I2C_GetITStatus()</ref>) followed by a read operation to I2C_SR2 register ((void)(I2Cx-&gt;SR2)).</para></listitem><listitem><para>SB (Start Bit) is cleared by software sequence: a read operation to I2C_SR1 register (<ref refid="group___i2_c___private___functions_1ga447771fbbd94a56f3570b9f430a069ba" kindref="member">I2C_GetITStatus()</ref>) followed by a write operation to I2C_DR register (<ref refid="group___i2_c___private___functions_1ga7bd9e70b8eafde0dd5eb42b0d95fe1a9" kindref="member">I2C_SendData()</ref>). </para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>None</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h" line="671" column="1" bodyfile="C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_i2c.c" bodystart="1350" bodyend="1360"/>
        <references refid="stm32f10x__conf_8h_1a631dea7b230e600555f979c62af1de21" compoundref="stm32f10x__conf_8h" startline="72">assert_param</references>
        <references refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" compoundref="stm32f10x__i2c_8h" startline="86">IS_I2C_ALL_PERIPH</references>
        <references refid="group___i2_c__interrupts__definition_1ga368c05fc9aadd7bb4d23280791b5a751" compoundref="stm32f10x__i2c_8h" startline="243">IS_I2C_CLEAR_IT</references>
        <references refid="group___i2_c___private___defines_1ga2be62bf481cd44de9ab604efe5595ff6" compoundref="stm32f10x__i2c_8c" startline="120">FLAG_Mask</references>
        <references refid="struct_i2_c___type_def_1ae1602cd1c9cad449523099c97138f991" compoundref="stm32f10x_8h" startline="1040">I2C_TypeDef::SR1</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file contains all the functions prototypes for the I2C firmware library. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>MCD Application Team </para></simplesect>
<simplesect kind="version"><para>V3.5.0 </para></simplesect>
<simplesect kind="date"><para>11-March-2011 </para></simplesect>
<simplesect kind="attention"><para></para></simplesect>
THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.</para><para><heading level="2"><center><copy/> COPYRIGHT 2011 STMicroelectronics</center></heading>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="23"><highlight class="comment">/*<sp/>Define<sp/>to<sp/>prevent<sp/>recursive<sp/>inclusion<sp/>-------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__STM32F10x_I2C_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__STM32F10x_I2C_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[ILG]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(<sp/>__GNUC__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wpadded&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Includes<sp/>------------------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stm32f10x_8h" kindref="compound">stm32f10x.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="struct_i2_c___init_type_def" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">{</highlight></codeline>
<codeline lineno="58" refid="struct_i2_c___init_type_def_1a737c289f4515ae4cb642db0412762169" refkind="member"><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="struct_i2_c___init_type_def_1a737c289f4515ae4cb642db0412762169" kindref="member">I2C_ClockSpeed</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61" refid="struct_i2_c___init_type_def_1ad5cf353c5b6968b3610b70ca593cec52" refkind="member"><highlight class="normal"><sp/><sp/>uint16_t<sp/><ref refid="struct_i2_c___init_type_def_1ad5cf353c5b6968b3610b70ca593cec52" kindref="member">I2C_Mode</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="64" refid="struct_i2_c___init_type_def_1aff23b28652359513dfd268dee54c3279" refkind="member"><highlight class="normal"><sp/><sp/>uint16_t<sp/><ref refid="struct_i2_c___init_type_def_1aff23b28652359513dfd268dee54c3279" kindref="member">I2C_DutyCycle</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67" refid="struct_i2_c___init_type_def_1a08543cb71b4b2a89ad81a2cefff12b53" refkind="member"><highlight class="normal"><sp/><sp/>uint16_t<sp/><ref refid="struct_i2_c___init_type_def_1a08543cb71b4b2a89ad81a2cefff12b53" kindref="member">I2C_OwnAddress1</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="70" refid="struct_i2_c___init_type_def_1a7bcae26f098e897832e5e42b055f8c98" refkind="member"><highlight class="normal"><sp/><sp/>uint16_t<sp/><ref refid="struct_i2_c___init_type_def_1a7bcae26f098e897832e5e42b055f8c98" kindref="member">I2C_Ack</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73" refid="struct_i2_c___init_type_def_1a300e847972f50b0d25c4f13be5d93d79" refkind="member"><highlight class="normal"><sp/><sp/>uint16_t<sp/><ref refid="struct_i2_c___init_type_def_1a300e847972f50b0d25c4f13be5d93d79" kindref="member">I2C_AcknowledgedAddress</ref>;<sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal">}<ref refid="struct_i2_c___init_type_def" kindref="compound">I2C_InitTypeDef</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="group___i2_c___exported___constants_1ga2e57489a40603d6ab7ff115b94eeb303" refkind="member"><highlight class="preprocessor">#define<sp/>IS_I2C_ALL_PERIPH(PERIPH)<sp/>(((PERIPH)<sp/>==<sp/>I2C1)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((PERIPH)<sp/>==<sp/>I2C2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="group___i2_c__mode_1ga8bc3b0555ca31b6f8423bc2ada45d1ac" refkind="member"><highlight class="preprocessor">#define<sp/>I2C_Mode_I2C<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0x0000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="group___i2_c__mode_1gaf0cf66bc1f4986ba8a9925da924e06da" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_Mode_SMBusDevice<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0x0002)<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="group___i2_c__mode_1gacfd37619c8d91dea5dec2921840acede" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_Mode_SMBusHost<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0x000A)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="group___i2_c__mode_1ga58464e1fe94a79bab721137a544baf79" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_I2C_MODE(MODE)<sp/>(((MODE)<sp/>==<sp/>I2C_Mode_I2C)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="96"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((MODE)<sp/>==<sp/>I2C_Mode_SMBusDevice)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((MODE)<sp/>==<sp/>I2C_Mode_SMBusHost))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="group___i2_c__duty__cycle__in__fast__mode_1ga2b4ff186808a8095fc2d1b8193f30ce1" refkind="member"><highlight class="preprocessor">#define<sp/>I2C_DutyCycle_16_9<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0x4000)<sp/></highlight></codeline>
<codeline lineno="107" refid="group___i2_c__duty__cycle__in__fast__mode_1gafe0af31970aceef0fa8df6a10bef35db" refkind="member"><highlight class="preprocessor">#define<sp/>I2C_DutyCycle_2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0xBFFF)<sp/></highlight></codeline>
<codeline lineno="108" refid="group___i2_c__duty__cycle__in__fast__mode_1gae9b3276d9b6ec872ee4fafa2b2fafb83" refkind="member"><highlight class="preprocessor">#define<sp/>IS_I2C_DUTY_CYCLE(CYCLE)<sp/>(((CYCLE)<sp/>==<sp/>I2C_DutyCycle_16_9)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((CYCLE)<sp/>==<sp/>I2C_DutyCycle_2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="group___i2_c__acknowledgement_1ga616466f8ef5a47237cdbf7ac578ec507" refkind="member"><highlight class="preprocessor">#define<sp/>I2C_Ack_Enable<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0x0400)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="group___i2_c__acknowledgement_1gadb5f47c052ac6bae1aa58c724e339e36" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_Ack_Disable<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0x0000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="group___i2_c__acknowledgement_1ga6401bedc842e784a2bb78b3aa21af19d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_I2C_ACK_STATE(STATE)<sp/>(((STATE)<sp/>==<sp/>I2C_Ack_Enable)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((STATE)<sp/>==<sp/>I2C_Ack_Disable))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="group___i2_c__transfer__direction_1ga9895ee2d7d8cc8ba4daafafa1c3ce1ac" refkind="member"><highlight class="preprocessor">#define<sp/><sp/>I2C_Direction_Transmitter<sp/><sp/><sp/><sp/><sp/><sp/>((uint8_t)0x00)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="group___i2_c__transfer__direction_1gafe3b9b98552980ca56c8e21a90040fa0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>I2C_Direction_Receiver<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint8_t)0x01)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="group___i2_c__transfer__direction_1ga33368efe652bc25b4f4b74f02ce0657e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_I2C_DIRECTION(DIRECTION)<sp/>(((DIRECTION)<sp/>==<sp/>I2C_Direction_Transmitter)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="133"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((DIRECTION)<sp/>==<sp/>I2C_Direction_Receiver))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="group___i2_c__acknowledged__address_1ga5e5ad2148f9da14457c7b59357acee97" refkind="member"><highlight class="preprocessor">#define<sp/>I2C_AcknowledgedAddress_7bit<sp/><sp/><sp/><sp/>((uint16_t)0x4000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="group___i2_c__acknowledged__address_1gaf0bb8f71795f046ad9f6c1fc7fe0fc53" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_AcknowledgedAddress_10bit<sp/><sp/><sp/>((uint16_t)0xC000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="group___i2_c__acknowledged__address_1ga26a3af0a468f7226ed72fde27528c0ba" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_I2C_ACKNOWLEDGE_ADDRESS(ADDRESS)<sp/>(((ADDRESS)<sp/>==<sp/>I2C_AcknowledgedAddress_7bit)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((ADDRESS)<sp/>==<sp/>I2C_AcknowledgedAddress_10bit))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="group___i2_c__registers_1ga4b9e7934e490c3540e50cf2f1d0a7688" refkind="member"><highlight class="preprocessor">#define<sp/>I2C_Register_CR1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint8_t)0x00)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="group___i2_c__registers_1gaf278337dd03b6ae56eac3f335381eca3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_Register_CR2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint8_t)0x04)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="group___i2_c__registers_1ga706317a00c0d450e95c00efd2afe1836" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_Register_OAR1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint8_t)0x08)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="group___i2_c__registers_1gaffdc1902493456dea95216a39fc54e2b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_Register_OAR2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint8_t)0x0C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="group___i2_c__registers_1gaea281721e7a8461d90bf59898487c096" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_Register_DR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint8_t)0x10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="group___i2_c__registers_1gaf3bc5f4dc87513e2eceba4f503c14d6a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_Register_SR1<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint8_t)0x14)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="group___i2_c__registers_1ga0b5f7949e449223ec97e0169d79d007d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_Register_SR2<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint8_t)0x18)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161" refid="group___i2_c__registers_1ga7a0de765650408f3915b54141f052c5b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_Register_CCR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint8_t)0x1C)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="group___i2_c__registers_1ga488c25a0a9f2c572af28768589fcbab2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_Register_TRISE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint8_t)0x20)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="group___i2_c__registers_1ga37206b258f7930065c308ec7d35f243e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_I2C_REGISTER(REGISTER)<sp/>(((REGISTER)<sp/>==<sp/>I2C_Register_CR1)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="164"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((REGISTER)<sp/>==<sp/>I2C_Register_CR2)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((REGISTER)<sp/>==<sp/>I2C_Register_OAR1)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((REGISTER)<sp/>==<sp/>I2C_Register_OAR2)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((REGISTER)<sp/>==<sp/>I2C_Register_DR)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="168"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((REGISTER)<sp/>==<sp/>I2C_Register_SR1)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((REGISTER)<sp/>==<sp/>I2C_Register_SR2)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((REGISTER)<sp/>==<sp/>I2C_Register_CCR)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((REGISTER)<sp/>==<sp/>I2C_Register_TRISE))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="group___i2_c___s_m_bus__alert__pin__level_1ga6f923166107afb8aad1d7d1a87048d6e" refkind="member"><highlight class="preprocessor">#define<sp/>I2C_SMBusAlert_Low<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0x2000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181" refid="group___i2_c___s_m_bus__alert__pin__level_1gac3ab64f43ef90f0f83f9c88981aaa862" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_SMBusAlert_High<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0xDFFF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="group___i2_c___s_m_bus__alert__pin__level_1ga61b0c91563eb4bd598329241fe7d3bb4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_I2C_SMBUS_ALERT(ALERT)<sp/>(((ALERT)<sp/>==<sp/>I2C_SMBusAlert_Low)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="183"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((ALERT)<sp/>==<sp/>I2C_SMBusAlert_High))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="group___i2_c___p_e_c__position_1ga74d0996efe6e278fb28d053ba78fccc5" refkind="member"><highlight class="preprocessor">#define<sp/>I2C_PECPosition_Next<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0x0800)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="group___i2_c___p_e_c__position_1ga8a393364dd651f88bcaebac71c1c52c7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_PECPosition_Current<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0xF7FF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="group___i2_c___p_e_c__position_1gac8611a62b06256b1b3c60d4859a016ef" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_I2C_PEC_POSITION(POSITION)<sp/>(((POSITION)<sp/>==<sp/>I2C_PECPosition_Next)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((POSITION)<sp/>==<sp/>I2C_PECPosition_Current))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="group___i2_c___n_c_a_k__position_1gacb512a4bd4841a763b6ec51606687fca" refkind="member"><highlight class="preprocessor">#define<sp/>I2C_NACKPosition_Next<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0x0800)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="group___i2_c___n_c_a_k__position_1ga8d91c1e62730a9d927ca8e9ec4f7ef8f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_NACKPosition_Current<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0xF7FF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="group___i2_c___n_c_a_k__position_1ga631b4b1674a12aa2b3b27360983029e3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_I2C_NACK_POSITION(POSITION)<sp/><sp/>(((POSITION)<sp/>==<sp/>I2C_NACKPosition_Next)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((POSITION)<sp/>==<sp/>I2C_NACKPosition_Current))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="group___i2_c__interrupts__definition_1gad3ff3f405b882aa4d2f91310aa1cc0df" refkind="member"><highlight class="preprocessor">#define<sp/>I2C_IT_BUF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0x0400)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="group___i2_c__interrupts__definition_1gadd59efa313e1598a084a1e5ec3905b02" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_IT_EVT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0x0200)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="group___i2_c__interrupts__definition_1gadba3667b439cbf4ba1e6e9aec961ab03" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_IT_ERR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint16_t)0x0100)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="group___i2_c__interrupts__definition_1gae2695a081871336881f9105d6c847c4f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_I2C_CONFIG_IT(IT)<sp/>((((IT)<sp/>&amp;<sp/>(uint16_t)0xF8FF)<sp/>==<sp/>0x00)<sp/>&amp;&amp;<sp/>((IT)<sp/>!=<sp/>0x00))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="group___i2_c__interrupts__definition_1gab6049d4dd856a085127752e01ebb8120" refkind="member"><highlight class="preprocessor">#define<sp/>I2C_IT_SMBALERT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x01008000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229" refid="group___i2_c__interrupts__definition_1ga45ce34b163b456a5fb3833f1264d93b4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_IT_TIMEOUT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x01004000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="group___i2_c__interrupts__definition_1ga23069e7787c4f052f34887c02bc44100" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_IT_PECERR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x01001000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="group___i2_c__interrupts__definition_1ga8e1e9e73d9057ccfce3493b5cf672833" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_IT_OVR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x01000800)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="group___i2_c__interrupts__definition_1gabfb721ac5783336e6d2334f635e2e91b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_IT_AF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x01000400)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233" refid="group___i2_c__interrupts__definition_1ga2439154bee2a45a4147921cec18177d1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_IT_ARLO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x01000200)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="group___i2_c__interrupts__definition_1gad9aec016c98df6dbb95a5c10b180c202" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_IT_BERR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x01000100)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="group___i2_c__interrupts__definition_1gacb41229da2cd9460c3272cfb13aa29d3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_IT_TXE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x06000080)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="group___i2_c__interrupts__definition_1gac95135720c0de2fd01c44c3f7b6c81d4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_IT_RXNE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x06000040)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="group___i2_c__interrupts__definition_1ga741e098abb485b327c7668518117e415" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_IT_STOPF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x02000010)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="group___i2_c__interrupts__definition_1ga8a9bc5a1dee3bbd41347b19cf117c0f3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_IT_ADD10<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x02000008)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239" refid="group___i2_c__interrupts__definition_1gaef469fef934f655614b7cffd00b87ceb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_IT_BTF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x02000004)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="group___i2_c__interrupts__definition_1gaf68f1eda33dcb13626597f477d044025" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_IT_ADDR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x02000002)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241" refid="group___i2_c__interrupts__definition_1gaec2fb9bbd0e1b128b4450b2a7b312896" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_IT_SB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x02000001)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243" refid="group___i2_c__interrupts__definition_1ga368c05fc9aadd7bb4d23280791b5a751" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_I2C_CLEAR_IT(IT)<sp/>((((IT)<sp/>&amp;<sp/>(uint16_t)0x20FF)<sp/>==<sp/>0x00)<sp/>&amp;&amp;<sp/>((IT)<sp/>!=<sp/>(uint16_t)0x00))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245" refid="group___i2_c__interrupts__definition_1gab3d113f3d6b6e6f7896c5d7a8d8c2d01" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_I2C_GET_IT(IT)<sp/>(((IT)<sp/>==<sp/>I2C_IT_SMBALERT)<sp/>||<sp/>((IT)<sp/>==<sp/>I2C_IT_TIMEOUT)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="246"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((IT)<sp/>==<sp/>I2C_IT_PECERR)<sp/>||<sp/>((IT)<sp/>==<sp/>I2C_IT_OVR)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="247"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((IT)<sp/>==<sp/>I2C_IT_AF)<sp/>||<sp/>((IT)<sp/>==<sp/>I2C_IT_ARLO)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="248"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((IT)<sp/>==<sp/>I2C_IT_BERR)<sp/>||<sp/>((IT)<sp/>==<sp/>I2C_IT_TXE)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="249"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((IT)<sp/>==<sp/>I2C_IT_RXNE)<sp/>||<sp/>((IT)<sp/>==<sp/>I2C_IT_STOPF)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="250"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((IT)<sp/>==<sp/>I2C_IT_ADD10)<sp/>||<sp/>((IT)<sp/>==<sp/>I2C_IT_BTF)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((IT)<sp/>==<sp/>I2C_IT_ADDR)<sp/>||<sp/>((IT)<sp/>==<sp/>I2C_IT_SB))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="group___i2_c__flags__definition_1ga3755b783aa73568659478c2e2e45e27f" refkind="member"><highlight class="preprocessor">#define<sp/>I2C_FLAG_DUALF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00800000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="group___i2_c__flags__definition_1gaf15403a1852f39aaadbb8942ba98d97e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_FLAG_SMBHOST<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00400000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="group___i2_c__flags__definition_1ga371fb29861d1cd41736253e804c67ad5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_FLAG_SMBDEFAULT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00200000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="group___i2_c__flags__definition_1gab3a93b6840ad406c2fc09e0e96c59b88" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_FLAG_GENCALL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00100000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268" refid="group___i2_c__flags__definition_1ga0359a5f960670d51cb17e659d32498ea" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_FLAG_TRA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00040000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269" refid="group___i2_c__flags__definition_1ga50f69f043d99600221076100823b6ff3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_FLAG_BUSY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00020000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="group___i2_c__flags__definition_1gae8e6a404cbfd70420d278d520304f368" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_FLAG_MSL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00010000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="276" refid="group___i2_c__flags__definition_1ga4e1d7cd1574d03ba501c27483300c1be" refkind="member"><highlight class="preprocessor">#define<sp/>I2C_FLAG_SMBALERT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x10008000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="group___i2_c__flags__definition_1ga89c8d5d8ccc77a8619fafe9b39d1cc74" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_FLAG_TIMEOUT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x10004000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="group___i2_c__flags__definition_1ga6c7addb6413f165f42bcc87506ea8467" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_FLAG_PECERR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x10001000)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279" refid="group___i2_c__flags__definition_1gab579673c8ac920db199aa7f18e547fb3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_FLAG_OVR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x10000800)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="group___i2_c__flags__definition_1ga2f89dbba9b964e6ade1480705e7a97d4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_FLAG_AF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x10000400)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="group___i2_c__flags__definition_1gae1e67936f4780e42b8bbe04ac9c20a7b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_FLAG_ARLO<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x10000200)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282" refid="group___i2_c__flags__definition_1ga0454176b6ddd5c402abc3ef5953a21ad" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_FLAG_BERR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x10000100)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="group___i2_c__flags__definition_1gaeda14a3e9d02ff20a0d001bba9328f3d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_FLAG_TXE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x10000080)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="group___i2_c__flags__definition_1gad53c5b70a186f699f187c7a641ab0dac" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_FLAG_RXNE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x10000040)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="group___i2_c__flags__definition_1gacc7d993963e199a6ddba391dab8da896" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_FLAG_STOPF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x10000010)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="group___i2_c__flags__definition_1ga316c78cbf34b74da96d69f702a0d1444" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_FLAG_ADD10<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x10000008)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287" refid="group___i2_c__flags__definition_1ga4dc3d44342007a5cd21c3baa0d938606" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_FLAG_BTF<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x10000004)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288" refid="group___i2_c__flags__definition_1ga5472d1196e934e0cc471aba8f66af416" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_FLAG_ADDR<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x10000002)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289" refid="group___i2_c__flags__definition_1gae009ab84be03fcc438625b1c39376ad4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_FLAG_SB<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x10000001)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291" refid="group___i2_c__flags__definition_1ga66c8180841350c47627c323acfe42ee9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_I2C_CLEAR_FLAG(FLAG)<sp/>((((FLAG)<sp/>&amp;<sp/>(uint16_t)0x20FF)<sp/>==<sp/>0x00)<sp/>&amp;&amp;<sp/>((FLAG)<sp/>!=<sp/>(uint16_t)0x00))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="group___i2_c__flags__definition_1ga1a2c2a7c50cd8e33e532918106b4f6ce" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_I2C_GET_FLAG(FLAG)<sp/>(((FLAG)<sp/>==<sp/>I2C_FLAG_DUALF)<sp/>||<sp/>((FLAG)<sp/>==<sp/>I2C_FLAG_SMBHOST)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="294"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((FLAG)<sp/>==<sp/>I2C_FLAG_SMBDEFAULT)<sp/>||<sp/>((FLAG)<sp/>==<sp/>I2C_FLAG_GENCALL)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="295"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((FLAG)<sp/>==<sp/>I2C_FLAG_TRA)<sp/>||<sp/>((FLAG)<sp/>==<sp/>I2C_FLAG_BUSY)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="296"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((FLAG)<sp/>==<sp/>I2C_FLAG_MSL)<sp/>||<sp/>((FLAG)<sp/>==<sp/>I2C_FLAG_SMBALERT)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="297"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((FLAG)<sp/>==<sp/>I2C_FLAG_TIMEOUT)<sp/>||<sp/>((FLAG)<sp/>==<sp/>I2C_FLAG_PECERR)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="298"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((FLAG)<sp/>==<sp/>I2C_FLAG_OVR)<sp/>||<sp/>((FLAG)<sp/>==<sp/>I2C_FLAG_AF)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="299"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((FLAG)<sp/>==<sp/>I2C_FLAG_ARLO)<sp/>||<sp/>((FLAG)<sp/>==<sp/>I2C_FLAG_BERR)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="300"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((FLAG)<sp/>==<sp/>I2C_FLAG_TXE)<sp/>||<sp/>((FLAG)<sp/>==<sp/>I2C_FLAG_RXNE)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="301"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((FLAG)<sp/>==<sp/>I2C_FLAG_STOPF)<sp/>||<sp/>((FLAG)<sp/>==<sp/>I2C_FLAG_ADD10)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="302"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((FLAG)<sp/>==<sp/>I2C_FLAG_BTF)<sp/>||<sp/>((FLAG)<sp/>==<sp/>I2C_FLAG_ADDR)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="303"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((FLAG)<sp/>==<sp/>I2C_FLAG_SB))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="comment">/*========================================</highlight></codeline>
<codeline lineno="313"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="314"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C<sp/>Master<sp/>Events<sp/>(Events<sp/>grouped<sp/>in<sp/>order<sp/>of<sp/>communication)</highlight></codeline>
<codeline lineno="315"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==========================================*/</highlight></codeline>
<codeline lineno="324"><highlight class="comment">/*<sp/>--EV5<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325" refid="group___i2_c___events_1gaeef8c22ac035122b06e31b360ac7aeb3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>I2C_EVENT_MASTER_MODE_SELECT<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00030001)<sp/><sp/></highlight><highlight class="comment">/*<sp/>BUSY,<sp/>MSL<sp/>and<sp/>SB<sp/>flag<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="comment">/*<sp/>--EV6<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353" refid="group___i2_c___events_1ga2361a6e60b7dc86fb682dd06fbd3edb7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00070082)<sp/><sp/></highlight><highlight class="comment">/*<sp/>BUSY,<sp/>MSL,<sp/>ADDR,<sp/>TXE<sp/>and<sp/>TRA<sp/>flags<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="group___i2_c___events_1gabfde82864432ddb87b6462234d542e60" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00030002)<sp/><sp/></highlight><highlight class="comment">/*<sp/>BUSY,<sp/>MSL<sp/>and<sp/>ADDR<sp/>flags<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--EV9<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="group___i2_c___events_1gad04882597bbf542c6fee7a9c837fbc8c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>I2C_EVENT_MASTER_MODE_ADDRESS10<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00030008)<sp/><sp/></highlight><highlight class="comment">/*<sp/>BUSY,<sp/>MSL<sp/>and<sp/>ADD10<sp/>flags<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="comment">/*<sp/>Master<sp/>RECEIVER<sp/>mode<sp/>-----------------------------*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--EV7<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="group___i2_c___events_1ga6bcf2ae49961e07e27cf9fdf334719e3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>I2C_EVENT_MASTER_BYTE_RECEIVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00030040)<sp/><sp/></highlight><highlight class="comment">/*<sp/>BUSY,<sp/>MSL<sp/>and<sp/>RXNE<sp/>flags<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Master<sp/>TRANSMITTER<sp/>mode<sp/>--------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--EV8<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="group___i2_c___events_1ga037ac1e67e44ee085acac6f034bd73b2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>I2C_EVENT_MASTER_BYTE_TRANSMITTING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00070080)<sp/></highlight><highlight class="comment">/*<sp/>TRA,<sp/>BUSY,<sp/>MSL,<sp/>TXE<sp/>flags<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--EV8_2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395" refid="group___i2_c___events_1ga8fe3b96b54e3c38e1de5d48536039c8f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>I2C_EVENT_MASTER_BYTE_TRANSMITTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00070084)<sp/><sp/></highlight><highlight class="comment">/*<sp/>TRA,<sp/>BUSY,<sp/>MSL,<sp/>TXE<sp/>and<sp/>BTF<sp/>flags<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">/*========================================</highlight></codeline>
<codeline lineno="399"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="400"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>I2C<sp/>Slave<sp/>Events<sp/>(Events<sp/>grouped<sp/>in<sp/>order<sp/>of<sp/>communication)</highlight></codeline>
<codeline lineno="401"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==========================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="comment">/*<sp/>--EV1<sp/><sp/>(all<sp/>the<sp/>events<sp/>below<sp/>are<sp/>variants<sp/>of<sp/>EV1)<sp/>*/</highlight><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>1)<sp/>Case<sp/>of<sp/>One<sp/>Single<sp/>Address<sp/>managed<sp/>by<sp/>the<sp/>slave<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430" refid="group___i2_c___events_1ga6cf0e334704618b024eee604849f50f7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00020002)<sp/></highlight><highlight class="comment">/*<sp/>BUSY<sp/>and<sp/>ADDR<sp/>flags<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431" refid="group___i2_c___events_1ga3fa381c1fd9a95c8ae13c6cc402b1327" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED<sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00060082)<sp/></highlight><highlight class="comment">/*<sp/>TRA,<sp/>BUSY,<sp/>TXE<sp/>and<sp/>ADDR<sp/>flags<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>2)<sp/>Case<sp/>of<sp/>Dual<sp/>address<sp/>managed<sp/>by<sp/>the<sp/>slave<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434" refid="group___i2_c___events_1ga17e78ab01fa980b3df10f8d9f6864c48" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED<sp/><sp/><sp/><sp/>((uint32_t)0x00820000)<sp/><sp/></highlight><highlight class="comment">/*<sp/>DUALF<sp/>and<sp/>BUSY<sp/>flags<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435" refid="group___i2_c___events_1ga6221aa204356bec9146f800ccfc99fc1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED<sp/>((uint32_t)0x00860080)<sp/><sp/></highlight><highlight class="comment">/*<sp/>DUALF,<sp/>TRA,<sp/>BUSY<sp/>and<sp/>TXE<sp/>flags<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>3)<sp/>Case<sp/>of<sp/>General<sp/>Call<sp/>enabled<sp/>for<sp/>the<sp/>slave<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438" refid="group___i2_c___events_1ga15195f6def95f688ae9725899f49ea23" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00120000)<sp/><sp/></highlight><highlight class="comment">/*<sp/>GENCALL<sp/>and<sp/>BUSY<sp/>flags<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="comment">/*<sp/>Slave<sp/>RECEIVER<sp/>mode<sp/>--------------------------*/</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--EV2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469" refid="group___i2_c___events_1ga8b244626839940569c6c8bbfc4efe21d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>I2C_EVENT_SLAVE_BYTE_RECEIVED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00020040)<sp/><sp/></highlight><highlight class="comment">/*<sp/>BUSY<sp/>and<sp/>RXNE<sp/>flags<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--EV4<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471" refid="group___i2_c___events_1ga3148d8d7087e418959bc31e2646b2941" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>I2C_EVENT_SLAVE_STOP_DETECTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00000010)<sp/><sp/></highlight><highlight class="comment">/*<sp/>STOPF<sp/>flag<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Slave<sp/>TRANSMITTER<sp/>mode<sp/>-----------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--EV3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475" refid="group___i2_c___events_1ga50652880323b8c2746b5afbdfea03fe1" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>I2C_EVENT_SLAVE_BYTE_TRANSMITTED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00060084)<sp/><sp/></highlight><highlight class="comment">/*<sp/>TRA,<sp/>BUSY,<sp/>TXE<sp/>and<sp/>BTF<sp/>flags<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="group___i2_c___events_1gaa574c93a99497649f3d8e7ff53796231" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>I2C_EVENT_SLAVE_BYTE_TRANSMITTING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00060080)<sp/><sp/></highlight><highlight class="comment">/*<sp/>TRA,<sp/>BUSY<sp/>and<sp/>TXE<sp/>flags<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>--EV3_2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478" refid="group___i2_c___events_1ga249bd611f1ca64653c0bfc606c591088" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/><sp/>I2C_EVENT_SLAVE_ACK_FAILURE<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((uint32_t)0x00000400)<sp/><sp/></highlight><highlight class="comment">/*<sp/>AF<sp/>flag<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">/*===========================<sp/><sp/><sp/><sp/><sp/><sp/>End<sp/>of<sp/>Events<sp/>Description<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>==========================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482" refid="group___i2_c___events_1ga4b42e6936006195f89ff4f763d366970" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IS_I2C_EVENT(EVENT)<sp/>(((EVENT)<sp/>==<sp/>I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="483"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((EVENT)<sp/>==<sp/>I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="484"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((EVENT)<sp/>==<sp/>I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="485"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((EVENT)<sp/>==<sp/>I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="486"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((EVENT)<sp/>==<sp/>I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="487"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((EVENT)<sp/>==<sp/>I2C_EVENT_SLAVE_BYTE_RECEIVED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="488"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((EVENT)<sp/>==<sp/>(I2C_EVENT_SLAVE_BYTE_RECEIVED<sp/>|<sp/>I2C_FLAG_DUALF))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="489"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((EVENT)<sp/>==<sp/>(I2C_EVENT_SLAVE_BYTE_RECEIVED<sp/>|<sp/>I2C_FLAG_GENCALL))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="490"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((EVENT)<sp/>==<sp/>I2C_EVENT_SLAVE_BYTE_TRANSMITTED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="491"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((EVENT)<sp/>==<sp/>(I2C_EVENT_SLAVE_BYTE_TRANSMITTED<sp/>|<sp/>I2C_FLAG_DUALF))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="492"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((EVENT)<sp/>==<sp/>(I2C_EVENT_SLAVE_BYTE_TRANSMITTED<sp/>|<sp/>I2C_FLAG_GENCALL))<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="493"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((EVENT)<sp/>==<sp/>I2C_EVENT_SLAVE_STOP_DETECTED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="494"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((EVENT)<sp/>==<sp/>I2C_EVENT_MASTER_MODE_SELECT)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="495"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((EVENT)<sp/>==<sp/>I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="496"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((EVENT)<sp/>==<sp/>I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="497"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((EVENT)<sp/>==<sp/>I2C_EVENT_MASTER_BYTE_RECEIVED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="498"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((EVENT)<sp/>==<sp/>I2C_EVENT_MASTER_BYTE_TRANSMITTED)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="499"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((EVENT)<sp/>==<sp/>I2C_EVENT_MASTER_BYTE_TRANSMITTING)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="500"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((EVENT)<sp/>==<sp/>I2C_EVENT_MASTER_MODE_ADDRESS10)<sp/>||<sp/>\</highlight></codeline>
<codeline lineno="501"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>((EVENT)<sp/>==<sp/>I2C_EVENT_SLAVE_ACK_FAILURE))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="510" refid="group___i2_c__own__address1_1gad84e8b9523d45b6105b4d5cb68994a79" refkind="member"><highlight class="preprocessor">#define<sp/>IS_I2C_OWN_ADDRESS1(ADDRESS1)<sp/>((ADDRESS1)<sp/>&lt;=<sp/>0x3FF)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="group___i2_c__clock__speed_1gae0d731df1b264d853703716c29309b9b" refkind="member"><highlight class="preprocessor">#define<sp/>IS_I2C_CLOCK_SPEED(SPEED)<sp/>(((SPEED)<sp/>&gt;=<sp/>0x1)<sp/>&amp;&amp;<sp/>((SPEED)<sp/>&lt;=<sp/>400000))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1ga2ee214364603059ad5d9089f749f5bfd" kindref="member">I2C_DeInit</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1gaac29465bca70fbc91c2f922ab67bb88e" kindref="member">I2C_Init</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/><ref refid="struct_i2_c___init_type_def" kindref="compound">I2C_InitTypeDef</ref>*<sp/>I2C_InitStruct);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1ga08582aca6d7d7910cd5cbff0d9def350" kindref="member">I2C_StructInit</ref>(<ref refid="struct_i2_c___init_type_def" kindref="compound">I2C_InitTypeDef</ref>*<sp/>I2C_InitStruct);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1ga7e1323c9133c2cb424dfb5b10b7d2f0b" kindref="member">I2C_Cmd</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1ga38502ce11e5ec923e0f6476aaa35b45c" kindref="member">I2C_DMACmd</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1gab2e994c5681eb6ec7c26a03ffe1de060" kindref="member">I2C_DMALastTransferCmd</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1ga36c522b471588be9779c878222ccb20f" kindref="member">I2C_GenerateSTART</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1ga5c92cb573ca0ae58cc465e5400246561" kindref="member">I2C_GenerateSTOP</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1ga7bb44e894d68a7991f564c43fb187486" kindref="member">I2C_AcknowledgeConfig</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1ga7be2cc634a613c8e3539137e897a22df" kindref="member">I2C_OwnAddress2Config</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/>uint8_t<sp/>Address);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1ga02145a333a56e79557d6ef4ea03fc313" kindref="member">I2C_DualAddressCmd</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1ga65c740fc8d7b3b9f15cc432d8699d471" kindref="member">I2C_GeneralCallCmd</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1ga58fed146a06cb81d2940604e460de047" kindref="member">I2C_ITConfig</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/>uint16_t<sp/>I2C_IT,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1ga7bd9e70b8eafde0dd5eb42b0d95fe1a9" kindref="member">I2C_SendData</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/>uint8_t<sp/>Data);</highlight></codeline>
<codeline lineno="554"><highlight class="normal">uint8_t<sp/><ref refid="group___i2_c___exported___functions_1gaeaaa4b6f77f50eb57465148c55d27fb2" kindref="member">I2C_ReceiveData</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1ga009fc2a5b2313c36da39ece39a1156a6" kindref="member">I2C_Send7bitAddress</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/>uint8_t<sp/>Address,<sp/>uint8_t<sp/>I2C_Direction);</highlight></codeline>
<codeline lineno="556"><highlight class="normal">uint16_t<sp/><ref refid="group___i2_c___exported___functions_1ga8021dc796d15f997356b0583d6346805" kindref="member">I2C_ReadRegister</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/>uint8_t<sp/>I2C_Register);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1ga1289c908aeb882443aba323b459c638b" kindref="member">I2C_SoftwareResetCmd</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1gad08ebffc3a234d84e6405ec115bd74f1" kindref="member">I2C_NACKPositionConfig</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/>uint16_t<sp/>I2C_NACKPosition);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1ga75a810776d9710d2f6d9c5d9e93241c6" kindref="member">I2C_SMBusAlertConfig</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/>uint16_t<sp/>I2C_SMBusAlert);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1gaa27d1440290fe601e730b6980999afe3" kindref="member">I2C_TransmitPEC</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1ga5d0f939bdd45542502827bf408f24161" kindref="member">I2C_PECPositionConfig</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/>uint16_t<sp/>I2C_PECPosition);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1gae86801251359226c35745e0a258388b0" kindref="member">I2C_CalculatePEC</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState);</highlight></codeline>
<codeline lineno="563"><highlight class="normal">uint8_t<sp/><ref refid="group___i2_c___exported___functions_1ga7bf75e7c27c0e1d73e70fc0e1c7cd1dd" kindref="member">I2C_GetPEC</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1ga66d86742bf1be58b17ef8779ffc79d02" kindref="member">I2C_ARPCmd</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1ga7459feb3b1dfcd3e4f6574002ca7d3bd" kindref="member">I2C_StretchClockCmd</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/><ref refid="group___exported__types_1gac9a7e9a35d2513ec15c3b537aaa4fba1" kindref="member">FunctionalState</ref><sp/>NewState);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1gaa570f76bc34e5b0531b29b1a90af1275" kindref="member">I2C_FastModeDutyCycleConfig</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/>uint16_t<sp/>I2C_DutyCycle);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><ref refid="group___exported__types_1ga8333b96c67f83cba354b3407fcbb6ee8" kindref="member">ErrorStatus</ref><sp/><ref refid="group___i2_c___exported___functions_1ga2d5701342f9d4c1f09bf9d3cdcacc326" kindref="member">I2C_CheckEvent</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/>uint32_t<sp/>I2C_EVENT);</highlight></codeline>
<codeline lineno="657"><highlight class="normal">uint32_t<sp/><ref refid="group___i2_c___exported___functions_1ga29237aea9b5a3ead33167e1d027e9f1a" kindref="member">I2C_GetLastEvent</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><ref refid="group___exported__types_1ga89136caac2e14c55151f527ac02daaff" kindref="member">FlagStatus</ref><sp/><ref refid="group___i2_c___exported___functions_1ga15c95d0ed124f029621a2061b1677ee7" kindref="member">I2C_GetFlagStatus</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/>uint32_t<sp/>I2C_FLAG);</highlight></codeline>
<codeline lineno="669"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1ga9d4f8fe9f7232696114b5578b1223963" kindref="member">I2C_ClearFlag</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/>uint32_t<sp/>I2C_FLAG);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><ref refid="group___exported__types_1gaacbd7ed539db0aacd973a0f6eca34074" kindref="member">ITStatus</ref><sp/><ref refid="group___i2_c___exported___functions_1ga447771fbbd94a56f3570b9f430a069ba" kindref="member">I2C_GetITStatus</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/>uint32_t<sp/>I2C_IT);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group___i2_c___exported___functions_1ga110dda440fa200b5f77349df19b3e6bb" kindref="member">I2C_ClearITPendingBit</ref>(<ref refid="struct_i2_c___type_def" kindref="compound">I2C_TypeDef</ref>*<sp/>I2Cx,<sp/>uint32_t<sp/>I2C_IT);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal">}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="comment">//<sp/>[ILG]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined<sp/>(<sp/>__GNUC__<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*__STM32F10x_I2C_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="comment">/*******************<sp/>(C)<sp/>COPYRIGHT<sp/>2011<sp/>STMicroelectronics<sp/>*****END<sp/>OF<sp/>FILE****/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_i2c.h"/>
  </compounddef>
</doxygen>
