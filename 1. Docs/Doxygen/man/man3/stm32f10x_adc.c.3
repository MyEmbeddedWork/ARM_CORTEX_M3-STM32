.TH "C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c" 3 "Sun Apr 16 2017" "STM32_CMSIS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_adc.c \- This file provides all the ADC firmware functions\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'stm32f10x_adc\&.h'\fP
.br
\fC#include 'stm32f10x_rcc\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCR1_DISCNUM_Reset\fP   ((uint32_t)0xFFFF1FFF)"
.br
.ti -1c
.RI "#define \fBCR1_DISCEN_Set\fP   ((uint32_t)0x00000800)"
.br
.ti -1c
.RI "#define \fBCR1_DISCEN_Reset\fP   ((uint32_t)0xFFFFF7FF)"
.br
.ti -1c
.RI "#define \fBCR1_JAUTO_Set\fP   ((uint32_t)0x00000400)"
.br
.ti -1c
.RI "#define \fBCR1_JAUTO_Reset\fP   ((uint32_t)0xFFFFFBFF)"
.br
.ti -1c
.RI "#define \fBCR1_JDISCEN_Set\fP   ((uint32_t)0x00001000)"
.br
.ti -1c
.RI "#define \fBCR1_JDISCEN_Reset\fP   ((uint32_t)0xFFFFEFFF)"
.br
.ti -1c
.RI "#define \fBCR1_AWDCH_Reset\fP   ((uint32_t)0xFFFFFFE0)"
.br
.ti -1c
.RI "#define \fBCR1_AWDMode_Reset\fP   ((uint32_t)0xFF3FFDFF)"
.br
.ti -1c
.RI "#define \fBCR1_CLEAR_Mask\fP   ((uint32_t)0xFFF0FEFF)"
.br
.ti -1c
.RI "#define \fBCR2_ADON_Set\fP   ((uint32_t)0x00000001)"
.br
.ti -1c
.RI "#define \fBCR2_ADON_Reset\fP   ((uint32_t)0xFFFFFFFE)"
.br
.ti -1c
.RI "#define \fBCR2_DMA_Set\fP   ((uint32_t)0x00000100)"
.br
.ti -1c
.RI "#define \fBCR2_DMA_Reset\fP   ((uint32_t)0xFFFFFEFF)"
.br
.ti -1c
.RI "#define \fBCR2_RSTCAL_Set\fP   ((uint32_t)0x00000008)"
.br
.ti -1c
.RI "#define \fBCR2_CAL_Set\fP   ((uint32_t)0x00000004)"
.br
.ti -1c
.RI "#define \fBCR2_SWSTART_Set\fP   ((uint32_t)0x00400000)"
.br
.ti -1c
.RI "#define \fBCR2_EXTTRIG_Set\fP   ((uint32_t)0x00100000)"
.br
.ti -1c
.RI "#define \fBCR2_EXTTRIG_Reset\fP   ((uint32_t)0xFFEFFFFF)"
.br
.ti -1c
.RI "#define \fBCR2_EXTTRIG_SWSTART_Set\fP   ((uint32_t)0x00500000)"
.br
.ti -1c
.RI "#define \fBCR2_EXTTRIG_SWSTART_Reset\fP   ((uint32_t)0xFFAFFFFF)"
.br
.ti -1c
.RI "#define \fBCR2_JEXTSEL_Reset\fP   ((uint32_t)0xFFFF8FFF)"
.br
.ti -1c
.RI "#define \fBCR2_JEXTTRIG_Set\fP   ((uint32_t)0x00008000)"
.br
.ti -1c
.RI "#define \fBCR2_JEXTTRIG_Reset\fP   ((uint32_t)0xFFFF7FFF)"
.br
.ti -1c
.RI "#define \fBCR2_JSWSTART_Set\fP   ((uint32_t)0x00200000)"
.br
.ti -1c
.RI "#define \fBCR2_JEXTTRIG_JSWSTART_Set\fP   ((uint32_t)0x00208000)"
.br
.ti -1c
.RI "#define \fBCR2_JEXTTRIG_JSWSTART_Reset\fP   ((uint32_t)0xFFDF7FFF)"
.br
.ti -1c
.RI "#define \fBCR2_TSVREFE_Set\fP   ((uint32_t)0x00800000)"
.br
.ti -1c
.RI "#define \fBCR2_TSVREFE_Reset\fP   ((uint32_t)0xFF7FFFFF)"
.br
.ti -1c
.RI "#define \fBCR2_CLEAR_Mask\fP   ((uint32_t)0xFFF1F7FD)"
.br
.ti -1c
.RI "#define \fBSQR3_SQ_Set\fP   ((uint32_t)0x0000001F)"
.br
.ti -1c
.RI "#define \fBSQR2_SQ_Set\fP   ((uint32_t)0x0000001F)"
.br
.ti -1c
.RI "#define \fBSQR1_SQ_Set\fP   ((uint32_t)0x0000001F)"
.br
.ti -1c
.RI "#define \fBSQR1_CLEAR_Mask\fP   ((uint32_t)0xFF0FFFFF)"
.br
.ti -1c
.RI "#define \fBJSQR_JSQ_Set\fP   ((uint32_t)0x0000001F)"
.br
.ti -1c
.RI "#define \fBJSQR_JL_Set\fP   ((uint32_t)0x00300000)"
.br
.ti -1c
.RI "#define \fBJSQR_JL_Reset\fP   ((uint32_t)0xFFCFFFFF)"
.br
.ti -1c
.RI "#define \fBSMPR1_SMP_Set\fP   ((uint32_t)0x00000007)"
.br
.ti -1c
.RI "#define \fBSMPR2_SMP_Set\fP   ((uint32_t)0x00000007)"
.br
.ti -1c
.RI "#define \fBJDR_Offset\fP   ((uint8_t)0x28)"
.br
.ti -1c
.RI "#define \fBDR_ADDRESS\fP   ((uint32_t)0x4001244C)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBADC_DeInit\fP (\fBADC_TypeDef\fP *ADCx)"
.br
.RI "Deinitializes the ADCx peripheral registers to their default reset values\&. "
.ti -1c
.RI "void \fBADC_Init\fP (\fBADC_TypeDef\fP *ADCx, \fBADC_InitTypeDef\fP *ADC_InitStruct)"
.br
.RI "Initializes the ADCx peripheral according to the specified parameters in the ADC_InitStruct\&. "
.ti -1c
.RI "void \fBADC_StructInit\fP (\fBADC_InitTypeDef\fP *ADC_InitStruct)"
.br
.RI "Fills each ADC_InitStruct member with its default value\&. "
.ti -1c
.RI "void \fBADC_Cmd\fP (\fBADC_TypeDef\fP *ADCx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the specified ADC peripheral\&. "
.ti -1c
.RI "void \fBADC_DMACmd\fP (\fBADC_TypeDef\fP *ADCx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the specified ADC DMA request\&. "
.ti -1c
.RI "void \fBADC_ITConfig\fP (\fBADC_TypeDef\fP *ADCx, uint16_t ADC_IT, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the specified ADC interrupts\&. "
.ti -1c
.RI "void \fBADC_ResetCalibration\fP (\fBADC_TypeDef\fP *ADCx)"
.br
.RI "Resets the selected ADC calibration registers\&. "
.ti -1c
.RI "\fBFlagStatus\fP \fBADC_GetResetCalibrationStatus\fP (\fBADC_TypeDef\fP *ADCx)"
.br
.RI "Gets the selected ADC reset calibration registers status\&. "
.ti -1c
.RI "void \fBADC_StartCalibration\fP (\fBADC_TypeDef\fP *ADCx)"
.br
.RI "Starts the selected ADC calibration process\&. "
.ti -1c
.RI "\fBFlagStatus\fP \fBADC_GetCalibrationStatus\fP (\fBADC_TypeDef\fP *ADCx)"
.br
.RI "Gets the selected ADC calibration status\&. "
.ti -1c
.RI "void \fBADC_SoftwareStartConvCmd\fP (\fBADC_TypeDef\fP *ADCx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the selected ADC software start conversion \&. "
.ti -1c
.RI "\fBFlagStatus\fP \fBADC_GetSoftwareStartConvStatus\fP (\fBADC_TypeDef\fP *ADCx)"
.br
.RI "Gets the selected ADC Software start conversion Status\&. "
.ti -1c
.RI "void \fBADC_DiscModeChannelCountConfig\fP (\fBADC_TypeDef\fP *ADCx, uint8_t Number)"
.br
.RI "Configures the discontinuous mode for the selected ADC regular group channel\&. "
.ti -1c
.RI "void \fBADC_DiscModeCmd\fP (\fBADC_TypeDef\fP *ADCx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the discontinuous mode on regular group channel for the specified ADC\&. "
.ti -1c
.RI "void \fBADC_RegularChannelConfig\fP (\fBADC_TypeDef\fP *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)"
.br
.RI "Configures for the selected ADC regular channel its corresponding rank in the sequencer and its sample time\&. "
.ti -1c
.RI "void \fBADC_ExternalTrigConvCmd\fP (\fBADC_TypeDef\fP *ADCx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the ADCx conversion through external trigger\&. "
.ti -1c
.RI "uint16_t \fBADC_GetConversionValue\fP (\fBADC_TypeDef\fP *ADCx)"
.br
.RI "Returns the last ADCx conversion result data for regular channel\&. "
.ti -1c
.RI "uint32_t \fBADC_GetDualModeConversionValue\fP (void)"
.br
.RI "Returns the last ADC1 and ADC2 conversion result data in dual mode\&. "
.ti -1c
.RI "void \fBADC_AutoInjectedConvCmd\fP (\fBADC_TypeDef\fP *ADCx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the selected ADC automatic injected group conversion after regular one\&. "
.ti -1c
.RI "void \fBADC_InjectedDiscModeCmd\fP (\fBADC_TypeDef\fP *ADCx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the discontinuous mode for injected group channel for the specified ADC\&. "
.ti -1c
.RI "void \fBADC_ExternalTrigInjectedConvConfig\fP (\fBADC_TypeDef\fP *ADCx, uint32_t ADC_ExternalTrigInjecConv)"
.br
.RI "Configures the ADCx external trigger for injected channels conversion\&. "
.ti -1c
.RI "void \fBADC_ExternalTrigInjectedConvCmd\fP (\fBADC_TypeDef\fP *ADCx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the ADCx injected channels conversion through external trigger\&. "
.ti -1c
.RI "void \fBADC_SoftwareStartInjectedConvCmd\fP (\fBADC_TypeDef\fP *ADCx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the selected ADC start of the injected channels conversion\&. "
.ti -1c
.RI "\fBFlagStatus\fP \fBADC_GetSoftwareStartInjectedConvCmdStatus\fP (\fBADC_TypeDef\fP *ADCx)"
.br
.RI "Gets the selected ADC Software start injected conversion Status\&. "
.ti -1c
.RI "void \fBADC_InjectedChannelConfig\fP (\fBADC_TypeDef\fP *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)"
.br
.RI "Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time\&. "
.ti -1c
.RI "void \fBADC_InjectedSequencerLengthConfig\fP (\fBADC_TypeDef\fP *ADCx, uint8_t Length)"
.br
.RI "Configures the sequencer length for injected channels\&. "
.ti -1c
.RI "void \fBADC_SetInjectedOffset\fP (\fBADC_TypeDef\fP *ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)"
.br
.RI "Set the injected channels conversion value offset\&. "
.ti -1c
.RI "uint16_t \fBADC_GetInjectedConversionValue\fP (\fBADC_TypeDef\fP *ADCx, uint8_t ADC_InjectedChannel)"
.br
.RI "Returns the ADC injected channel conversion result\&. "
.ti -1c
.RI "void \fBADC_AnalogWatchdogCmd\fP (\fBADC_TypeDef\fP *ADCx, uint32_t ADC_AnalogWatchdog)"
.br
.RI "Enables or disables the analog watchdog on single/all regular or injected channels\&. "
.ti -1c
.RI "void \fBADC_AnalogWatchdogThresholdsConfig\fP (\fBADC_TypeDef\fP *ADCx, uint16_t HighThreshold, uint16_t LowThreshold)"
.br
.RI "Configures the high and low thresholds of the analog watchdog\&. "
.ti -1c
.RI "void \fBADC_AnalogWatchdogSingleChannelConfig\fP (\fBADC_TypeDef\fP *ADCx, uint8_t ADC_Channel)"
.br
.RI "Configures the analog watchdog guarded single channel\&. "
.ti -1c
.RI "void \fBADC_TempSensorVrefintCmd\fP (\fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the temperature sensor and Vrefint channel\&. "
.ti -1c
.RI "\fBFlagStatus\fP \fBADC_GetFlagStatus\fP (\fBADC_TypeDef\fP *ADCx, uint8_t ADC_FLAG)"
.br
.RI "Checks whether the specified ADC flag is set or not\&. "
.ti -1c
.RI "void \fBADC_ClearFlag\fP (\fBADC_TypeDef\fP *ADCx, uint8_t ADC_FLAG)"
.br
.RI "Clears the ADCx's pending flags\&. "
.ti -1c
.RI "\fBITStatus\fP \fBADC_GetITStatus\fP (\fBADC_TypeDef\fP *ADCx, uint16_t ADC_IT)"
.br
.RI "Checks whether the specified ADC interrupt has occurred or not\&. "
.ti -1c
.RI "void \fBADC_ClearITPendingBit\fP (\fBADC_TypeDef\fP *ADCx, uint16_t ADC_IT)"
.br
.RI "Clears the ADCx's interrupt pending bits\&. "
.in -1c
.SH "Detailed Description"
.PP 
This file provides all the ADC firmware functions\&. 


.PP
\fBAuthor:\fP
.RS 4
MCD Application Team 
.RE
.PP
\fBVersion:\fP
.RS 4
V3\&.5\&.0 
.RE
.PP
\fBDate:\fP
.RS 4
11-March-2011 
.RE
.PP
\fBAttention:\fP
.RS 4
.RE
.PP
THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME\&. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS\&.
.PP
.SS "(C) COPYRIGHT 2011 STMicroelectronics"

.PP
Definition in file \fBstm32f10x_adc\&.c\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for STM32_CMSIS from the source code\&.
