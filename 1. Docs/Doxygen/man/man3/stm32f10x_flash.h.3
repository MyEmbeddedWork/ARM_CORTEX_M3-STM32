.TH "C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_flash.h" 3 "Sun Apr 16 2017" "STM32_CMSIS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_flash.h \- This file contains all the functions prototypes for the FLASH firmware library\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'stm32f10x\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBFLASH_Latency_0\fP   ((uint32_t)0x00000000)"
.br
.ti -1c
.RI "#define \fBFLASH_Latency_1\fP   ((uint32_t)0x00000001)"
.br
.ti -1c
.RI "#define \fBFLASH_Latency_2\fP   ((uint32_t)0x00000002)"
.br
.ti -1c
.RI "#define \fBIS_FLASH_LATENCY\fP(LATENCY)"
.br
.ti -1c
.RI "#define \fBFLASH_HalfCycleAccess_Enable\fP   ((uint32_t)0x00000008)"
.br
.ti -1c
.RI "#define \fBFLASH_HalfCycleAccess_Disable\fP   ((uint32_t)0x00000000)"
.br
.ti -1c
.RI "#define \fBIS_FLASH_HALFCYCLEACCESS_STATE\fP(STATE)"
.br
.ti -1c
.RI "#define \fBFLASH_PrefetchBuffer_Enable\fP   ((uint32_t)0x00000010)"
.br
.ti -1c
.RI "#define \fBFLASH_PrefetchBuffer_Disable\fP   ((uint32_t)0x00000000)"
.br
.ti -1c
.RI "#define \fBIS_FLASH_PREFETCHBUFFER_STATE\fP(STATE)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages0to3\fP   ((uint32_t)0x00000001)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages4to7\fP   ((uint32_t)0x00000002)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages8to11\fP   ((uint32_t)0x00000004)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages12to15\fP   ((uint32_t)0x00000008)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages16to19\fP   ((uint32_t)0x00000010)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages20to23\fP   ((uint32_t)0x00000020)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages24to27\fP   ((uint32_t)0x00000040)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages28to31\fP   ((uint32_t)0x00000080)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages32to35\fP   ((uint32_t)0x00000100)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages36to39\fP   ((uint32_t)0x00000200)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages40to43\fP   ((uint32_t)0x00000400)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages44to47\fP   ((uint32_t)0x00000800)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages48to51\fP   ((uint32_t)0x00001000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages52to55\fP   ((uint32_t)0x00002000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages56to59\fP   ((uint32_t)0x00004000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages60to63\fP   ((uint32_t)0x00008000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages64to67\fP   ((uint32_t)0x00010000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages68to71\fP   ((uint32_t)0x00020000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages72to75\fP   ((uint32_t)0x00040000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages76to79\fP   ((uint32_t)0x00080000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages80to83\fP   ((uint32_t)0x00100000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages84to87\fP   ((uint32_t)0x00200000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages88to91\fP   ((uint32_t)0x00400000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages92to95\fP   ((uint32_t)0x00800000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages96to99\fP   ((uint32_t)0x01000000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages100to103\fP   ((uint32_t)0x02000000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages104to107\fP   ((uint32_t)0x04000000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages108to111\fP   ((uint32_t)0x08000000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages112to115\fP   ((uint32_t)0x10000000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages116to119\fP   ((uint32_t)0x20000000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages120to123\fP   ((uint32_t)0x40000000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages124to127\fP   ((uint32_t)0x80000000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages0to1\fP   ((uint32_t)0x00000001)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages2to3\fP   ((uint32_t)0x00000002)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages4to5\fP   ((uint32_t)0x00000004)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages6to7\fP   ((uint32_t)0x00000008)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages8to9\fP   ((uint32_t)0x00000010)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages10to11\fP   ((uint32_t)0x00000020)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages12to13\fP   ((uint32_t)0x00000040)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages14to15\fP   ((uint32_t)0x00000080)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages16to17\fP   ((uint32_t)0x00000100)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages18to19\fP   ((uint32_t)0x00000200)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages20to21\fP   ((uint32_t)0x00000400)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages22to23\fP   ((uint32_t)0x00000800)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages24to25\fP   ((uint32_t)0x00001000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages26to27\fP   ((uint32_t)0x00002000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages28to29\fP   ((uint32_t)0x00004000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages30to31\fP   ((uint32_t)0x00008000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages32to33\fP   ((uint32_t)0x00010000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages34to35\fP   ((uint32_t)0x00020000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages36to37\fP   ((uint32_t)0x00040000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages38to39\fP   ((uint32_t)0x00080000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages40to41\fP   ((uint32_t)0x00100000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages42to43\fP   ((uint32_t)0x00200000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages44to45\fP   ((uint32_t)0x00400000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages46to47\fP   ((uint32_t)0x00800000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages48to49\fP   ((uint32_t)0x01000000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages50to51\fP   ((uint32_t)0x02000000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages52to53\fP   ((uint32_t)0x04000000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages54to55\fP   ((uint32_t)0x08000000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages56to57\fP   ((uint32_t)0x10000000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages58to59\fP   ((uint32_t)0x20000000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages60to61\fP   ((uint32_t)0x40000000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages62to127\fP   ((uint32_t)0x80000000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages62to255\fP   ((uint32_t)0x80000000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_Pages62to511\fP   ((uint32_t)0x80000000)"
.br
.ti -1c
.RI "#define \fBFLASH_WRProt_AllPages\fP   ((uint32_t)0xFFFFFFFF)"
.br
.ti -1c
.RI "#define \fBIS_FLASH_WRPROT_PAGE\fP(PAGE)   (((PAGE) != 0x00000000))"
.br
.ti -1c
.RI "#define \fBIS_FLASH_ADDRESS\fP(ADDRESS)   (((ADDRESS) >= 0x08000000) && ((ADDRESS) < 0x080FFFFF))"
.br
.ti -1c
.RI "#define \fBIS_OB_DATA_ADDRESS\fP(ADDRESS)   (((ADDRESS) == 0x1FFFF804) || ((ADDRESS) == 0x1FFFF806))"
.br
.ti -1c
.RI "#define \fBOB_IWDG_SW\fP   ((uint16_t)0x0001)"
.br
.ti -1c
.RI "#define \fBOB_IWDG_HW\fP   ((uint16_t)0x0000)"
.br
.ti -1c
.RI "#define \fBIS_OB_IWDG_SOURCE\fP(SOURCE)   (((SOURCE) == \fBOB_IWDG_SW\fP) || ((SOURCE) == \fBOB_IWDG_HW\fP))"
.br
.ti -1c
.RI "#define \fBOB_STOP_NoRST\fP   ((uint16_t)0x0002)"
.br
.ti -1c
.RI "#define \fBOB_STOP_RST\fP   ((uint16_t)0x0000)"
.br
.ti -1c
.RI "#define \fBIS_OB_STOP_SOURCE\fP(SOURCE)   (((SOURCE) == \fBOB_STOP_NoRST\fP) || ((SOURCE) == \fBOB_STOP_RST\fP))"
.br
.ti -1c
.RI "#define \fBOB_STDBY_NoRST\fP   ((uint16_t)0x0004)"
.br
.ti -1c
.RI "#define \fBOB_STDBY_RST\fP   ((uint16_t)0x0000)"
.br
.ti -1c
.RI "#define \fBIS_OB_STDBY_SOURCE\fP(SOURCE)   (((SOURCE) == \fBOB_STDBY_NoRST\fP) || ((SOURCE) == \fBOB_STDBY_RST\fP))"
.br
.ti -1c
.RI "#define \fBFLASH_IT_ERROR\fP   ((uint32_t)0x00000400)"
.br
.ti -1c
.RI "#define \fBFLASH_IT_EOP\fP   ((uint32_t)0x00001000)"
.br
.ti -1c
.RI "#define \fBFLASH_IT_BANK1_ERROR\fP   \fBFLASH_IT_ERROR\fP"
.br
.ti -1c
.RI "#define \fBFLASH_IT_BANK1_EOP\fP   \fBFLASH_IT_EOP\fP"
.br
.ti -1c
.RI "#define \fBIS_FLASH_IT\fP(IT)   ((((IT) & (uint32_t)0xFFFFEBFF) == 0x00000000) && (((IT) != 0x00000000)))"
.br
.ti -1c
.RI "#define \fBFLASH_FLAG_BSY\fP   ((uint32_t)0x00000001)"
.br
.ti -1c
.RI "#define \fBFLASH_FLAG_EOP\fP   ((uint32_t)0x00000020)"
.br
.ti -1c
.RI "#define \fBFLASH_FLAG_PGERR\fP   ((uint32_t)0x00000004)"
.br
.ti -1c
.RI "#define \fBFLASH_FLAG_WRPRTERR\fP   ((uint32_t)0x00000010)"
.br
.ti -1c
.RI "#define \fBFLASH_FLAG_OPTERR\fP   ((uint32_t)0x00000001)"
.br
.ti -1c
.RI "#define \fBFLASH_FLAG_BANK1_BSY\fP   \fBFLASH_FLAG_BSY\fP"
.br
.ti -1c
.RI "#define \fBFLASH_FLAG_BANK1_EOP\fP   \fBFLASH_FLAG_EOP\fP"
.br
.ti -1c
.RI "#define \fBFLASH_FLAG_BANK1_PGERR\fP   \fBFLASH_FLAG_PGERR\fP"
.br
.ti -1c
.RI "#define \fBFLASH_FLAG_BANK1_WRPRTERR\fP   \fBFLASH_FLAG_WRPRTERR\fP"
.br
.ti -1c
.RI "#define \fBIS_FLASH_CLEAR_FLAG\fP(FLAG)   ((((FLAG) & (uint32_t)0xFFFFFFCA) == 0x00000000) && ((FLAG) != 0x00000000))"
.br
.ti -1c
.RI "#define \fBIS_FLASH_GET_FLAG\fP(FLAG)"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBFLASH_Status\fP { \fBFLASH_BUSY\fP = 1, \fBFLASH_ERROR_PG\fP, \fBFLASH_ERROR_WRP\fP, \fBFLASH_COMPLETE\fP, \fBFLASH_TIMEOUT\fP }
.RI "FLASH Status\&. ""
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBFLASH_SetLatency\fP (uint32_t FLASH_Latency)"
.br
.RI "Sets the code latency value\&. "
.ti -1c
.RI "void \fBFLASH_HalfCycleAccessCmd\fP (uint32_t FLASH_HalfCycleAccess)"
.br
.RI "Enables or disables the Half cycle flash access\&. "
.ti -1c
.RI "void \fBFLASH_PrefetchBufferCmd\fP (uint32_t FLASH_PrefetchBuffer)"
.br
.RI "Enables or disables the Prefetch Buffer\&. "
.ti -1c
.RI "void \fBFLASH_Unlock\fP (void)"
.br
.RI "Unlocks the FLASH Program Erase Controller\&. "
.ti -1c
.RI "void \fBFLASH_Lock\fP (void)"
.br
.RI "Locks the FLASH Program Erase Controller\&. "
.ti -1c
.RI "\fBFLASH_Status\fP \fBFLASH_ErasePage\fP (uint32_t Page_Address)"
.br
.RI "Erases a specified FLASH page\&. "
.ti -1c
.RI "\fBFLASH_Status\fP \fBFLASH_EraseAllPages\fP (void)"
.br
.RI "Erases all FLASH pages\&. "
.ti -1c
.RI "\fBFLASH_Status\fP \fBFLASH_EraseOptionBytes\fP (void)"
.br
.RI "Erases the FLASH option bytes\&. "
.ti -1c
.RI "\fBFLASH_Status\fP \fBFLASH_ProgramWord\fP (uint32_t Address, uint32_t Data)"
.br
.RI "Programs a word at a specified address\&. "
.ti -1c
.RI "\fBFLASH_Status\fP \fBFLASH_ProgramHalfWord\fP (uint32_t Address, uint16_t Data)"
.br
.RI "Programs a half word at a specified address\&. "
.ti -1c
.RI "\fBFLASH_Status\fP \fBFLASH_ProgramOptionByteData\fP (uint32_t Address, uint8_t Data)"
.br
.RI "Programs a half word at a specified Option Byte Data address\&. "
.ti -1c
.RI "\fBFLASH_Status\fP \fBFLASH_EnableWriteProtection\fP (uint32_t FLASH_Pages)"
.br
.RI "Write protects the desired pages\&. "
.ti -1c
.RI "\fBFLASH_Status\fP \fBFLASH_ReadOutProtection\fP (\fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the read out protection\&. "
.ti -1c
.RI "\fBFLASH_Status\fP \fBFLASH_UserOptionByteConfig\fP (uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)"
.br
.RI "Programs the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY\&. "
.ti -1c
.RI "uint32_t \fBFLASH_GetUserOptionByte\fP (void)"
.br
.RI "Returns the FLASH User Option Bytes values\&. "
.ti -1c
.RI "uint32_t \fBFLASH_GetWriteProtectionOptionByte\fP (void)"
.br
.RI "Returns the FLASH Write Protection Option Bytes Register value\&. "
.ti -1c
.RI "\fBFlagStatus\fP \fBFLASH_GetReadOutProtectionStatus\fP (void)"
.br
.RI "Checks whether the FLASH Read Out Protection Status is set or not\&. "
.ti -1c
.RI "\fBFlagStatus\fP \fBFLASH_GetPrefetchBufferStatus\fP (void)"
.br
.RI "Checks whether the FLASH Prefetch Buffer status is set or not\&. "
.ti -1c
.RI "void \fBFLASH_ITConfig\fP (uint32_t FLASH_IT, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the specified FLASH interrupts\&. "
.ti -1c
.RI "\fBFlagStatus\fP \fBFLASH_GetFlagStatus\fP (uint32_t FLASH_FLAG)"
.br
.RI "Checks whether the specified FLASH flag is set or not\&. "
.ti -1c
.RI "void \fBFLASH_ClearFlag\fP (uint32_t FLASH_FLAG)"
.br
.RI "Clears the FLASH's pending flags\&. "
.ti -1c
.RI "\fBFLASH_Status\fP \fBFLASH_GetStatus\fP (void)"
.br
.RI "Returns the FLASH Status\&. "
.ti -1c
.RI "\fBFLASH_Status\fP \fBFLASH_WaitForLastOperation\fP (uint32_t Timeout)"
.br
.RI "Waits for a Flash operation to complete or a TIMEOUT to occur\&. "
.ti -1c
.RI "void \fBFLASH_UnlockBank1\fP (void)"
.br
.RI "Unlocks the FLASH Bank1 Program Erase Controller\&. "
.ti -1c
.RI "void \fBFLASH_LockBank1\fP (void)"
.br
.RI "Locks the FLASH Bank1 Program Erase Controller\&. "
.ti -1c
.RI "\fBFLASH_Status\fP \fBFLASH_EraseAllBank1Pages\fP (void)"
.br
.RI "Erases all Bank1 FLASH pages\&. "
.ti -1c
.RI "\fBFLASH_Status\fP \fBFLASH_GetBank1Status\fP (void)"
.br
.RI "Returns the FLASH Bank1 Status\&. "
.ti -1c
.RI "\fBFLASH_Status\fP \fBFLASH_WaitForLastBank1Operation\fP (uint32_t Timeout)"
.br
.RI "Waits for a Flash operation on Bank1 to complete or a TIMEOUT to occur\&. "
.in -1c
.SH "Detailed Description"
.PP 
This file contains all the functions prototypes for the FLASH firmware library\&. 


.PP
\fBAuthor:\fP
.RS 4
MCD Application Team 
.RE
.PP
\fBVersion:\fP
.RS 4
V3\&.5\&.0 
.RE
.PP
\fBDate:\fP
.RS 4
11-March-2011 
.RE
.PP
\fBAttention:\fP
.RS 4
.RE
.PP
THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME\&. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS\&.
.PP
.SS "(C) COPYRIGHT 2011 STMicroelectronics"

.PP
Definition in file \fBstm32f10x_flash\&.h\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for STM32_CMSIS from the source code\&.
