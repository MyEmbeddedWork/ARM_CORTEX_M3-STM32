.TH "C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_can.h" 3 "Sun Apr 16 2017" "STM32_CMSIS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/anilj/Desktop/cmsis/sorc/system/include/stm32f1-stdperiph/stm32f10x_can.h \- This file contains all the functions prototypes for the CAN firmware library\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'stm32f10x\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBCAN_InitTypeDef\fP"
.br
.RI "CAN init structure definition\&. "
.ti -1c
.RI "struct \fBCAN_FilterInitTypeDef\fP"
.br
.RI "CAN filter init structure definition\&. "
.ti -1c
.RI "struct \fBCanTxMsg\fP"
.br
.RI "CAN Tx message structure definition\&. "
.ti -1c
.RI "struct \fBCanRxMsg\fP"
.br
.RI "CAN Rx message structure definition\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBIS_CAN_ALL_PERIPH\fP(PERIPH)"
.br
.ti -1c
.RI "#define \fBCAN_InitStatus_Failed\fP   ((uint8_t)0x00)"
.br
.ti -1c
.RI "#define \fBCAN_InitStatus_Success\fP   ((uint8_t)0x01)"
.br
.ti -1c
.RI "#define \fBCAN_Mode_Normal\fP   ((uint8_t)0x00)"
.br
.ti -1c
.RI "#define \fBCAN_Mode_LoopBack\fP   ((uint8_t)0x01)"
.br
.ti -1c
.RI "#define \fBCAN_Mode_Silent\fP   ((uint8_t)0x02)"
.br
.ti -1c
.RI "#define \fBCAN_Mode_Silent_LoopBack\fP   ((uint8_t)0x03)"
.br
.ti -1c
.RI "#define \fBIS_CAN_MODE\fP(MODE)"
.br
.ti -1c
.RI "#define \fBCAN_OperatingMode_Initialization\fP   ((uint8_t)0x00)"
.br
.ti -1c
.RI "#define \fBCAN_OperatingMode_Normal\fP   ((uint8_t)0x01)"
.br
.ti -1c
.RI "#define \fBCAN_OperatingMode_Sleep\fP   ((uint8_t)0x02)"
.br
.ti -1c
.RI "#define \fBIS_CAN_OPERATING_MODE\fP(MODE)"
.br
.ti -1c
.RI "#define \fBCAN_ModeStatus_Failed\fP   ((uint8_t)0x00)"
.br
.ti -1c
.RI "#define \fBCAN_ModeStatus_Success\fP   ((uint8_t)!\fBCAN_ModeStatus_Failed\fP)"
.br
.ti -1c
.RI "#define \fBCAN_SJW_1tq\fP   ((uint8_t)0x00)"
.br
.ti -1c
.RI "#define \fBCAN_SJW_2tq\fP   ((uint8_t)0x01)"
.br
.ti -1c
.RI "#define \fBCAN_SJW_3tq\fP   ((uint8_t)0x02)"
.br
.ti -1c
.RI "#define \fBCAN_SJW_4tq\fP   ((uint8_t)0x03)"
.br
.ti -1c
.RI "#define \fBIS_CAN_SJW\fP(SJW)"
.br
.ti -1c
.RI "#define \fBCAN_BS1_1tq\fP   ((uint8_t)0x00)"
.br
.ti -1c
.RI "#define \fBCAN_BS1_2tq\fP   ((uint8_t)0x01)"
.br
.ti -1c
.RI "#define \fBCAN_BS1_3tq\fP   ((uint8_t)0x02)"
.br
.ti -1c
.RI "#define \fBCAN_BS1_4tq\fP   ((uint8_t)0x03)"
.br
.ti -1c
.RI "#define \fBCAN_BS1_5tq\fP   ((uint8_t)0x04)"
.br
.ti -1c
.RI "#define \fBCAN_BS1_6tq\fP   ((uint8_t)0x05)"
.br
.ti -1c
.RI "#define \fBCAN_BS1_7tq\fP   ((uint8_t)0x06)"
.br
.ti -1c
.RI "#define \fBCAN_BS1_8tq\fP   ((uint8_t)0x07)"
.br
.ti -1c
.RI "#define \fBCAN_BS1_9tq\fP   ((uint8_t)0x08)"
.br
.ti -1c
.RI "#define \fBCAN_BS1_10tq\fP   ((uint8_t)0x09)"
.br
.ti -1c
.RI "#define \fBCAN_BS1_11tq\fP   ((uint8_t)0x0A)"
.br
.ti -1c
.RI "#define \fBCAN_BS1_12tq\fP   ((uint8_t)0x0B)"
.br
.ti -1c
.RI "#define \fBCAN_BS1_13tq\fP   ((uint8_t)0x0C)"
.br
.ti -1c
.RI "#define \fBCAN_BS1_14tq\fP   ((uint8_t)0x0D)"
.br
.ti -1c
.RI "#define \fBCAN_BS1_15tq\fP   ((uint8_t)0x0E)"
.br
.ti -1c
.RI "#define \fBCAN_BS1_16tq\fP   ((uint8_t)0x0F)"
.br
.ti -1c
.RI "#define \fBIS_CAN_BS1\fP(BS1)   ((BS1) <= \fBCAN_BS1_16tq\fP)"
.br
.ti -1c
.RI "#define \fBCAN_BS2_1tq\fP   ((uint8_t)0x00)"
.br
.ti -1c
.RI "#define \fBCAN_BS2_2tq\fP   ((uint8_t)0x01)"
.br
.ti -1c
.RI "#define \fBCAN_BS2_3tq\fP   ((uint8_t)0x02)"
.br
.ti -1c
.RI "#define \fBCAN_BS2_4tq\fP   ((uint8_t)0x03)"
.br
.ti -1c
.RI "#define \fBCAN_BS2_5tq\fP   ((uint8_t)0x04)"
.br
.ti -1c
.RI "#define \fBCAN_BS2_6tq\fP   ((uint8_t)0x05)"
.br
.ti -1c
.RI "#define \fBCAN_BS2_7tq\fP   ((uint8_t)0x06)"
.br
.ti -1c
.RI "#define \fBCAN_BS2_8tq\fP   ((uint8_t)0x07)"
.br
.ti -1c
.RI "#define \fBIS_CAN_BS2\fP(BS2)   ((BS2) <= \fBCAN_BS2_8tq\fP)"
.br
.ti -1c
.RI "#define \fBIS_CAN_PRESCALER\fP(PRESCALER)   (((PRESCALER) >= 1) && ((PRESCALER) <= 1024))"
.br
.ti -1c
.RI "#define \fBIS_CAN_FILTER_NUMBER\fP(NUMBER)   ((NUMBER) <= 13)"
.br
.ti -1c
.RI "#define \fBCAN_FilterMode_IdMask\fP   ((uint8_t)0x00)"
.br
.ti -1c
.RI "#define \fBCAN_FilterMode_IdList\fP   ((uint8_t)0x01)"
.br
.ti -1c
.RI "#define \fBIS_CAN_FILTER_MODE\fP(MODE)"
.br
.ti -1c
.RI "#define \fBCAN_FilterScale_16bit\fP   ((uint8_t)0x00)"
.br
.ti -1c
.RI "#define \fBCAN_FilterScale_32bit\fP   ((uint8_t)0x01)"
.br
.ti -1c
.RI "#define \fBIS_CAN_FILTER_SCALE\fP(SCALE)"
.br
.ti -1c
.RI "#define \fBCAN_Filter_FIFO0\fP   ((uint8_t)0x00)"
.br
.ti -1c
.RI "#define \fBCAN_Filter_FIFO1\fP   ((uint8_t)0x01)"
.br
.ti -1c
.RI "#define \fBIS_CAN_FILTER_FIFO\fP(FIFO)"
.br
.ti -1c
.RI "#define \fBIS_CAN_BANKNUMBER\fP(BANKNUMBER)   (((BANKNUMBER) >= 1) && ((BANKNUMBER) <= 27))"
.br
.ti -1c
.RI "#define \fBIS_CAN_TRANSMITMAILBOX\fP(TRANSMITMAILBOX)   ((TRANSMITMAILBOX) <= ((uint8_t)0x02))"
.br
.ti -1c
.RI "#define \fBIS_CAN_STDID\fP(STDID)   ((STDID) <= ((uint32_t)0x7FF))"
.br
.ti -1c
.RI "#define \fBIS_CAN_EXTID\fP(EXTID)   ((EXTID) <= ((uint32_t)0x1FFFFFFF))"
.br
.ti -1c
.RI "#define \fBIS_CAN_DLC\fP(DLC)   ((DLC) <= ((uint8_t)0x08))"
.br
.ti -1c
.RI "#define \fBCAN_Id_Standard\fP   ((uint32_t)0x00000000)"
.br
.ti -1c
.RI "#define \fBCAN_Id_Extended\fP   ((uint32_t)0x00000004)"
.br
.ti -1c
.RI "#define \fBIS_CAN_IDTYPE\fP(IDTYPE)"
.br
.ti -1c
.RI "#define \fBCAN_RTR_Data\fP   ((uint32_t)0x00000000)"
.br
.ti -1c
.RI "#define \fBCAN_RTR_Remote\fP   ((uint32_t)0x00000002)"
.br
.ti -1c
.RI "#define \fBIS_CAN_RTR\fP(RTR)   (((RTR) == \fBCAN_RTR_Data\fP) || ((RTR) == \fBCAN_RTR_Remote\fP))"
.br
.ti -1c
.RI "#define \fBCAN_TxStatus_Failed\fP   ((uint8_t)0x00)"
.br
.ti -1c
.RI "#define \fBCAN_TxStatus_Ok\fP   ((uint8_t)0x01)"
.br
.ti -1c
.RI "#define \fBCAN_TxStatus_Pending\fP   ((uint8_t)0x02)"
.br
.ti -1c
.RI "#define \fBCAN_TxStatus_NoMailBox\fP   ((uint8_t)0x04)"
.br
.ti -1c
.RI "#define \fBCAN_FIFO0\fP   ((uint8_t)0x00)"
.br
.ti -1c
.RI "#define \fBCAN_FIFO1\fP   ((uint8_t)0x01)"
.br
.ti -1c
.RI "#define \fBIS_CAN_FIFO\fP(FIFO)   (((FIFO) == \fBCAN_FIFO0\fP) || ((FIFO) == \fBCAN_FIFO1\fP))"
.br
.ti -1c
.RI "#define \fBCAN_Sleep_Failed\fP   ((uint8_t)0x00)"
.br
.ti -1c
.RI "#define \fBCAN_Sleep_Ok\fP   ((uint8_t)0x01)"
.br
.ti -1c
.RI "#define \fBCAN_WakeUp_Failed\fP   ((uint8_t)0x00)"
.br
.ti -1c
.RI "#define \fBCAN_WakeUp_Ok\fP   ((uint8_t)0x01)"
.br
.ti -1c
.RI "#define \fBCAN_ErrorCode_NoErr\fP   ((uint8_t)0x00)"
.br
.ti -1c
.RI "#define \fBCAN_ErrorCode_StuffErr\fP   ((uint8_t)0x10)"
.br
.ti -1c
.RI "#define \fBCAN_ErrorCode_FormErr\fP   ((uint8_t)0x20)"
.br
.ti -1c
.RI "#define \fBCAN_ErrorCode_ACKErr\fP   ((uint8_t)0x30)"
.br
.ti -1c
.RI "#define \fBCAN_ErrorCode_BitRecessiveErr\fP   ((uint8_t)0x40)"
.br
.ti -1c
.RI "#define \fBCAN_ErrorCode_BitDominantErr\fP   ((uint8_t)0x50)"
.br
.ti -1c
.RI "#define \fBCAN_ErrorCode_CRCErr\fP   ((uint8_t)0x60)"
.br
.ti -1c
.RI "#define \fBCAN_ErrorCode_SoftwareSetErr\fP   ((uint8_t)0x70)"
.br
.ti -1c
.RI "#define \fBCAN_FLAG_RQCP0\fP   ((uint32_t)0x38000001)"
.br
.ti -1c
.RI "#define \fBCAN_FLAG_RQCP1\fP   ((uint32_t)0x38000100)"
.br
.ti -1c
.RI "#define \fBCAN_FLAG_RQCP2\fP   ((uint32_t)0x38010000)"
.br
.ti -1c
.RI "#define \fBCAN_FLAG_FMP0\fP   ((uint32_t)0x12000003)"
.br
.ti -1c
.RI "#define \fBCAN_FLAG_FF0\fP   ((uint32_t)0x32000008)"
.br
.ti -1c
.RI "#define \fBCAN_FLAG_FOV0\fP   ((uint32_t)0x32000010)"
.br
.ti -1c
.RI "#define \fBCAN_FLAG_FMP1\fP   ((uint32_t)0x14000003)"
.br
.ti -1c
.RI "#define \fBCAN_FLAG_FF1\fP   ((uint32_t)0x34000008)"
.br
.ti -1c
.RI "#define \fBCAN_FLAG_FOV1\fP   ((uint32_t)0x34000010)"
.br
.ti -1c
.RI "#define \fBCAN_FLAG_WKU\fP   ((uint32_t)0x31000008)"
.br
.ti -1c
.RI "#define \fBCAN_FLAG_SLAK\fP   ((uint32_t)0x31000012)"
.br
.ti -1c
.RI "#define \fBCAN_FLAG_EWG\fP   ((uint32_t)0x10F00001)"
.br
.ti -1c
.RI "#define \fBCAN_FLAG_EPV\fP   ((uint32_t)0x10F00002)"
.br
.ti -1c
.RI "#define \fBCAN_FLAG_BOF\fP   ((uint32_t)0x10F00004)"
.br
.ti -1c
.RI "#define \fBCAN_FLAG_LEC\fP   ((uint32_t)0x30F00070)"
.br
.ti -1c
.RI "#define \fBIS_CAN_GET_FLAG\fP(FLAG)"
.br
.ti -1c
.RI "#define \fBIS_CAN_CLEAR_FLAG\fP(FLAG)"
.br
.ti -1c
.RI "#define \fBCAN_IT_TME\fP   ((uint32_t)0x00000001)"
.br
.ti -1c
.RI "#define \fBCAN_IT_FMP0\fP   ((uint32_t)0x00000002)"
.br
.ti -1c
.RI "#define \fBCAN_IT_FF0\fP   ((uint32_t)0x00000004)"
.br
.ti -1c
.RI "#define \fBCAN_IT_FOV0\fP   ((uint32_t)0x00000008)"
.br
.ti -1c
.RI "#define \fBCAN_IT_FMP1\fP   ((uint32_t)0x00000010)"
.br
.ti -1c
.RI "#define \fBCAN_IT_FF1\fP   ((uint32_t)0x00000020)"
.br
.ti -1c
.RI "#define \fBCAN_IT_FOV1\fP   ((uint32_t)0x00000040)"
.br
.ti -1c
.RI "#define \fBCAN_IT_WKU\fP   ((uint32_t)0x00010000)"
.br
.ti -1c
.RI "#define \fBCAN_IT_SLK\fP   ((uint32_t)0x00020000)"
.br
.ti -1c
.RI "#define \fBCAN_IT_EWG\fP   ((uint32_t)0x00000100)"
.br
.ti -1c
.RI "#define \fBCAN_IT_EPV\fP   ((uint32_t)0x00000200)"
.br
.ti -1c
.RI "#define \fBCAN_IT_BOF\fP   ((uint32_t)0x00000400)"
.br
.ti -1c
.RI "#define \fBCAN_IT_LEC\fP   ((uint32_t)0x00000800)"
.br
.ti -1c
.RI "#define \fBCAN_IT_ERR\fP   ((uint32_t)0x00008000)"
.br
.ti -1c
.RI "#define \fBCAN_IT_RQCP0\fP   \fBCAN_IT_TME\fP"
.br
.ti -1c
.RI "#define \fBCAN_IT_RQCP1\fP   \fBCAN_IT_TME\fP"
.br
.ti -1c
.RI "#define \fBCAN_IT_RQCP2\fP   \fBCAN_IT_TME\fP"
.br
.ti -1c
.RI "#define \fBIS_CAN_IT\fP(IT)"
.br
.ti -1c
.RI "#define \fBIS_CAN_CLEAR_IT\fP(IT)"
.br
.ti -1c
.RI "#define \fBCANINITFAILED\fP   \fBCAN_InitStatus_Failed\fP"
.br
.ti -1c
.RI "#define \fBCANINITOK\fP   \fBCAN_InitStatus_Success\fP"
.br
.ti -1c
.RI "#define \fBCAN_FilterFIFO0\fP   \fBCAN_Filter_FIFO0\fP"
.br
.ti -1c
.RI "#define \fBCAN_FilterFIFO1\fP   \fBCAN_Filter_FIFO1\fP"
.br
.ti -1c
.RI "#define \fBCAN_ID_STD\fP   \fBCAN_Id_Standard\fP"
.br
.ti -1c
.RI "#define \fBCAN_ID_EXT\fP   \fBCAN_Id_Extended\fP"
.br
.ti -1c
.RI "#define \fBCAN_RTR_DATA\fP   \fBCAN_RTR_Data\fP"
.br
.ti -1c
.RI "#define \fBCAN_RTR_REMOTE\fP   \fBCAN_RTR_Remote\fP"
.br
.ti -1c
.RI "#define \fBCANTXFAILE\fP   \fBCAN_TxStatus_Failed\fP"
.br
.ti -1c
.RI "#define \fBCANTXOK\fP   \fBCAN_TxStatus_Ok\fP"
.br
.ti -1c
.RI "#define \fBCANTXPENDING\fP   \fBCAN_TxStatus_Pending\fP"
.br
.ti -1c
.RI "#define \fBCAN_NO_MB\fP   \fBCAN_TxStatus_NoMailBox\fP"
.br
.ti -1c
.RI "#define \fBCANSLEEPFAILED\fP   \fBCAN_Sleep_Failed\fP"
.br
.ti -1c
.RI "#define \fBCANSLEEPOK\fP   \fBCAN_Sleep_Ok\fP"
.br
.ti -1c
.RI "#define \fBCANWAKEUPFAILED\fP   \fBCAN_WakeUp_Failed\fP"
.br
.ti -1c
.RI "#define \fBCANWAKEUPOK\fP   \fBCAN_WakeUp_Ok\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBCAN_DeInit\fP (\fBCAN_TypeDef\fP *CANx)"
.br
.RI "Deinitializes the CAN peripheral registers to their default reset values\&. "
.ti -1c
.RI "uint8_t \fBCAN_Init\fP (\fBCAN_TypeDef\fP *CANx, \fBCAN_InitTypeDef\fP *CAN_InitStruct)"
.br
.RI "Initializes the CAN peripheral according to the specified parameters in the CAN_InitStruct\&. "
.ti -1c
.RI "void \fBCAN_FilterInit\fP (\fBCAN_FilterInitTypeDef\fP *CAN_FilterInitStruct)"
.br
.RI "Initializes the CAN peripheral according to the specified parameters in the CAN_FilterInitStruct\&. "
.ti -1c
.RI "void \fBCAN_StructInit\fP (\fBCAN_InitTypeDef\fP *CAN_InitStruct)"
.br
.RI "Fills each CAN_InitStruct member with its default value\&. "
.ti -1c
.RI "void \fBCAN_SlaveStartBank\fP (uint8_t CAN_BankNumber)"
.br
.RI "Select the start bank filter for slave CAN\&. "
.ti -1c
.RI "void \fBCAN_DBGFreeze\fP (\fBCAN_TypeDef\fP *CANx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the DBG Freeze for CAN\&. "
.ti -1c
.RI "void \fBCAN_TTComModeCmd\fP (\fBCAN_TypeDef\fP *CANx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disabes the CAN Time TriggerOperation communication mode\&. "
.ti -1c
.RI "uint8_t \fBCAN_Transmit\fP (\fBCAN_TypeDef\fP *CANx, \fBCanTxMsg\fP *TxMessage)"
.br
.RI "Initiates the transmission of a message\&. "
.ti -1c
.RI "uint8_t \fBCAN_TransmitStatus\fP (\fBCAN_TypeDef\fP *CANx, uint8_t TransmitMailbox)"
.br
.RI "Checks the transmission of a message\&. "
.ti -1c
.RI "void \fBCAN_CancelTransmit\fP (\fBCAN_TypeDef\fP *CANx, uint8_t Mailbox)"
.br
.RI "Cancels a transmit request\&. "
.ti -1c
.RI "void \fBCAN_Receive\fP (\fBCAN_TypeDef\fP *CANx, uint8_t FIFONumber, \fBCanRxMsg\fP *RxMessage)"
.br
.RI "Receives a message\&. "
.ti -1c
.RI "void \fBCAN_FIFORelease\fP (\fBCAN_TypeDef\fP *CANx, uint8_t FIFONumber)"
.br
.RI "Releases the specified FIFO\&. "
.ti -1c
.RI "uint8_t \fBCAN_MessagePending\fP (\fBCAN_TypeDef\fP *CANx, uint8_t FIFONumber)"
.br
.RI "Returns the number of pending messages\&. "
.ti -1c
.RI "uint8_t \fBCAN_OperatingModeRequest\fP (\fBCAN_TypeDef\fP *CANx, uint8_t CAN_OperatingMode)"
.br
.RI "Select the CAN Operation mode\&. "
.ti -1c
.RI "uint8_t \fBCAN_Sleep\fP (\fBCAN_TypeDef\fP *CANx)"
.br
.RI "Enters the low power mode\&. "
.ti -1c
.RI "uint8_t \fBCAN_WakeUp\fP (\fBCAN_TypeDef\fP *CANx)"
.br
.RI "Wakes the CAN up\&. "
.ti -1c
.RI "uint8_t \fBCAN_GetLastErrorCode\fP (\fBCAN_TypeDef\fP *CANx)"
.br
.RI "Returns the CANx's last error code (LEC)\&. "
.ti -1c
.RI "uint8_t \fBCAN_GetReceiveErrorCounter\fP (\fBCAN_TypeDef\fP *CANx)"
.br
.RI "Returns the CANx Receive Error Counter (REC)\&. "
.ti -1c
.RI "uint8_t \fBCAN_GetLSBTransmitErrorCounter\fP (\fBCAN_TypeDef\fP *CANx)"
.br
.RI "Returns the LSB of the 9-bit CANx Transmit Error Counter(TEC)\&. "
.ti -1c
.RI "void \fBCAN_ITConfig\fP (\fBCAN_TypeDef\fP *CANx, uint32_t CAN_IT, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the specified CANx interrupts\&. "
.ti -1c
.RI "\fBFlagStatus\fP \fBCAN_GetFlagStatus\fP (\fBCAN_TypeDef\fP *CANx, uint32_t CAN_FLAG)"
.br
.RI "Checks whether the specified CAN flag is set or not\&. "
.ti -1c
.RI "void \fBCAN_ClearFlag\fP (\fBCAN_TypeDef\fP *CANx, uint32_t CAN_FLAG)"
.br
.RI "Clears the CAN's pending flags\&. "
.ti -1c
.RI "\fBITStatus\fP \fBCAN_GetITStatus\fP (\fBCAN_TypeDef\fP *CANx, uint32_t CAN_IT)"
.br
.RI "Checks whether the specified CANx interrupt has occurred or not\&. "
.ti -1c
.RI "void \fBCAN_ClearITPendingBit\fP (\fBCAN_TypeDef\fP *CANx, uint32_t CAN_IT)"
.br
.RI "Clears the CANx's interrupt pending bits\&. "
.in -1c
.SH "Detailed Description"
.PP 
This file contains all the functions prototypes for the CAN firmware library\&. 


.PP
\fBAuthor:\fP
.RS 4
MCD Application Team 
.RE
.PP
\fBVersion:\fP
.RS 4
V3\&.5\&.0 
.RE
.PP
\fBDate:\fP
.RS 4
11-March-2011 
.RE
.PP
\fBAttention:\fP
.RS 4
.RE
.PP
THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME\&. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS\&.
.PP
.SS "(C) COPYRIGHT 2011 STMicroelectronics"

.PP
Definition in file \fBstm32f10x_can\&.h\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for STM32_CMSIS from the source code\&.
