.TH "C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c" 3 "Sun Apr 16 2017" "STM32_CMSIS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/anilj/Desktop/cmsis/sorc/system/src/stm32f1-stdperiph/stm32f10x_usart.c \- This file provides all the USART firmware functions\&.  

.SH SYNOPSIS
.br
.PP
\fC#include 'stm32f10x_usart\&.h'\fP
.br
\fC#include 'stm32f10x_rcc\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCR1_UE_Set\fP   ((uint16_t)0x2000)"
.br
.ti -1c
.RI "#define \fBCR1_UE_Reset\fP   ((uint16_t)0xDFFF)"
.br
.ti -1c
.RI "#define \fBCR1_WAKE_Mask\fP   ((uint16_t)0xF7FF)"
.br
.ti -1c
.RI "#define \fBCR1_RWU_Set\fP   ((uint16_t)0x0002)"
.br
.ti -1c
.RI "#define \fBCR1_RWU_Reset\fP   ((uint16_t)0xFFFD)"
.br
.ti -1c
.RI "#define \fBCR1_SBK_Set\fP   ((uint16_t)0x0001)"
.br
.ti -1c
.RI "#define \fBCR1_CLEAR_Mask\fP   ((uint16_t)0xE9F3)"
.br
.ti -1c
.RI "#define \fBCR2_Address_Mask\fP   ((uint16_t)0xFFF0)"
.br
.ti -1c
.RI "#define \fBCR2_LINEN_Set\fP   ((uint16_t)0x4000)"
.br
.ti -1c
.RI "#define \fBCR2_LINEN_Reset\fP   ((uint16_t)0xBFFF)"
.br
.ti -1c
.RI "#define \fBCR2_LBDL_Mask\fP   ((uint16_t)0xFFDF)"
.br
.ti -1c
.RI "#define \fBCR2_STOP_CLEAR_Mask\fP   ((uint16_t)0xCFFF)"
.br
.ti -1c
.RI "#define \fBCR2_CLOCK_CLEAR_Mask\fP   ((uint16_t)0xF0FF)"
.br
.ti -1c
.RI "#define \fBCR3_SCEN_Set\fP   ((uint16_t)0x0020)"
.br
.ti -1c
.RI "#define \fBCR3_SCEN_Reset\fP   ((uint16_t)0xFFDF)"
.br
.ti -1c
.RI "#define \fBCR3_NACK_Set\fP   ((uint16_t)0x0010)"
.br
.ti -1c
.RI "#define \fBCR3_NACK_Reset\fP   ((uint16_t)0xFFEF)"
.br
.ti -1c
.RI "#define \fBCR3_HDSEL_Set\fP   ((uint16_t)0x0008)"
.br
.ti -1c
.RI "#define \fBCR3_HDSEL_Reset\fP   ((uint16_t)0xFFF7)"
.br
.ti -1c
.RI "#define \fBCR3_IRLP_Mask\fP   ((uint16_t)0xFFFB)"
.br
.ti -1c
.RI "#define \fBCR3_CLEAR_Mask\fP   ((uint16_t)0xFCFF)"
.br
.ti -1c
.RI "#define \fBCR3_IREN_Set\fP   ((uint16_t)0x0002)"
.br
.ti -1c
.RI "#define \fBCR3_IREN_Reset\fP   ((uint16_t)0xFFFD)"
.br
.ti -1c
.RI "#define \fBGTPR_LSB_Mask\fP   ((uint16_t)0x00FF)"
.br
.ti -1c
.RI "#define \fBGTPR_MSB_Mask\fP   ((uint16_t)0xFF00)"
.br
.ti -1c
.RI "#define \fBIT_Mask\fP   ((uint16_t)0x001F)"
.br
.ti -1c
.RI "#define \fBCR1_OVER8_Set\fP   ((\fBu16\fP)0x8000)  /* USART OVER8 mode Enable Mask */"
.br
.ti -1c
.RI "#define \fBCR1_OVER8_Reset\fP   ((\fBu16\fP)0x7FFF)  /* USART OVER8 mode Disable Mask */"
.br
.ti -1c
.RI "#define \fBCR3_ONEBITE_Set\fP   ((\fBu16\fP)0x0800)  /* USART ONEBITE mode Enable Mask */"
.br
.ti -1c
.RI "#define \fBCR3_ONEBITE_Reset\fP   ((\fBu16\fP)0xF7FF)  /* USART ONEBITE mode Disable Mask */"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBUSART_DeInit\fP (\fBUSART_TypeDef\fP *USARTx)"
.br
.RI "Deinitializes the USARTx peripheral registers to their default reset values\&. "
.ti -1c
.RI "void \fBUSART_Init\fP (\fBUSART_TypeDef\fP *USARTx, \fBUSART_InitTypeDef\fP *USART_InitStruct)"
.br
.RI "Initializes the USARTx peripheral according to the specified parameters in the USART_InitStruct \&. "
.ti -1c
.RI "void \fBUSART_StructInit\fP (\fBUSART_InitTypeDef\fP *USART_InitStruct)"
.br
.RI "Fills each USART_InitStruct member with its default value\&. "
.ti -1c
.RI "void \fBUSART_ClockInit\fP (\fBUSART_TypeDef\fP *USARTx, \fBUSART_ClockInitTypeDef\fP *USART_ClockInitStruct)"
.br
.RI "Initializes the USARTx peripheral Clock according to the specified parameters in the USART_ClockInitStruct \&. "
.ti -1c
.RI "void \fBUSART_ClockStructInit\fP (\fBUSART_ClockInitTypeDef\fP *USART_ClockInitStruct)"
.br
.RI "Fills each USART_ClockInitStruct member with its default value\&. "
.ti -1c
.RI "void \fBUSART_Cmd\fP (\fBUSART_TypeDef\fP *USARTx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the specified USART peripheral\&. "
.ti -1c
.RI "void \fBUSART_ITConfig\fP (\fBUSART_TypeDef\fP *USARTx, uint16_t USART_IT, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the specified USART interrupts\&. "
.ti -1c
.RI "void \fBUSART_DMACmd\fP (\fBUSART_TypeDef\fP *USARTx, uint16_t USART_DMAReq, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the USART�s DMA interface\&. "
.ti -1c
.RI "void \fBUSART_SetAddress\fP (\fBUSART_TypeDef\fP *USARTx, uint8_t USART_Address)"
.br
.RI "Sets the address of the USART node\&. "
.ti -1c
.RI "void \fBUSART_WakeUpConfig\fP (\fBUSART_TypeDef\fP *USARTx, uint16_t USART_WakeUp)"
.br
.RI "Selects the USART WakeUp method\&. "
.ti -1c
.RI "void \fBUSART_ReceiverWakeUpCmd\fP (\fBUSART_TypeDef\fP *USARTx, \fBFunctionalState\fP NewState)"
.br
.RI "Determines if the USART is in mute mode or not\&. "
.ti -1c
.RI "void \fBUSART_LINBreakDetectLengthConfig\fP (\fBUSART_TypeDef\fP *USARTx, uint16_t USART_LINBreakDetectLength)"
.br
.RI "Sets the USART LIN Break detection length\&. "
.ti -1c
.RI "void \fBUSART_LINCmd\fP (\fBUSART_TypeDef\fP *USARTx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the USART�s LIN mode\&. "
.ti -1c
.RI "void \fBUSART_SendData\fP (\fBUSART_TypeDef\fP *USARTx, uint16_t Data)"
.br
.RI "Transmits single data through the USARTx peripheral\&. "
.ti -1c
.RI "uint16_t \fBUSART_ReceiveData\fP (\fBUSART_TypeDef\fP *USARTx)"
.br
.RI "Returns the most recent received data by the USARTx peripheral\&. "
.ti -1c
.RI "void \fBUSART_SendBreak\fP (\fBUSART_TypeDef\fP *USARTx)"
.br
.RI "Transmits break characters\&. "
.ti -1c
.RI "void \fBUSART_SetGuardTime\fP (\fBUSART_TypeDef\fP *USARTx, uint8_t USART_GuardTime)"
.br
.RI "Sets the specified USART guard time\&. "
.ti -1c
.RI "void \fBUSART_SetPrescaler\fP (\fBUSART_TypeDef\fP *USARTx, uint8_t USART_Prescaler)"
.br
.RI "Sets the system clock prescaler\&. "
.ti -1c
.RI "void \fBUSART_SmartCardCmd\fP (\fBUSART_TypeDef\fP *USARTx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the USART�s Smart Card mode\&. "
.ti -1c
.RI "void \fBUSART_SmartCardNACKCmd\fP (\fBUSART_TypeDef\fP *USARTx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables NACK transmission\&. "
.ti -1c
.RI "void \fBUSART_HalfDuplexCmd\fP (\fBUSART_TypeDef\fP *USARTx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the USART�s Half Duplex communication\&. "
.ti -1c
.RI "void \fBUSART_OverSampling8Cmd\fP (\fBUSART_TypeDef\fP *USARTx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the USART's 8x oversampling mode\&. "
.ti -1c
.RI "void \fBUSART_OneBitMethodCmd\fP (\fBUSART_TypeDef\fP *USARTx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the USART's one bit sampling method\&. "
.ti -1c
.RI "void \fBUSART_IrDAConfig\fP (\fBUSART_TypeDef\fP *USARTx, uint16_t USART_IrDAMode)"
.br
.RI "Configures the USART's IrDA interface\&. "
.ti -1c
.RI "void \fBUSART_IrDACmd\fP (\fBUSART_TypeDef\fP *USARTx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the USART's IrDA interface\&. "
.ti -1c
.RI "\fBFlagStatus\fP \fBUSART_GetFlagStatus\fP (\fBUSART_TypeDef\fP *USARTx, uint16_t USART_FLAG)"
.br
.RI "Checks whether the specified USART flag is set or not\&. "
.ti -1c
.RI "void \fBUSART_ClearFlag\fP (\fBUSART_TypeDef\fP *USARTx, uint16_t USART_FLAG)"
.br
.RI "Clears the USARTx's pending flags\&. "
.ti -1c
.RI "\fBITStatus\fP \fBUSART_GetITStatus\fP (\fBUSART_TypeDef\fP *USARTx, uint16_t USART_IT)"
.br
.RI "Checks whether the specified USART interrupt has occurred or not\&. "
.ti -1c
.RI "void \fBUSART_ClearITPendingBit\fP (\fBUSART_TypeDef\fP *USARTx, uint16_t USART_IT)"
.br
.RI "Clears the USARTx's interrupt pending bits\&. "
.in -1c
.SH "Detailed Description"
.PP 
This file provides all the USART firmware functions\&. 


.PP
\fBAuthor:\fP
.RS 4
MCD Application Team 
.RE
.PP
\fBVersion:\fP
.RS 4
V3\&.5\&.0 
.RE
.PP
\fBDate:\fP
.RS 4
11-March-2011 
.RE
.PP
\fBAttention:\fP
.RS 4
.RE
.PP
THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME\&. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS\&.
.PP
.SS "(C) COPYRIGHT 2011 STMicroelectronics"

.PP
Definition in file \fBstm32f10x_usart\&.c\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for STM32_CMSIS from the source code\&.
