.TH "C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/core_cm0.h" 3 "Sun Apr 16 2017" "STM32_CMSIS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/Users/anilj/Desktop/cmsis/sorc/system/include/cmsis/core_cm0.h \- CMSIS Cortex-M0 Core Peripheral Access Layer Header File\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdint\&.h>\fP
.br
\fC#include 'core_cmInstr\&.h'\fP
.br
\fC#include 'core_cmFunc\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "union \fBAPSR_Type\fP"
.br
.RI "Union type to access the Application Program Status Register (APSR)\&. "
.ti -1c
.RI "union \fBIPSR_Type\fP"
.br
.RI "Union type to access the Interrupt Program Status Register (IPSR)\&. "
.ti -1c
.RI "union \fBxPSR_Type\fP"
.br
.RI "Union type to access the Special-Purpose Program Status Registers (xPSR)\&. "
.ti -1c
.RI "union \fBCONTROL_Type\fP"
.br
.RI "Union type to access the Control Registers (CONTROL)\&. "
.ti -1c
.RI "struct \fBNVIC_Type\fP"
.br
.RI "Structure type to access the Nested Vectored Interrupt Controller (NVIC)\&. "
.ti -1c
.RI "struct \fBSCB_Type\fP"
.br
.RI "Structure type to access the System Control Block (SCB)\&. "
.ti -1c
.RI "struct \fBSysTick_Type\fP"
.br
.RI "Structure type to access the System \fBTimer\fP (SysTick)\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fB__CORE_CM0_H_GENERIC\fP"
.br
.ti -1c
.RI "#define \fBAPSR_N_Pos\fP   31U"
.br
.ti -1c
.RI "#define \fBAPSR_N_Msk\fP   (1UL << APSR_N_Pos)"
.br
.ti -1c
.RI "#define \fBAPSR_Z_Pos\fP   30U"
.br
.ti -1c
.RI "#define \fBAPSR_Z_Msk\fP   (1UL << APSR_Z_Pos)"
.br
.ti -1c
.RI "#define \fBAPSR_C_Pos\fP   29U"
.br
.ti -1c
.RI "#define \fBAPSR_C_Msk\fP   (1UL << APSR_C_Pos)"
.br
.ti -1c
.RI "#define \fBAPSR_V_Pos\fP   28U"
.br
.ti -1c
.RI "#define \fBAPSR_V_Msk\fP   (1UL << APSR_V_Pos)"
.br
.ti -1c
.RI "#define \fBIPSR_ISR_Pos\fP   0U"
.br
.ti -1c
.RI "#define \fBIPSR_ISR_Msk\fP   (0x1FFUL /*<< IPSR_ISR_Pos*/)"
.br
.ti -1c
.RI "#define \fBxPSR_N_Pos\fP   31U"
.br
.ti -1c
.RI "#define \fBxPSR_N_Msk\fP   (1UL << xPSR_N_Pos)"
.br
.ti -1c
.RI "#define \fBxPSR_Z_Pos\fP   30U"
.br
.ti -1c
.RI "#define \fBxPSR_Z_Msk\fP   (1UL << xPSR_Z_Pos)"
.br
.ti -1c
.RI "#define \fBxPSR_C_Pos\fP   29U"
.br
.ti -1c
.RI "#define \fBxPSR_C_Msk\fP   (1UL << xPSR_C_Pos)"
.br
.ti -1c
.RI "#define \fBxPSR_V_Pos\fP   28U"
.br
.ti -1c
.RI "#define \fBxPSR_V_Msk\fP   (1UL << xPSR_V_Pos)"
.br
.ti -1c
.RI "#define \fBxPSR_T_Pos\fP   24U"
.br
.ti -1c
.RI "#define \fBxPSR_T_Msk\fP   (1UL << xPSR_T_Pos)"
.br
.ti -1c
.RI "#define \fBxPSR_ISR_Pos\fP   0U"
.br
.ti -1c
.RI "#define \fBxPSR_ISR_Msk\fP   (0x1FFUL /*<< xPSR_ISR_Pos*/)"
.br
.ti -1c
.RI "#define \fBCONTROL_SPSEL_Pos\fP   1U"
.br
.ti -1c
.RI "#define \fBCONTROL_SPSEL_Msk\fP   (1UL << CONTROL_SPSEL_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_CPUID_IMPLEMENTER_Pos\fP   24U"
.br
.ti -1c
.RI "#define \fBSCB_CPUID_IMPLEMENTER_Msk\fP   (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_CPUID_VARIANT_Pos\fP   20U"
.br
.ti -1c
.RI "#define \fBSCB_CPUID_VARIANT_Msk\fP   (0xFUL << SCB_CPUID_VARIANT_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_CPUID_ARCHITECTURE_Pos\fP   16U"
.br
.ti -1c
.RI "#define \fBSCB_CPUID_ARCHITECTURE_Msk\fP   (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_CPUID_PARTNO_Pos\fP   4U"
.br
.ti -1c
.RI "#define \fBSCB_CPUID_PARTNO_Msk\fP   (0xFFFUL << SCB_CPUID_PARTNO_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_CPUID_REVISION_Pos\fP   0U"
.br
.ti -1c
.RI "#define \fBSCB_CPUID_REVISION_Msk\fP   (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)"
.br
.ti -1c
.RI "#define \fBSCB_ICSR_NMIPENDSET_Pos\fP   31U"
.br
.ti -1c
.RI "#define \fBSCB_ICSR_NMIPENDSET_Msk\fP   (1UL << SCB_ICSR_NMIPENDSET_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_ICSR_PENDSVSET_Pos\fP   28U"
.br
.ti -1c
.RI "#define \fBSCB_ICSR_PENDSVSET_Msk\fP   (1UL << SCB_ICSR_PENDSVSET_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_ICSR_PENDSVCLR_Pos\fP   27U"
.br
.ti -1c
.RI "#define \fBSCB_ICSR_PENDSVCLR_Msk\fP   (1UL << SCB_ICSR_PENDSVCLR_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_ICSR_PENDSTSET_Pos\fP   26U"
.br
.ti -1c
.RI "#define \fBSCB_ICSR_PENDSTSET_Msk\fP   (1UL << SCB_ICSR_PENDSTSET_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_ICSR_PENDSTCLR_Pos\fP   25U"
.br
.ti -1c
.RI "#define \fBSCB_ICSR_PENDSTCLR_Msk\fP   (1UL << SCB_ICSR_PENDSTCLR_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_ICSR_ISRPREEMPT_Pos\fP   23U"
.br
.ti -1c
.RI "#define \fBSCB_ICSR_ISRPREEMPT_Msk\fP   (1UL << SCB_ICSR_ISRPREEMPT_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_ICSR_ISRPENDING_Pos\fP   22U"
.br
.ti -1c
.RI "#define \fBSCB_ICSR_ISRPENDING_Msk\fP   (1UL << SCB_ICSR_ISRPENDING_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_ICSR_VECTPENDING_Pos\fP   12U"
.br
.ti -1c
.RI "#define \fBSCB_ICSR_VECTPENDING_Msk\fP   (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_ICSR_VECTACTIVE_Pos\fP   0U"
.br
.ti -1c
.RI "#define \fBSCB_ICSR_VECTACTIVE_Msk\fP   (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)"
.br
.ti -1c
.RI "#define \fBSCB_AIRCR_VECTKEY_Pos\fP   16U"
.br
.ti -1c
.RI "#define \fBSCB_AIRCR_VECTKEY_Msk\fP   (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_AIRCR_VECTKEYSTAT_Pos\fP   16U"
.br
.ti -1c
.RI "#define \fBSCB_AIRCR_VECTKEYSTAT_Msk\fP   (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_AIRCR_ENDIANESS_Pos\fP   15U"
.br
.ti -1c
.RI "#define \fBSCB_AIRCR_ENDIANESS_Msk\fP   (1UL << SCB_AIRCR_ENDIANESS_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_AIRCR_SYSRESETREQ_Pos\fP   2U"
.br
.ti -1c
.RI "#define \fBSCB_AIRCR_SYSRESETREQ_Msk\fP   (1UL << SCB_AIRCR_SYSRESETREQ_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_AIRCR_VECTCLRACTIVE_Pos\fP   1U"
.br
.ti -1c
.RI "#define \fBSCB_AIRCR_VECTCLRACTIVE_Msk\fP   (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_SCR_SEVONPEND_Pos\fP   4U"
.br
.ti -1c
.RI "#define \fBSCB_SCR_SEVONPEND_Msk\fP   (1UL << SCB_SCR_SEVONPEND_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_SCR_SLEEPDEEP_Pos\fP   2U"
.br
.ti -1c
.RI "#define \fBSCB_SCR_SLEEPDEEP_Msk\fP   (1UL << SCB_SCR_SLEEPDEEP_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_SCR_SLEEPONEXIT_Pos\fP   1U"
.br
.ti -1c
.RI "#define \fBSCB_SCR_SLEEPONEXIT_Msk\fP   (1UL << SCB_SCR_SLEEPONEXIT_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_CCR_STKALIGN_Pos\fP   9U"
.br
.ti -1c
.RI "#define \fBSCB_CCR_STKALIGN_Msk\fP   (1UL << SCB_CCR_STKALIGN_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_CCR_UNALIGN_TRP_Pos\fP   3U"
.br
.ti -1c
.RI "#define \fBSCB_CCR_UNALIGN_TRP_Msk\fP   (1UL << SCB_CCR_UNALIGN_TRP_Pos)"
.br
.ti -1c
.RI "#define \fBSCB_SHCSR_SVCALLPENDED_Pos\fP   15U"
.br
.ti -1c
.RI "#define \fBSCB_SHCSR_SVCALLPENDED_Msk\fP   (1UL << SCB_SHCSR_SVCALLPENDED_Pos)"
.br
.ti -1c
.RI "#define \fBSysTick_CTRL_COUNTFLAG_Pos\fP   16U"
.br
.ti -1c
.RI "#define \fBSysTick_CTRL_COUNTFLAG_Msk\fP   (1UL << SysTick_CTRL_COUNTFLAG_Pos)"
.br
.ti -1c
.RI "#define \fBSysTick_CTRL_CLKSOURCE_Pos\fP   2U"
.br
.ti -1c
.RI "#define \fBSysTick_CTRL_CLKSOURCE_Msk\fP   (1UL << SysTick_CTRL_CLKSOURCE_Pos)"
.br
.ti -1c
.RI "#define \fBSysTick_CTRL_TICKINT_Pos\fP   1U"
.br
.ti -1c
.RI "#define \fBSysTick_CTRL_TICKINT_Msk\fP   (1UL << SysTick_CTRL_TICKINT_Pos)"
.br
.ti -1c
.RI "#define \fBSysTick_CTRL_ENABLE_Pos\fP   0U"
.br
.ti -1c
.RI "#define \fBSysTick_CTRL_ENABLE_Msk\fP   (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)"
.br
.ti -1c
.RI "#define \fBSysTick_LOAD_RELOAD_Pos\fP   0U"
.br
.ti -1c
.RI "#define \fBSysTick_LOAD_RELOAD_Msk\fP   (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)"
.br
.ti -1c
.RI "#define \fBSysTick_VAL_CURRENT_Pos\fP   0U"
.br
.ti -1c
.RI "#define \fBSysTick_VAL_CURRENT_Msk\fP   (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)"
.br
.ti -1c
.RI "#define \fBSysTick_CALIB_NOREF_Pos\fP   31U"
.br
.ti -1c
.RI "#define \fBSysTick_CALIB_NOREF_Msk\fP   (1UL << SysTick_CALIB_NOREF_Pos)"
.br
.ti -1c
.RI "#define \fBSysTick_CALIB_SKEW_Pos\fP   30U"
.br
.ti -1c
.RI "#define \fBSysTick_CALIB_SKEW_Msk\fP   (1UL << SysTick_CALIB_SKEW_Pos)"
.br
.ti -1c
.RI "#define \fBSysTick_CALIB_TENMS_Pos\fP   0U"
.br
.ti -1c
.RI "#define \fBSysTick_CALIB_TENMS_Msk\fP   (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)"
.br
.ti -1c
.RI "#define \fB_VAL2FLD\fP(field,  \fBvalue\fP)   ((\fBvalue\fP << field ## _Pos) & field ## _Msk)"
.br
.RI "Mask and shift a bit field value for use in a register bit range\&. "
.ti -1c
.RI "#define \fB_FLD2VAL\fP(field,  \fBvalue\fP)   ((\fBvalue\fP & field ## _Msk) >> field ## _Pos)"
.br
.RI "Mask and shift a register value to extract a bit filed value\&. "
.ti -1c
.RI "#define \fBSCS_BASE\fP   (0xE000E000UL)"
.br
.ti -1c
.RI "#define \fBSysTick_BASE\fP   (\fBSCS_BASE\fP +  0x0010UL)"
.br
.ti -1c
.RI "#define \fBNVIC_BASE\fP   (\fBSCS_BASE\fP +  0x0100UL)"
.br
.ti -1c
.RI "#define \fBSCB_BASE\fP   (\fBSCS_BASE\fP +  0x0D00UL)"
.br
.ti -1c
.RI "#define \fBSCB\fP   ((\fBSCB_Type\fP       *)     \fBSCB_BASE\fP      )"
.br
.ti -1c
.RI "#define \fBSysTick\fP   ((\fBSysTick_Type\fP   *)     \fBSysTick_BASE\fP  )"
.br
.ti -1c
.RI "#define \fBNVIC\fP   ((\fBNVIC_Type\fP      *)     \fBNVIC_BASE\fP     )"
.br
.ti -1c
.RI "#define \fB_BIT_SHIFT\fP(\fBIRQn\fP)   (  ((((uint32_t)(int32_t)(\fBIRQn\fP))         )      &  0x03UL) * 8UL)"
.br
.ti -1c
.RI "#define \fB_SHP_IDX\fP(\fBIRQn\fP)   ( (((((uint32_t)(int32_t)(\fBIRQn\fP)) & 0x0FUL)\-8UL) >>    2UL)      )"
.br
.ti -1c
.RI "#define \fB_IP_IDX\fP(\fBIRQn\fP)   (   (((uint32_t)(int32_t)(\fBIRQn\fP))                >>    2UL)      )"
.br
.in -1c
.PP
.RI "\fB\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "#define \fB__CM0_CMSIS_VERSION_MAIN\fP   (0x04U)"
.br
.ti -1c
.RI "#define \fB__CM0_CMSIS_VERSION_SUB\fP   (0x1EU)"
.br
.ti -1c
.RI "#define \fB__CM0_CMSIS_VERSION\fP"
.br
.ti -1c
.RI "#define \fB__CORTEX_M\fP   (0x00U)"
.br
.ti -1c
.RI "#define \fB__FPU_USED\fP   0U"
.br
.ti -1c
.RI "#define \fB__CORE_CM0_H_DEPENDANT\fP"
.br
.ti -1c
.RI "#define \fB__I\fP   \fBvolatile\fP const"
.br
.ti -1c
.RI "#define \fB__O\fP   \fBvolatile\fP"
.br
.ti -1c
.RI "#define \fB__IO\fP   \fBvolatile\fP"
.br
.ti -1c
.RI "#define \fB__IM\fP   \fBvolatile\fP const      /*! Defines 'read only' structure member permissions */"
.br
.ti -1c
.RI "#define \fB__OM\fP   \fBvolatile\fP            /*! Defines 'write only' structure member permissions */"
.br
.ti -1c
.RI "#define \fB__IOM\fP   \fBvolatile\fP            /*! Defines 'read / write' structure member permissions */"
.br
.in -1c
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "__STATIC_INLINE void \fBNVIC_EnableIRQ\fP (\fBIRQn_Type\fP \fBIRQn\fP)"
.br
.RI "Enable External Interrupt\&. "
.ti -1c
.RI "__STATIC_INLINE void \fBNVIC_DisableIRQ\fP (\fBIRQn_Type\fP \fBIRQn\fP)"
.br
.RI "Disable External Interrupt\&. "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBNVIC_GetPendingIRQ\fP (\fBIRQn_Type\fP \fBIRQn\fP)"
.br
.RI "Get Pending Interrupt\&. "
.ti -1c
.RI "__STATIC_INLINE void \fBNVIC_SetPendingIRQ\fP (\fBIRQn_Type\fP \fBIRQn\fP)"
.br
.RI "Set Pending Interrupt\&. "
.ti -1c
.RI "__STATIC_INLINE void \fBNVIC_ClearPendingIRQ\fP (\fBIRQn_Type\fP \fBIRQn\fP)"
.br
.RI "Clear Pending Interrupt\&. "
.ti -1c
.RI "__STATIC_INLINE void \fBNVIC_SetPriority\fP (\fBIRQn_Type\fP \fBIRQn\fP, uint32_t priority)"
.br
.RI "Set Interrupt Priority\&. "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBNVIC_GetPriority\fP (\fBIRQn_Type\fP \fBIRQn\fP)"
.br
.RI "Get Interrupt Priority\&. "
.ti -1c
.RI "__STATIC_INLINE void \fBNVIC_SystemReset\fP (void)"
.br
.RI "System Reset\&. "
.ti -1c
.RI "__STATIC_INLINE uint32_t \fBSysTick_Config\fP (uint32_t ticks)"
.br
.RI "System Tick Configuration\&. "
.in -1c
.SH "Detailed Description"
.PP 
CMSIS Cortex-M0 Core Peripheral Access Layer Header File\&. 


.PP
\fBVersion:\fP
.RS 4
V4\&.30 
.RE
.PP
\fBDate:\fP
.RS 4
20\&. October 2015 
.RE
.PP

.PP
Definition in file \fBcore_cm0\&.h\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define __CM0_CMSIS_VERSION"
\fBValue:\fP
.PP
.nf
((__CM0_CMSIS_VERSION_MAIN << 16U) | \
                                    __CM0_CMSIS_VERSION_SUB           )
.fi
CMSIS HAL version number 
.PP
Definition at line 84 of file core_cm0\&.h\&.
.SS "#define __CM0_CMSIS_VERSION_MAIN   (0x04U)"
[31:16] CMSIS HAL main version 
.PP
Definition at line 82 of file core_cm0\&.h\&.
.SS "#define __CM0_CMSIS_VERSION_SUB   (0x1EU)"
[15:0] CMSIS HAL sub version 
.PP
Definition at line 83 of file core_cm0\&.h\&.
.SS "#define __CORE_CM0_H_DEPENDANT"

.PP
Definition at line 183 of file core_cm0\&.h\&.
.SS "#define __CORE_CM0_H_GENERIC"

.PP
Definition at line 42 of file core_cm0\&.h\&.
.SS "#define __CORTEX_M   (0x00U)"
Cortex-M Core 
.PP
Definition at line 87 of file core_cm0\&.h\&.
.SS "#define __FPU_USED   0U"
__FPU_USED indicates whether an FPU is used or not\&. This core does not support an FPU at all 
.PP
Definition at line 132 of file core_cm0\&.h\&.
.SS "#define __I   \fBvolatile\fP const"
Defines 'read only' permissions 
.PP
Definition at line 218 of file core_cm0\&.h\&.
.SS "#define __IM   \fBvolatile\fP const      /*! Defines 'read only' structure member permissions */"

.PP
Definition at line 224 of file core_cm0\&.h\&.
.SS "#define __IO   \fBvolatile\fP"
Defines 'read / write' permissions 
.PP
Definition at line 221 of file core_cm0\&.h\&.
.SS "#define __IOM   \fBvolatile\fP            /*! Defines 'read / write' structure member permissions */"

.PP
Definition at line 226 of file core_cm0\&.h\&.
.SS "#define __O   \fBvolatile\fP"
Defines 'write only' permissions 
.PP
Definition at line 220 of file core_cm0\&.h\&.
.SS "#define __OM   \fBvolatile\fP            /*! Defines 'write only' structure member permissions */"

.PP
Definition at line 225 of file core_cm0\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for STM32_CMSIS from the source code\&.
