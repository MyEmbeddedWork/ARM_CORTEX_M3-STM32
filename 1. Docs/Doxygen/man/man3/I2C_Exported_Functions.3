.TH "I2C_Exported_Functions" 3 "Sun Apr 16 2017" "STM32_CMSIS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
I2C_Exported_Functions
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBI2C_DeInit\fP (\fBI2C_TypeDef\fP *I2Cx)"
.br
.RI "Deinitializes the I2Cx peripheral registers to their default reset values\&. "
.ti -1c
.RI "void \fBI2C_Init\fP (\fBI2C_TypeDef\fP *I2Cx, \fBI2C_InitTypeDef\fP *I2C_InitStruct)"
.br
.RI "Initializes the I2Cx peripheral according to the specified parameters in the I2C_InitStruct\&. "
.ti -1c
.RI "void \fBI2C_StructInit\fP (\fBI2C_InitTypeDef\fP *I2C_InitStruct)"
.br
.RI "Fills each I2C_InitStruct member with its default value\&. "
.ti -1c
.RI "void \fBI2C_Cmd\fP (\fBI2C_TypeDef\fP *I2Cx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the specified I2C peripheral\&. "
.ti -1c
.RI "void \fBI2C_DMACmd\fP (\fBI2C_TypeDef\fP *I2Cx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the specified I2C DMA requests\&. "
.ti -1c
.RI "void \fBI2C_DMALastTransferCmd\fP (\fBI2C_TypeDef\fP *I2Cx, \fBFunctionalState\fP NewState)"
.br
.RI "Specifies if the next DMA transfer will be the last one\&. "
.ti -1c
.RI "void \fBI2C_GenerateSTART\fP (\fBI2C_TypeDef\fP *I2Cx, \fBFunctionalState\fP NewState)"
.br
.RI "Generates I2Cx communication START condition\&. "
.ti -1c
.RI "void \fBI2C_GenerateSTOP\fP (\fBI2C_TypeDef\fP *I2Cx, \fBFunctionalState\fP NewState)"
.br
.RI "Generates I2Cx communication STOP condition\&. "
.ti -1c
.RI "void \fBI2C_AcknowledgeConfig\fP (\fBI2C_TypeDef\fP *I2Cx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the specified I2C acknowledge feature\&. "
.ti -1c
.RI "void \fBI2C_OwnAddress2Config\fP (\fBI2C_TypeDef\fP *I2Cx, uint8_t Address)"
.br
.RI "Configures the specified I2C own address2\&. "
.ti -1c
.RI "void \fBI2C_DualAddressCmd\fP (\fBI2C_TypeDef\fP *I2Cx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the specified I2C dual addressing mode\&. "
.ti -1c
.RI "void \fBI2C_GeneralCallCmd\fP (\fBI2C_TypeDef\fP *I2Cx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the specified I2C general call feature\&. "
.ti -1c
.RI "void \fBI2C_ITConfig\fP (\fBI2C_TypeDef\fP *I2Cx, uint16_t I2C_IT, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the specified I2C interrupts\&. "
.ti -1c
.RI "void \fBI2C_SendData\fP (\fBI2C_TypeDef\fP *I2Cx, uint8_t Data)"
.br
.RI "Sends a data byte through the I2Cx peripheral\&. "
.ti -1c
.RI "uint8_t \fBI2C_ReceiveData\fP (\fBI2C_TypeDef\fP *I2Cx)"
.br
.RI "Returns the most recent received data by the I2Cx peripheral\&. "
.ti -1c
.RI "void \fBI2C_Send7bitAddress\fP (\fBI2C_TypeDef\fP *I2Cx, uint8_t Address, uint8_t I2C_Direction)"
.br
.RI "Transmits the address byte to select the slave device\&. "
.ti -1c
.RI "uint16_t \fBI2C_ReadRegister\fP (\fBI2C_TypeDef\fP *I2Cx, uint8_t I2C_Register)"
.br
.RI "Reads the specified I2C register and returns its value\&. "
.ti -1c
.RI "void \fBI2C_SoftwareResetCmd\fP (\fBI2C_TypeDef\fP *I2Cx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the specified I2C software reset\&. "
.ti -1c
.RI "void \fBI2C_NACKPositionConfig\fP (\fBI2C_TypeDef\fP *I2Cx, uint16_t I2C_NACKPosition)"
.br
.RI "Selects the specified I2C NACK position in master receiver mode\&. This function is useful in I2C Master Receiver mode when the number of data to be received is equal to 2\&. In this case, this function should be called (with parameter I2C_NACKPosition_Next) before data reception starts,as described in the 2-byte reception procedure recommended in Reference Manual in Section: Master receiver\&. "
.ti -1c
.RI "void \fBI2C_SMBusAlertConfig\fP (\fBI2C_TypeDef\fP *I2Cx, uint16_t I2C_SMBusAlert)"
.br
.RI "Drives the SMBusAlert pin high or low for the specified I2C\&. "
.ti -1c
.RI "void \fBI2C_TransmitPEC\fP (\fBI2C_TypeDef\fP *I2Cx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the specified I2C PEC transfer\&. "
.ti -1c
.RI "void \fBI2C_PECPositionConfig\fP (\fBI2C_TypeDef\fP *I2Cx, uint16_t I2C_PECPosition)"
.br
.RI "Selects the specified I2C PEC position\&. "
.ti -1c
.RI "void \fBI2C_CalculatePEC\fP (\fBI2C_TypeDef\fP *I2Cx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the PEC value calculation of the transferred bytes\&. "
.ti -1c
.RI "uint8_t \fBI2C_GetPEC\fP (\fBI2C_TypeDef\fP *I2Cx)"
.br
.RI "Returns the PEC value for the specified I2C\&. "
.ti -1c
.RI "void \fBI2C_ARPCmd\fP (\fBI2C_TypeDef\fP *I2Cx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the specified I2C ARP\&. "
.ti -1c
.RI "void \fBI2C_StretchClockCmd\fP (\fBI2C_TypeDef\fP *I2Cx, \fBFunctionalState\fP NewState)"
.br
.RI "Enables or disables the specified I2C Clock stretching\&. "
.ti -1c
.RI "void \fBI2C_FastModeDutyCycleConfig\fP (\fBI2C_TypeDef\fP *I2Cx, uint16_t I2C_DutyCycle)"
.br
.RI "Selects the specified I2C fast mode duty cycle\&. "
.ti -1c
.RI "\fBErrorStatus\fP \fBI2C_CheckEvent\fP (\fBI2C_TypeDef\fP *I2Cx, uint32_t I2C_EVENT)"
.br
.RI "I2C State Monitoring Functions\&. "
.ti -1c
.RI "uint32_t \fBI2C_GetLastEvent\fP (\fBI2C_TypeDef\fP *I2Cx)"
.br
.RI "Returns the last I2Cx Event\&. "
.ti -1c
.RI "\fBFlagStatus\fP \fBI2C_GetFlagStatus\fP (\fBI2C_TypeDef\fP *I2Cx, uint32_t I2C_FLAG)"
.br
.RI "Checks whether the specified I2C flag is set or not\&. "
.ti -1c
.RI "void \fBI2C_ClearFlag\fP (\fBI2C_TypeDef\fP *I2Cx, uint32_t I2C_FLAG)"
.br
.RI "Clears the I2Cx's pending flags\&. "
.ti -1c
.RI "\fBITStatus\fP \fBI2C_GetITStatus\fP (\fBI2C_TypeDef\fP *I2Cx, uint32_t I2C_IT)"
.br
.RI "Checks whether the specified I2C interrupt has occurred or not\&. "
.ti -1c
.RI "void \fBI2C_ClearITPendingBit\fP (\fBI2C_TypeDef\fP *I2Cx, uint32_t I2C_IT)"
.br
.RI "Clears the I2Cxï¿½s interrupt pending bits\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SH "Function Documentation"
.PP 
.SS "void I2C_AcknowledgeConfig (\fBI2C_TypeDef\fP * I2Cx, \fBFunctionalState\fP NewState)"

.PP
Enables or disables the specified I2C acknowledge feature\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fINewState\fP new state of the I2C Acknowledgement\&. This parameter can be: ENABLE or DISABLE\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\&.\fP 
.RE
.PP

.PP
Definition at line 455 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_ARPCmd (\fBI2C_TypeDef\fP * I2Cx, \fBFunctionalState\fP NewState)"

.PP
Enables or disables the specified I2C ARP\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fINewState\fP new state of the I2Cx ARP\&. This parameter can be: ENABLE or DISABLE\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
Definition at line 883 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_CalculatePEC (\fBI2C_TypeDef\fP * I2Cx, \fBFunctionalState\fP NewState)"

.PP
Enables or disables the PEC value calculation of the transferred bytes\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fINewState\fP new state of the I2Cx PEC value calculation\&. This parameter can be: ENABLE or DISABLE\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
Definition at line 836 of file stm32f10x_i2c\&.c\&.
.SS "\fBErrorStatus\fP I2C_CheckEvent (\fBI2C_TypeDef\fP * I2Cx, uint32_t I2C_EVENT)"

.PP
I2C State Monitoring Functions\&. This I2C driver provides three different ways for I2C state monitoring depending on the application requirements and constraints:
.PP
1) Basic state monitoring: Using \fBI2C_CheckEvent()\fP function: It compares the status registers (SR1 and SR2) content to a given event (can be the combination of one or more flags)\&. It returns SUCCESS if the current status includes the given flags and returns ERROR if one or more flags are missing in the current status\&.
.IP "\(bu" 2
When to use:
.IP "  \(bu" 4
This function is suitable for most applications as well as for startup activity since the events are fully described in the product reference manual (RM0008)\&.
.IP "  \(bu" 4
It is also suitable for users who need to define their own events\&.
.PP

.IP "\(bu" 2
Limitations:
.IP "  \(bu" 4
If an error occurs (ie\&. error flags are set besides to the monitored flags), the \fBI2C_CheckEvent()\fP function may return SUCCESS despite the communication hold or corrupted real state\&. In this case, it is advised to use error interrupts to monitor the error events and handle them in the interrupt IRQ handler\&.
.PP
\fBNote:\fP
.RS 4
For error management, it is advised to use the following functions:
.IP "    \(bu" 6
\fBI2C_ITConfig()\fP to configure and enable the error interrupts (I2C_IT_ERR)\&.
.IP "    \(bu" 6
I2Cx_ER_IRQHandler() which is called when the error interrupt occurs\&. Where x is the peripheral instance (I2C1, I2C2 \&.\&.\&.)
.IP "    \(bu" 6
\fBI2C_GetFlagStatus()\fP or \fBI2C_GetITStatus()\fP to be called into I2Cx_ER_IRQHandler() in order to determine which error occurred\&.
.IP "    \(bu" 6
\fBI2C_ClearFlag()\fP or \fBI2C_ClearITPendingBit()\fP and/or \fBI2C_SoftwareResetCmd()\fP and/or I2C_GenerateStop() in order to clear the error flag and source, and return to correct communication status\&.
.PP
.RE
.PP
2) Advanced state monitoring: Using the function \fBI2C_GetLastEvent()\fP which returns the image of both status registers in a single word (uint32_t) (Status Register 2 value is shifted left by 16 bits and concatenated to Status Register 1)\&.
.PP

.PP
.PP
When to use:
.IP "\(bu" 2
This function is suitable for the same applications above but it allows to overcome the limitations of \fBI2C_GetFlagStatus()\fP function (see below)\&. The returned value could be compared to events already defined in the library (\fBstm32f10x_i2c\&.h\fP) or to custom values defined by user\&.
.IP "\(bu" 2
This function is suitable when multiple flags are monitored at the same time\&.
.IP "\(bu" 2
At the opposite of \fBI2C_CheckEvent()\fP function, this function allows user to choose when an event is accepted (when all events flags are set and no other flags are set or just when the needed flags are set like \fBI2C_CheckEvent()\fP function)\&.
.PP
.PP
Limitations:
.IP "\(bu" 2
User may need to define his own events\&.
.IP "\(bu" 2
Same remark concerning the error management is applicable for this function if user decides to check only regular communication flags (and ignores error flags)\&.
.PP
.PP
3) Flag-based state monitoring: Using the function \fBI2C_GetFlagStatus()\fP which simply returns the status of one single flag (ie\&. I2C_FLAG_RXNE \&.\&.\&.)\&.
.IP "\(bu" 2
When to use:
.IP "  \(bu" 4
This function could be used for specific applications or in debug phase\&.
.IP "  \(bu" 4
It is suitable when only one flag checking is needed (most I2C events are monitored through multiple flags)\&.
.PP

.IP "\(bu" 2
Limitations:
.IP "  \(bu" 4
When calling this function, the Status register is accessed\&. Some flags are cleared when the status register is accessed\&. So checking the status of one Flag, may clear other ones\&.
.IP "  \(bu" 4
Function may need to be called twice or more in order to monitor one single event\&.
.PP

.PP
.PP
1) Basic state monitoring
.PP
This I2C driver provides three different ways for I2C state monitoring depending on the application requirements and constraints:
.PP
1) Basic state monitoring: Using \fBI2C_CheckEvent()\fP function: It compares the status registers (SR1 and SR2) content to a given event (can be the combination of one or more flags)\&. It returns SUCCESS if the current status includes the given flags and returns ERROR if one or more flags are missing in the current status\&.
.IP "\(bu" 2
When to use:
.IP "  \(bu" 4
This function is suitable for most applications as well as for startup activity since the events are fully described in the product reference manual (RM0008)\&.
.IP "  \(bu" 4
It is also suitable for users who need to define their own events\&.
.PP

.IP "\(bu" 2
Limitations:
.IP "  \(bu" 4
If an error occurs (ie\&. error flags are set besides to the monitored flags), the \fBI2C_CheckEvent()\fP function may return SUCCESS despite the communication hold or corrupted real state\&. In this case, it is advised to use error interrupts to monitor the error events and handle them in the interrupt IRQ handler\&.
.PP
\fBNote:\fP
.RS 4
For error management, it is advised to use the following functions:
.IP "    \(bu" 6
\fBI2C_ITConfig()\fP to configure and enable the error interrupts (I2C_IT_ERR)\&.
.IP "    \(bu" 6
I2Cx_ER_IRQHandler() which is called when the error interrupt occurs\&. Where x is the peripheral instance (I2C1, I2C2 \&.\&.\&.)
.IP "    \(bu" 6
\fBI2C_GetFlagStatus()\fP or \fBI2C_GetITStatus()\fP to be called into I2Cx_ER_IRQHandler() in order to determine which error occured\&.
.IP "    \(bu" 6
\fBI2C_ClearFlag()\fP or \fBI2C_ClearITPendingBit()\fP and/or \fBI2C_SoftwareResetCmd()\fP and/or I2C_GenerateStop() in order to clear the error flag and source, and return to correct communication status\&.
.PP
.RE
.PP
2) Advanced state monitoring: Using the function \fBI2C_GetLastEvent()\fP which returns the image of both status registers in a single word (uint32_t) (Status Register 2 value is shifted left by 16 bits and concatenated to Status Register 1)\&.
.PP

.PP
.PP
When to use:
.IP "\(bu" 2
This function is suitable for the same applications above but it allows to overcome the mentioned limitation of \fBI2C_GetFlagStatus()\fP function\&. The returned value could be compared to events already defined in the library (\fBstm32f10x_i2c\&.h\fP) or to custom values defined by user\&.
.IP "\(bu" 2
This function is suitable when multiple flags are monitored at the same time\&.
.IP "\(bu" 2
At the opposite of \fBI2C_CheckEvent()\fP function, this function allows user to choose when an event is accepted (when all events flags are set and no other flags are set or just when the needed flags are set like \fBI2C_CheckEvent()\fP function)\&.
.PP
.PP
Limitations:
.IP "\(bu" 2
User may need to define his own events\&.
.IP "\(bu" 2
Same remark concerning the error management is applicable for this function if user decides to check only regular communication flags (and ignores error flags)\&.
.PP
.PP
3) Flag-based state monitoring: Using the function \fBI2C_GetFlagStatus()\fP which simply returns the status of one single flag (ie\&. I2C_FLAG_RXNE \&.\&.\&.)\&.
.IP "\(bu" 2
When to use:
.IP "  \(bu" 4
This function could be used for specific applications or in debug phase\&.
.IP "  \(bu" 4
It is suitable when only one flag checking is needed (most I2C events are monitored through multiple flags)\&.
.PP

.IP "\(bu" 2
Limitations:
.IP "  \(bu" 4
When calling this function, the Status register is accessed\&. Some flags are cleared when the status register is accessed\&. So checking the status of one Flag, may clear other ones\&.
.IP "  \(bu" 4
Function may need to be called twice or more in order to monitor one single event\&.
.PP

.PP
.PP
For detailed description of Events, please refer to section I2C_Events in \fBstm32f10x_i2c\&.h\fP file\&.
.PP
1) Basic state monitoring Checks whether the last I2Cx Event is equal to the one passed as parameter\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fII2C_EVENT\fP specifies the event to be checked\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED : EV1 
.IP "\(bu" 2
I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED : EV1 
.IP "\(bu" 2
I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED : EV1 
.IP "\(bu" 2
I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED : EV1 
.IP "\(bu" 2
I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED : EV1 
.IP "\(bu" 2
I2C_EVENT_SLAVE_BYTE_RECEIVED : EV2 
.IP "\(bu" 2
(I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_DUALF) : EV2 
.IP "\(bu" 2
(I2C_EVENT_SLAVE_BYTE_RECEIVED | I2C_FLAG_GENCALL) : EV2 
.IP "\(bu" 2
I2C_EVENT_SLAVE_BYTE_TRANSMITTED : EV3 
.IP "\(bu" 2
(I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_DUALF) : EV3 
.IP "\(bu" 2
(I2C_EVENT_SLAVE_BYTE_TRANSMITTED | I2C_FLAG_GENCALL) : EV3 
.IP "\(bu" 2
I2C_EVENT_SLAVE_ACK_FAILURE : EV3_2 
.IP "\(bu" 2
I2C_EVENT_SLAVE_STOP_DETECTED : EV4 
.IP "\(bu" 2
I2C_EVENT_MASTER_MODE_SELECT : EV5 
.IP "\(bu" 2
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED : EV6 
.IP "\(bu" 2
I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED : EV6 
.IP "\(bu" 2
I2C_EVENT_MASTER_BYTE_RECEIVED : EV7 
.IP "\(bu" 2
I2C_EVENT_MASTER_BYTE_TRANSMITTING : EV8 
.IP "\(bu" 2
I2C_EVENT_MASTER_BYTE_TRANSMITTED : EV8_2 
.IP "\(bu" 2
I2C_EVENT_MASTER_MODE_ADDRESS10 : EV9
.PP
.RE
.PP
\fBNote:\fP
.RS 4
: For detailed description of Events, please refer to section I2C_Events in \fBstm32f10x_i2c\&.h\fP file\&.
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIAn\fP ErrorStatus enumeration value:
.IP "\(bu" 2
SUCCESS: Last event is equal to the I2C_EVENT
.IP "\(bu" 2
ERROR: Last event is different from the I2C_EVENT 
.PP
.RE
.PP

.PP
Definition at line 1073 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_ClearFlag (\fBI2C_TypeDef\fP * I2Cx, uint32_t I2C_FLAG)"

.PP
Clears the I2Cx's pending flags\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fII2C_FLAG\fP specifies the flag to clear\&. This parameter can be any combination of the following values: 
.PD 0

.IP "\(bu" 2
I2C_FLAG_SMBALERT: SMBus Alert flag 
.IP "\(bu" 2
I2C_FLAG_TIMEOUT: Timeout or Tlow error flag 
.IP "\(bu" 2
I2C_FLAG_PECERR: PEC error in reception flag 
.IP "\(bu" 2
I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode) 
.IP "\(bu" 2
I2C_FLAG_AF: Acknowledge failure flag 
.IP "\(bu" 2
I2C_FLAG_ARLO: Arbitration lost flag (Master mode) 
.IP "\(bu" 2
I2C_FLAG_BERR: Bus error flag
.PP
.RE
.PP
\fBNote:\fP
.RS 4
.IP "\(bu" 2
STOPF (STOP detection) is cleared by software sequence: a read operation to I2C_SR1 register (\fBI2C_GetFlagStatus()\fP) followed by a write operation to I2C_CR1 register (\fBI2C_Cmd()\fP to re-enable the I2C peripheral)\&.
.IP "\(bu" 2
ADD10 (10-bit header sent) is cleared by software sequence: a read operation to I2C_SR1 (\fBI2C_GetFlagStatus()\fP) followed by writing the second byte of the address in DR register\&.
.IP "\(bu" 2
BTF (Byte Transfer Finished) is cleared by software sequence: a read operation to I2C_SR1 register (\fBI2C_GetFlagStatus()\fP) followed by a read/write to I2C_DR register (\fBI2C_SendData()\fP)\&.
.IP "\(bu" 2
ADDR (Address sent) is cleared by software sequence: a read operation to I2C_SR1 register (\fBI2C_GetFlagStatus()\fP) followed by a read operation to I2C_SR2 register ((void)(I2Cx->SR2))\&.
.IP "\(bu" 2
SB (Start Bit) is cleared software sequence: a read operation to I2C_SR1 register (\fBI2C_GetFlagStatus()\fP) followed by a write operation to I2C_DR register (\fBI2C_SendData()\fP)\&. 
.PP
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
Definition at line 1255 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_ClearITPendingBit (\fBI2C_TypeDef\fP * I2Cx, uint32_t I2C_IT)"

.PP
Clears the I2Cxï¿½s interrupt pending bits\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fII2C_IT\fP specifies the interrupt pending bit to clear\&. This parameter can be any combination of the following values: 
.PD 0

.IP "\(bu" 2
I2C_IT_SMBALERT: SMBus Alert interrupt 
.IP "\(bu" 2
I2C_IT_TIMEOUT: Timeout or Tlow error interrupt 
.IP "\(bu" 2
I2C_IT_PECERR: PEC error in reception interrupt 
.IP "\(bu" 2
I2C_IT_OVR: Overrun/Underrun interrupt (Slave mode) 
.IP "\(bu" 2
I2C_IT_AF: Acknowledge failure interrupt 
.IP "\(bu" 2
I2C_IT_ARLO: Arbitration lost interrupt (Master mode) 
.IP "\(bu" 2
I2C_IT_BERR: Bus error interrupt
.PP
.RE
.PP
\fBNote:\fP
.RS 4
.IP "\(bu" 2
STOPF (STOP detection) is cleared by software sequence: a read operation to I2C_SR1 register (\fBI2C_GetITStatus()\fP) followed by a write operation to I2C_CR1 register (\fBI2C_Cmd()\fP to re-enable the I2C peripheral)\&.
.IP "\(bu" 2
ADD10 (10-bit header sent) is cleared by software sequence: a read operation to I2C_SR1 (\fBI2C_GetITStatus()\fP) followed by writing the second byte of the address in I2C_DR register\&.
.IP "\(bu" 2
BTF (Byte Transfer Finished) is cleared by software sequence: a read operation to I2C_SR1 register (\fBI2C_GetITStatus()\fP) followed by a read/write to I2C_DR register (\fBI2C_SendData()\fP)\&.
.IP "\(bu" 2
ADDR (Address sent) is cleared by software sequence: a read operation to I2C_SR1 register (\fBI2C_GetITStatus()\fP) followed by a read operation to I2C_SR2 register ((void)(I2Cx->SR2))\&.
.IP "\(bu" 2
SB (Start Bit) is cleared by software sequence: a read operation to I2C_SR1 register (\fBI2C_GetITStatus()\fP) followed by a write operation to I2C_DR register (\fBI2C_SendData()\fP)\&. 
.PP
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
Definition at line 1350 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_Cmd (\fBI2C_TypeDef\fP * I2Cx, \fBFunctionalState\fP NewState)"

.PP
Enables or disables the specified I2C peripheral\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fINewState\fP new state of the I2Cx peripheral\&. This parameter can be: ENABLE or DISABLE\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
Definition at line 335 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_DeInit (\fBI2C_TypeDef\fP * I2Cx)"

.PP
Deinitializes the I2Cx peripheral registers to their default reset values\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
Definition at line 162 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_DMACmd (\fBI2C_TypeDef\fP * I2Cx, \fBFunctionalState\fP NewState)"

.PP
Enables or disables the specified I2C DMA requests\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fINewState\fP new state of the I2C DMA transfer\&. This parameter can be: ENABLE or DISABLE\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
Definition at line 359 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_DMALastTransferCmd (\fBI2C_TypeDef\fP * I2Cx, \fBFunctionalState\fP NewState)"

.PP
Specifies if the next DMA transfer will be the last one\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fINewState\fP new state of the I2C DMA last transfer\&. This parameter can be: ENABLE or DISABLE\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
Definition at line 383 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_DualAddressCmd (\fBI2C_TypeDef\fP * I2Cx, \fBFunctionalState\fP NewState)"

.PP
Enables or disables the specified I2C dual addressing mode\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fINewState\fP new state of the I2C dual addressing mode\&. This parameter can be: ENABLE or DISABLE\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
Definition at line 516 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_FastModeDutyCycleConfig (\fBI2C_TypeDef\fP * I2Cx, uint16_t I2C_DutyCycle)"

.PP
Selects the specified I2C fast mode duty cycle\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fII2C_DutyCycle\fP specifies the fast mode duty cycle\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
I2C_DutyCycle_2: I2C fast mode Tlow/Thigh = 2 
.IP "\(bu" 2
I2C_DutyCycle_16_9: I2C fast mode Tlow/Thigh = 16/9 
.PP
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
Definition at line 933 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_GeneralCallCmd (\fBI2C_TypeDef\fP * I2Cx, \fBFunctionalState\fP NewState)"

.PP
Enables or disables the specified I2C general call feature\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fINewState\fP new state of the I2C General call\&. This parameter can be: ENABLE or DISABLE\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
Definition at line 540 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_GenerateSTART (\fBI2C_TypeDef\fP * I2Cx, \fBFunctionalState\fP NewState)"

.PP
Generates I2Cx communication START condition\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fINewState\fP new state of the I2C START condition generation\&. This parameter can be: ENABLE or DISABLE\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\&.\fP 
.RE
.PP

.PP
Definition at line 407 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_GenerateSTOP (\fBI2C_TypeDef\fP * I2Cx, \fBFunctionalState\fP NewState)"

.PP
Generates I2Cx communication STOP condition\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fINewState\fP new state of the I2C STOP condition generation\&. This parameter can be: ENABLE or DISABLE\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\&.\fP 
.RE
.PP

.PP
Definition at line 431 of file stm32f10x_i2c\&.c\&.
.SS "\fBFlagStatus\fP I2C_GetFlagStatus (\fBI2C_TypeDef\fP * I2Cx, uint32_t I2C_FLAG)"

.PP
Checks whether the specified I2C flag is set or not\&. 3) Flag-based state monitoring
.PP
3) Flag-based state monitoring 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fII2C_FLAG\fP specifies the flag to check\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
I2C_FLAG_DUALF: Dual flag (Slave mode) 
.IP "\(bu" 2
I2C_FLAG_SMBHOST: SMBus host header (Slave mode) 
.IP "\(bu" 2
I2C_FLAG_SMBDEFAULT: SMBus default header (Slave mode) 
.IP "\(bu" 2
I2C_FLAG_GENCALL: General call header flag (Slave mode) 
.IP "\(bu" 2
I2C_FLAG_TRA: Transmitter/Receiver flag 
.IP "\(bu" 2
I2C_FLAG_BUSY: Bus busy flag 
.IP "\(bu" 2
I2C_FLAG_MSL: Master/Slave flag 
.IP "\(bu" 2
I2C_FLAG_SMBALERT: SMBus Alert flag 
.IP "\(bu" 2
I2C_FLAG_TIMEOUT: Timeout or Tlow error flag 
.IP "\(bu" 2
I2C_FLAG_PECERR: PEC error in reception flag 
.IP "\(bu" 2
I2C_FLAG_OVR: Overrun/Underrun flag (Slave mode) 
.IP "\(bu" 2
I2C_FLAG_AF: Acknowledge failure flag 
.IP "\(bu" 2
I2C_FLAG_ARLO: Arbitration lost flag (Master mode) 
.IP "\(bu" 2
I2C_FLAG_BERR: Bus error flag 
.IP "\(bu" 2
I2C_FLAG_TXE: Data register empty flag (Transmitter) 
.IP "\(bu" 2
I2C_FLAG_RXNE: Data register not empty (Receiver) flag 
.IP "\(bu" 2
I2C_FLAG_STOPF: Stop detection flag (Slave mode) 
.IP "\(bu" 2
I2C_FLAG_ADD10: 10-bit header sent flag (Master mode) 
.IP "\(bu" 2
I2C_FLAG_BTF: Byte transfer finished flag 
.IP "\(bu" 2
I2C_FLAG_ADDR: Address sent flag (Master mode) 'ADSL' Address matched flag (Slave mode)'ENDA' 
.IP "\(bu" 2
I2C_FLAG_SB: Start bit flag (Master mode) 
.PP
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIThe\fP new state of I2C_FLAG (SET or RESET)\&. 
.RE
.PP

.PP
Definition at line 1176 of file stm32f10x_i2c\&.c\&.
.SS "\fBITStatus\fP I2C_GetITStatus (\fBI2C_TypeDef\fP * I2Cx, uint32_t I2C_IT)"

.PP
Checks whether the specified I2C interrupt has occurred or not\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fII2C_IT\fP specifies the interrupt source to check\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
I2C_IT_SMBALERT: SMBus Alert flag 
.IP "\(bu" 2
I2C_IT_TIMEOUT: Timeout or Tlow error flag 
.IP "\(bu" 2
I2C_IT_PECERR: PEC error in reception flag 
.IP "\(bu" 2
I2C_IT_OVR: Overrun/Underrun flag (Slave mode) 
.IP "\(bu" 2
I2C_IT_AF: Acknowledge failure flag 
.IP "\(bu" 2
I2C_IT_ARLO: Arbitration lost flag (Master mode) 
.IP "\(bu" 2
I2C_IT_BERR: Bus error flag 
.IP "\(bu" 2
I2C_IT_TXE: Data register empty flag (Transmitter) 
.IP "\(bu" 2
I2C_IT_RXNE: Data register not empty (Receiver) flag 
.IP "\(bu" 2
I2C_IT_STOPF: Stop detection flag (Slave mode) 
.IP "\(bu" 2
I2C_IT_ADD10: 10-bit header sent flag (Master mode) 
.IP "\(bu" 2
I2C_IT_BTF: Byte transfer finished flag 
.IP "\(bu" 2
I2C_IT_ADDR: Address sent flag (Master mode) 'ADSL' Address matched flag (Slave mode)'ENDAD' 
.IP "\(bu" 2
I2C_IT_SB: Start bit flag (Master mode) 
.PP
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIThe\fP new state of I2C_IT (SET or RESET)\&. 
.RE
.PP

.PP
Definition at line 1289 of file stm32f10x_i2c\&.c\&.
.SS "uint32_t I2C_GetLastEvent (\fBI2C_TypeDef\fP * I2Cx)"

.PP
Returns the last I2Cx Event\&. 2) Advanced state monitoring
.PP
2) Advanced state monitoring 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&.
.RE
.PP
\fBNote:\fP
.RS 4
: For detailed description of Events, please refer to section I2C_Events in \fBstm32f10x_i2c\&.h\fP file\&.
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIThe\fP last event 
.RE
.PP

.PP
Definition at line 1121 of file stm32f10x_i2c\&.c\&.
.SS "uint8_t I2C_GetPEC (\fBI2C_TypeDef\fP * I2Cx)"

.PP
Returns the PEC value for the specified I2C\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIThe\fP PEC value\&. 
.RE
.PP

.PP
Definition at line 858 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_Init (\fBI2C_TypeDef\fP * I2Cx, \fBI2C_InitTypeDef\fP * I2C_InitStruct)"

.PP
Initializes the I2Cx peripheral according to the specified parameters in the I2C_InitStruct\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fII2C_InitStruct\fP pointer to a \fBI2C_InitTypeDef\fP structure that contains the configuration information for the specified I2C peripheral\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
Definition at line 191 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_ITConfig (\fBI2C_TypeDef\fP * I2Cx, uint16_t I2C_IT, \fBFunctionalState\fP NewState)"

.PP
Enables or disables the specified I2C interrupts\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fII2C_IT\fP specifies the I2C interrupts sources to be enabled or disabled\&. This parameter can be any combination of the following values: 
.PD 0

.IP "\(bu" 2
I2C_IT_BUF: Buffer interrupt mask 
.IP "\(bu" 2
I2C_IT_EVT: Event interrupt mask 
.IP "\(bu" 2
I2C_IT_ERR: Error interrupt mask 
.PP
.br
\fINewState\fP new state of the specified I2C interrupts\&. This parameter can be: ENABLE or DISABLE\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
Definition at line 569 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_NACKPositionConfig (\fBI2C_TypeDef\fP * I2Cx, uint16_t I2C_NACKPosition)"

.PP
Selects the specified I2C NACK position in master receiver mode\&. This function is useful in I2C Master Receiver mode when the number of data to be received is equal to 2\&. In this case, this function should be called (with parameter I2C_NACKPosition_Next) before data reception starts,as described in the 2-byte reception procedure recommended in Reference Manual in Section: Master receiver\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fII2C_NACKPosition\fP specifies the NACK position\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
I2C_NACKPosition_Next: indicates that the next byte will be the last received byte\&. 
.IP "\(bu" 2
I2C_NACKPosition_Current: indicates that current byte is the last received byte\&.
.PP
.RE
.PP
\fBNote:\fP
.RS 4
This function configures the same bit (POS) as \fBI2C_PECPositionConfig()\fP but is intended to be used in I2C mode while \fBI2C_PECPositionConfig()\fP is intended to used in SMBUS mode\&.
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
Definition at line 729 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_OwnAddress2Config (\fBI2C_TypeDef\fP * I2Cx, uint8_t Address)"

.PP
Configures the specified I2C own address2\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fIAddress\fP specifies the 7bit I2C own address2\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\&.\fP 
.RE
.PP

.PP
Definition at line 478 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_PECPositionConfig (\fBI2C_TypeDef\fP * I2Cx, uint16_t I2C_PECPosition)"

.PP
Selects the specified I2C PEC position\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fII2C_PECPosition\fP specifies the PEC position\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
I2C_PECPosition_Next: indicates that the next byte is PEC 
.IP "\(bu" 2
I2C_PECPosition_Current: indicates that current byte is PEC
.PP
.RE
.PP
\fBNote:\fP
.RS 4
This function configures the same bit (POS) as \fBI2C_NACKPositionConfig()\fP but is intended to be used in SMBUS mode while \fBI2C_NACKPositionConfig()\fP is intended to used in I2C mode\&.
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
Definition at line 812 of file stm32f10x_i2c\&.c\&.
.SS "uint16_t I2C_ReadRegister (\fBI2C_TypeDef\fP * I2Cx, uint8_t I2C_Register)"

.PP
Reads the specified I2C register and returns its value\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2C_Register\fP specifies the register to read\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
I2C_Register_CR1: CR1 register\&. 
.IP "\(bu" 2
I2C_Register_CR2: CR2 register\&. 
.IP "\(bu" 2
I2C_Register_OAR1: OAR1 register\&. 
.IP "\(bu" 2
I2C_Register_OAR2: OAR2 register\&. 
.IP "\(bu" 2
I2C_Register_DR: DR register\&. 
.IP "\(bu" 2
I2C_Register_SR1: SR1 register\&. 
.IP "\(bu" 2
I2C_Register_SR2: SR2 register\&. 
.IP "\(bu" 2
I2C_Register_CCR: CCR register\&. 
.IP "\(bu" 2
I2C_Register_TRISE: TRISE register\&. 
.PP
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIThe\fP value of the read register\&. 
.RE
.PP

.PP
Definition at line 669 of file stm32f10x_i2c\&.c\&.
.SS "uint8_t I2C_ReceiveData (\fBI2C_TypeDef\fP * I2Cx)"

.PP
Returns the most recent received data by the I2Cx peripheral\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fIThe\fP value of the received data\&. 
.RE
.PP

.PP
Definition at line 607 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_Send7bitAddress (\fBI2C_TypeDef\fP * I2Cx, uint8_t Address, uint8_t I2C_Direction)"

.PP
Transmits the address byte to select the slave device\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fIAddress\fP specifies the slave address which will be transmitted 
.br
\fII2C_Direction\fP specifies whether the I2C device will be a Transmitter or a Receiver\&. This parameter can be one of the following values 
.PD 0

.IP "\(bu" 2
I2C_Direction_Transmitter: Transmitter mode 
.IP "\(bu" 2
I2C_Direction_Receiver: Receiver mode 
.PP
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\&.\fP 
.RE
.PP

.PP
Definition at line 625 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_SendData (\fBI2C_TypeDef\fP * I2Cx, uint8_t Data)"

.PP
Sends a data byte through the I2Cx peripheral\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fIData\fP Byte to be transmitted\&.\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
Definition at line 594 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_SMBusAlertConfig (\fBI2C_TypeDef\fP * I2Cx, uint16_t I2C_SMBusAlert)"

.PP
Drives the SMBusAlert pin high or low for the specified I2C\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fII2C_SMBusAlert\fP specifies SMBAlert pin level\&. This parameter can be one of the following values: 
.PD 0

.IP "\(bu" 2
I2C_SMBusAlert_Low: SMBAlert pin driven low 
.IP "\(bu" 2
I2C_SMBusAlert_High: SMBAlert pin driven high 
.PP
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
Definition at line 757 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_SoftwareResetCmd (\fBI2C_TypeDef\fP * I2Cx, \fBFunctionalState\fP NewState)"

.PP
Enables or disables the specified I2C software reset\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fINewState\fP new state of the I2C software reset\&. This parameter can be: ENABLE or DISABLE\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
Definition at line 691 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_StretchClockCmd (\fBI2C_TypeDef\fP * I2Cx, \fBFunctionalState\fP NewState)"

.PP
Enables or disables the specified I2C Clock stretching\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fINewState\fP new state of the I2Cx Clock stretching\&. This parameter can be: ENABLE or DISABLE\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
Definition at line 907 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_StructInit (\fBI2C_InitTypeDef\fP * I2C_InitStruct)"

.PP
Fills each I2C_InitStruct member with its default value\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2C_InitStruct\fP pointer to an \fBI2C_InitTypeDef\fP structure which will be initialized\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
Definition at line 311 of file stm32f10x_i2c\&.c\&.
.SS "void I2C_TransmitPEC (\fBI2C_TypeDef\fP * I2Cx, \fBFunctionalState\fP NewState)"

.PP
Enables or disables the specified I2C PEC transfer\&. 
.PP
\fBParameters:\fP
.RS 4
\fII2Cx\fP where x can be 1 or 2 to select the I2C peripheral\&. 
.br
\fINewState\fP new state of the I2C PEC transmission\&. This parameter can be: ENABLE or DISABLE\&. 
.RE
.PP
\fBReturn values:\fP
.RS 4
\fINone\fP 
.RE
.PP

.PP
Definition at line 781 of file stm32f10x_i2c\&.c\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for STM32_CMSIS from the source code\&.
