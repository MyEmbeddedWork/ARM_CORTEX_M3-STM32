.TH "groupMatrix" 3 "Sun Apr 16 2017" "STM32_CMSIS" \" -*- nroff -*-
.ad l
.nh
.SH NAME
groupMatrix
.SH SYNOPSIS
.br
.PP
.SH "Detailed Description"
.PP 
This set of functions provides basic matrix math operations\&. The functions operate on matrix data structures\&. For example, the type definition for the floating-point matrix structure is shown below: 
.PP
.nf

    typedef struct
    {
      uint16_t numRows;     // number of rows of the matrix\&.
      uint16_t numCols;     // number of columns of the matrix\&.
      float32_t *pData;     // points to the data of the matrix\&.
    } \fBarm_matrix_instance_f32\fP;
.fi
.PP
 There are similar definitions for Q15 and Q31 data types\&.
.PP
The structure specifies the size of the matrix and then points to an array of data\&. The array is of size \fCnumRows X numCols\fP and the values are arranged in row order\&. That is, the matrix element (i, j) is stored at: 
.PP
.nf

    pData[i*numCols + j]
.fi
.PP
.PP
\fBInit Functions\fP
.RS 4
There is an associated initialization function for each type of matrix data structure\&. The initialization function sets the values of the internal structure fields\&. Refer to the function \fC\fBarm_mat_init_f32()\fP\fP, \fC\fBarm_mat_init_q31()\fP\fP and \fC\fBarm_mat_init_q15()\fP\fP for floating-point, Q31 and Q15 types, respectively\&.
.RE
.PP
\fB\fP
.RS 4
Use of the initialization function is optional\&. However, if initialization function is used then the instance structure cannot be placed into a const data section\&. To place the instance structure in a const data section, manually initialize the data structure\&. For example: 
.PP
.nf

\fC\fBarm_matrix_instance_f32\fP S = {nRows, nColumns, pData};\fP
\fC\fBarm_matrix_instance_q31\fP S = {nRows, nColumns, pData};\fP
\fC\fBarm_matrix_instance_q15\fP S = {nRows, nColumns, pData};\fP
.fi
.PP
 where \fCnRows\fP specifies the number of rows, \fCnColumns\fP specifies the number of columns, and \fCpData\fP points to the data array\&.
.RE
.PP
\fBSize Checking\fP
.RS 4
By default all of the matrix functions perform size checking on the input and output matrices\&. For example, the matrix addition function verifies that the two input matrices and the output matrix all have the same number of rows and columns\&. If the size check fails the functions return: 
.PP
.nf

    ARM_MATH_SIZE_MISMATCH
.fi
.PP
 Otherwise the functions return 
.PP
.nf

    ARM_MATH_SUCCESS
.fi
.PP
 There is some overhead associated with this matrix size checking\&. The matrix size checking is enabled via the #define 
.PP
.nf

    ARM_MATH_MATRIX_CHECK
.fi
.PP
 within the library project settings\&. By default this macro is defined and size checking is enabled\&. By changing the project settings and undefining this macro size checking is eliminated and the functions run a bit faster\&. With size checking disabled the functions always return \fCARM_MATH_SUCCESS\fP\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for STM32_CMSIS from the source code\&.
